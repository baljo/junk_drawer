
c:/Users/thv/Dropbox/Github/Particle/junk_drawer/target/5.6.0/p2/junk_drawer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fb590  085fa0a8  0000b590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00004a5c  023fb598  085fa0b0  0000b598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .data_alt     00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007a448  085feb0c  0001a448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bdsram.data  00000800  1007a4c0  085feb84  0001a4c0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000328  1007acc0  1007acc0  0002acc0  2**5
                  ALLOC
  9 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ff384  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 00000c30  085ff388  085ff388  0001f388  2**0
                  ALLOC
 12 .module_info_product 00000006  085fffb8  085fffb8  0001f388  2**0
                  ALLOC
 13 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   0015e0a3  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0001751a  00000000  00000000  0017e0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00045b6d  00000000  00000000  001955bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003438  00000000  00000000  001db12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000c548  00000000  00000000  001de562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002ebc3  00000000  00000000  001eaaaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004b745  00000000  00000000  0021966d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001090fe  00000000  00000000  00264db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000094fc  00000000  00000000  0036deb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	4813      	ldr	r0, [pc, #76]	; (85fa068 <module_user_pre_init+0x50>)
 85fa01a:	4914      	ldr	r1, [pc, #80]	; (85fa06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a13      	ldr	r2, [pc, #76]	; (85fa070 <module_user_pre_init+0x58>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b12      	ldr	r3, [pc, #72]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	4812      	ldr	r0, [pc, #72]	; (85fa078 <module_user_pre_init+0x60>)
 85fa030:	4a12      	ldr	r2, [pc, #72]	; (85fa07c <module_user_pre_init+0x64>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b12      	ldr	r3, [pc, #72]	; (85fa080 <module_user_pre_init+0x68>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fa03a:	4812      	ldr	r0, [pc, #72]	; (85fa084 <module_user_pre_init+0x6c>)
 85fa03c:	4912      	ldr	r1, [pc, #72]	; (85fa088 <module_user_pre_init+0x70>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a12      	ldr	r2, [pc, #72]	; (85fa08c <module_user_pre_init+0x74>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fa048:	4b0a      	ldr	r3, [pc, #40]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa04e:	4810      	ldr	r0, [pc, #64]	; (85fa090 <module_user_pre_init+0x78>)
 85fa050:	4910      	ldr	r1, [pc, #64]	; (85fa094 <module_user_pre_init+0x7c>)
 85fa052:	4288      	cmp	r0, r1
 85fa054:	d005      	beq.n	85fa062 <module_user_pre_init+0x4a>
 85fa056:	4a10      	ldr	r2, [pc, #64]	; (85fa098 <module_user_pre_init+0x80>)
 85fa058:	4282      	cmp	r2, r0
 85fa05a:	d002      	beq.n	85fa062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa05c:	4b05      	ldr	r3, [pc, #20]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa05e:	1a12      	subs	r2, r2, r0
 85fa060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa062:	4801      	ldr	r0, [pc, #4]	; (85fa068 <module_user_pre_init+0x50>)
 85fa064:	bd08      	pop	{r3, pc}
 85fa066:	bf00      	nop
 85fa068:	1007a448 	.word	0x1007a448
 85fa06c:	085feb0c 	.word	0x085feb0c
 85fa070:	1007a4c0 	.word	0x1007a4c0
 85fa074:	10110d2d 	.word	0x10110d2d
 85fa078:	1007acc0 	.word	0x1007acc0
 85fa07c:	1007afe8 	.word	0x1007afe8
 85fa080:	10110ea1 	.word	0x10110ea1
 85fa084:	023fb590 	.word	0x023fb590
 85fa088:	085fa0a8 	.word	0x085fa0a8
 85fa08c:	023fb598 	.word	0x023fb598
 85fa090:	023fb598 	.word	0x023fb598
 85fa094:	085fa0b0 	.word	0x085fa0b0
 85fa098:	023ffff4 	.word	0x023ffff4

085fa09c <dynalib_preinit>:
 85fa09c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023fb598 <strcmp>:
 23fb598:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fb59c:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fb5a0:	2a01      	cmp	r2, #1
 23fb5a2:	bf28      	it	cs
 23fb5a4:	429a      	cmpcs	r2, r3
 23fb5a6:	d0f7      	beq.n	23fb598 <strcmp>
 23fb5a8:	1ad0      	subs	r0, r2, r3
 23fb5aa:	4770      	bx	lr

023fb5ac <strlen>:
 23fb5ac:	4603      	mov	r3, r0
 23fb5ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb5b2:	2a00      	cmp	r2, #0
 23fb5b4:	d1fb      	bne.n	23fb5ae <strlen+0x2>
 23fb5b6:	1a18      	subs	r0, r3, r0
 23fb5b8:	3801      	subs	r0, #1
 23fb5ba:	4770      	bx	lr

023fb5bc <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fb5bc:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fb5be:	f003 f879 	bl	23fe6b4 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb5c2:	2500      	movs	r5, #0
 23fb5c4:	4e05      	ldr	r6, [pc, #20]	; (23fb5dc <module_user_init+0x20>)
 23fb5c6:	4c06      	ldr	r4, [pc, #24]	; (23fb5e0 <module_user_init+0x24>)
 23fb5c8:	1ba4      	subs	r4, r4, r6
 23fb5ca:	08a4      	lsrs	r4, r4, #2
 23fb5cc:	42ac      	cmp	r4, r5
 23fb5ce:	d100      	bne.n	23fb5d2 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fb5d0:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fb5d2:	f856 3b04 	ldr.w	r3, [r6], #4
 23fb5d6:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb5d8:	3501      	adds	r5, #1
 23fb5da:	e7f7      	b.n	23fb5cc <module_user_init+0x10>
 23fb5dc:	023fffd0 	.word	0x023fffd0
 23fb5e0:	023ffff4 	.word	0x023ffff4

023fb5e4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fb5e4:	f000 bdde 	b.w	23fc1a4 <setup>

023fb5e8 <module_user_loop>:
}

void module_user_loop() {
 23fb5e8:	b508      	push	{r3, lr}
    loop();
 23fb5ea:	f000 fd11 	bl	23fc010 <loop>
    _post_loop();
}
 23fb5ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fb5f2:	f003 b817 	b.w	23fe624 <_post_loop>

023fb5f6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fb5f6:	f001 bdbb 	b.w	23fd170 <malloc>

023fb5fa <_Znaj>:
 23fb5fa:	f001 bdb9 	b.w	23fd170 <malloc>

023fb5fe <_ZdaPv>:
 23fb5fe:	f001 bdc5 	b.w	23fd18c <free>

023fb602 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fb602:	f001 bdc3 	b.w	23fd18c <free>
	...

023fb608 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb608:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fb60a:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb60c:	4a02      	ldr	r2, [pc, #8]	; (23fb618 <__cxa_pure_virtual+0x10>)
 23fb60e:	4903      	ldr	r1, [pc, #12]	; (23fb61c <__cxa_pure_virtual+0x14>)
 23fb610:	f001 fc34 	bl	23fce7c <panic_>
  while (1);
 23fb614:	e7fe      	b.n	23fb614 <__cxa_pure_virtual+0xc>
 23fb616:	bf00      	nop
 23fb618:	023fca71 	.word	0x023fca71
 23fb61c:	023ff9d8 	.word	0x023ff9d8

023fb620 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fb620:	7800      	ldrb	r0, [r0, #0]
 23fb622:	fab0 f080 	clz	r0, r0
 23fb626:	0940      	lsrs	r0, r0, #5
 23fb628:	4770      	bx	lr

023fb62a <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fb62a:	2301      	movs	r3, #1
 23fb62c:	7003      	strb	r3, [r0, #0]
 23fb62e:	4770      	bx	lr

023fb630 <sp_get_ready_rx_page>:

u8 *sp_get_ready_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
	
	if (prx_block->rx_gdma_own)
 23fb630:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23fb632:	4a05      	ldr	r2, [pc, #20]	; (23fb648 <sp_get_ready_rx_page+0x18>)
 23fb634:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
	if (prx_block->rx_gdma_own)
 23fb638:	434b      	muls	r3, r1
 23fb63a:	18d1      	adds	r1, r2, r3
 23fb63c:	5cd3      	ldrb	r3, [r2, r3]
 23fb63e:	b90b      	cbnz	r3, 23fb644 <sp_get_ready_rx_page+0x14>
		return NULL;
	else{
		return (u8*)prx_block->rx_addr;
 23fb640:	6848      	ldr	r0, [r1, #4]
 23fb642:	4770      	bx	lr
		return NULL;
 23fb644:	2000      	movs	r0, #0
	}
}
 23fb646:	4770      	bx	lr
 23fb648:	1007adc0 	.word	0x1007adc0

023fb64c <sp_read_rx_page>:

void sp_read_rx_page(u8 *dst, u32 length)
{
 23fb64c:	b538      	push	{r3, r4, r5, lr}
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23fb64e:	4d0c      	ldr	r5, [pc, #48]	; (23fb680 <sp_read_rx_page+0x34>)
{
 23fb650:	460a      	mov	r2, r1
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23fb652:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
	
	if (dst) {
 23fb656:	b128      	cbz	r0, 23fb664 <sp_read_rx_page+0x18>
		memcpy(dst, (void const*)prx_block->rx_addr, length);
 23fb658:	230c      	movs	r3, #12
 23fb65a:	fb03 5304 	mla	r3, r3, r4, r5
 23fb65e:	6859      	ldr	r1, [r3, #4]
 23fb660:	f004 f800 	bl	23ff664 <memcpy>
	}
	prx_block->rx_gdma_own = 1;
 23fb664:	230c      	movs	r3, #12
 23fb666:	2201      	movs	r2, #1
 23fb668:	4363      	muls	r3, r4
	sp_rx_info.rx_usr_cnt++;
 23fb66a:	4414      	add	r4, r2
 23fb66c:	b2e4      	uxtb	r4, r4
	if (sp_rx_info.rx_usr_cnt == SP_DMA_PAGE_NUM){
 23fb66e:	2c04      	cmp	r4, #4
	prx_block->rx_gdma_own = 1;
 23fb670:	54ea      	strb	r2, [r5, r3]
		sp_rx_info.rx_usr_cnt = 0;
 23fb672:	bf0a      	itet	eq
 23fb674:	2300      	moveq	r3, #0
	sp_rx_info.rx_usr_cnt++;
 23fb676:	f885 403d 	strbne.w	r4, [r5, #61]	; 0x3d
		sp_rx_info.rx_usr_cnt = 0;
 23fb67a:	f885 303d 	strbeq.w	r3, [r5, #61]	; 0x3d
	}
}
 23fb67e:	bd38      	pop	{r3, r4, r5, pc}
 23fb680:	1007adc0 	.word	0x1007adc0

023fb684 <sp_release_rx_page>:

void sp_release_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
	
	if (sp_rx_info.rx_full_flag){
 23fb684:	4a09      	ldr	r2, [pc, #36]	; (23fb6ac <sp_release_rx_page+0x28>)
 23fb686:	f892 103e 	ldrb.w	r1, [r2, #62]	; 0x3e
 23fb68a:	b969      	cbnz	r1, 23fb6a8 <sp_release_rx_page+0x24>
	}
	else{
		prx_block->rx_gdma_own = 0;
 23fb68c:	200c      	movs	r0, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23fb68e:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
		prx_block->rx_gdma_own = 0;
 23fb692:	4358      	muls	r0, r3
		sp_rx_info.rx_gdma_cnt++;
 23fb694:	3301      	adds	r3, #1
 23fb696:	b2db      	uxtb	r3, r3
		if (sp_rx_info.rx_gdma_cnt == SP_DMA_PAGE_NUM){
 23fb698:	2b04      	cmp	r3, #4
		prx_block->rx_gdma_own = 0;
 23fb69a:	5411      	strb	r1, [r2, r0]
		if (sp_rx_info.rx_gdma_cnt == SP_DMA_PAGE_NUM){
 23fb69c:	d002      	beq.n	23fb6a4 <sp_release_rx_page+0x20>
		sp_rx_info.rx_gdma_cnt++;
 23fb69e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 23fb6a2:	4770      	bx	lr
			sp_rx_info.rx_gdma_cnt = 0;
 23fb6a4:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
		}
	}
}
 23fb6a8:	4770      	bx	lr
 23fb6aa:	bf00      	nop
 23fb6ac:	1007adc0 	.word	0x1007adc0

023fb6b0 <sp_get_free_rx_page>:

u8 *sp_get_free_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
	
	if (prx_block->rx_gdma_own){
 23fb6b0:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23fb6b2:	4b08      	ldr	r3, [pc, #32]	; (23fb6d4 <sp_get_free_rx_page+0x24>)
 23fb6b4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	if (prx_block->rx_gdma_own){
 23fb6b8:	434a      	muls	r2, r1
 23fb6ba:	1899      	adds	r1, r3, r2
 23fb6bc:	5c9a      	ldrb	r2, [r3, r2]
 23fb6be:	b122      	cbz	r2, 23fb6ca <sp_get_free_rx_page+0x1a>
		sp_rx_info.rx_full_flag = 0;
 23fb6c0:	2200      	movs	r2, #0
		return (u8*)prx_block->rx_addr;
 23fb6c2:	6848      	ldr	r0, [r1, #4]
		sp_rx_info.rx_full_flag = 0;
 23fb6c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		return (u8*)prx_block->rx_addr;
 23fb6c8:	4770      	bx	lr
	}
	else{
		sp_rx_info.rx_full_flag = 1;
 23fb6ca:	2201      	movs	r2, #1
		return (u8*)sp_rx_info.rx_full_block.rx_addr;	//for audio buffer full case
 23fb6cc:	6b58      	ldr	r0, [r3, #52]	; 0x34
		sp_rx_info.rx_full_flag = 1;
 23fb6ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}
}
 23fb6d2:	4770      	bx	lr
 23fb6d4:	1007adc0 	.word	0x1007adc0

023fb6d8 <sp_get_free_rx_length>:

u32 sp_get_free_rx_length(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);

	if (sp_rx_info.rx_full_flag){
 23fb6d8:	4b06      	ldr	r3, [pc, #24]	; (23fb6f4 <sp_get_free_rx_length+0x1c>)
 23fb6da:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 23fb6de:	b10a      	cbz	r2, 23fb6e4 <sp_get_free_rx_length+0xc>
		return sp_rx_info.rx_full_block.rx_length;
 23fb6e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 23fb6e2:	4770      	bx	lr
	}
	else{
		return prx_block->rx_length;
 23fb6e4:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23fb6e6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
		return prx_block->rx_length;
 23fb6ea:	fb01 3302 	mla	r3, r1, r2, r3
 23fb6ee:	6898      	ldr	r0, [r3, #8]
	}
}
 23fb6f0:	4770      	bx	lr
 23fb6f2:	bf00      	nop
 23fb6f4:	1007adc0 	.word	0x1007adc0

023fb6f8 <sp_rx_complete>:


void sp_rx_complete(void *Data)
{
 23fb6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  * @brief  Check DCache Enabled or not.
  */
__STATIC_INLINE
u32 DCache_IsEnabled(void)
{
	return ((SCB->CCR & (u32)SCB_CCR_DC_Msk)?1:0);
 23fb6fa:	4b21      	ldr	r3, [pc, #132]	; (23fb780 <sp_rx_complete+0x88>)
 23fb6fc:	4604      	mov	r4, r0
 23fb6fe:	695b      	ldr	r3, [r3, #20]
__STATIC_INLINE
void DCache_Invalidate(u32 Address, u32 Bytes)
{
	u32 addr = Address, len = Bytes;

	if (DCache_IsEnabled() == 0)
 23fb700:	03d8      	lsls	r0, r3, #15
 23fb702:	d51a      	bpl.n	23fb73a <sp_rx_complete+0x42>
	PGDMA_InitTypeDef GDMA_InitStruct;
	u32 rx_addr;
	u32 rx_length;
	
	GDMA_InitStruct = &(gs->SpRxGdmaInitStruct);
	DCache_Invalidate(GDMA_InitStruct->GDMA_DstAddr, GDMA_InitStruct->GDMA_BlockSize<<2);
 23fb704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fb706:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		return;

	if ((Address == 0xFFFFFFFF) && (Bytes == 0xFFFFFFFF)) {
		SCB_InvalidateDCache();
	} else {
		if ((addr & 0x1F) != 0) {
 23fb708:	06d9      	lsls	r1, r3, #27
 23fb70a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 23fb70e:	d008      	beq.n	23fb722 <sp_rx_complete+0x2a>
			addr = (Address >> 5) << 5;   //32-byte aligned
 23fb710:	f023 011f 	bic.w	r1, r3, #31
			len = ((((Address + Bytes -1) >> 5) + 1) << 5) - addr; //next 32-byte aligned
 23fb714:	3b01      	subs	r3, #1
 23fb716:	4413      	add	r3, r2
 23fb718:	f023 031f 	bic.w	r3, r3, #31
 23fb71c:	3320      	adds	r3, #32
 23fb71e:	1a5a      	subs	r2, r3, r1
			addr = (Address >> 5) << 5;   //32-byte aligned
 23fb720:	460b      	mov	r3, r1
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 23fb722:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCIMVAC = op_addr;
 23fb726:	4816      	ldr	r0, [pc, #88]	; (23fb780 <sp_rx_complete+0x88>)
 23fb728:	4413      	add	r3, r2
    while (op_size > 0) {
 23fb72a:	2a00      	cmp	r2, #0
 23fb72c:	eba3 0102 	sub.w	r1, r3, r2
 23fb730:	dc21      	bgt.n	23fb776 <sp_rx_complete+0x7e>
 23fb732:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 23fb736:	f3bf 8f6f 	isb	sy
	/* Clear Pending ISR */
	GDMA_ClearINT(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum);
 23fb73a:	7861      	ldrb	r1, [r4, #1]
 23fb73c:	4b11      	ldr	r3, [pc, #68]	; (23fb784 <sp_rx_complete+0x8c>)
 23fb73e:	7820      	ldrb	r0, [r4, #0]
 23fb740:	4798      	blx	r3

	sp_release_rx_page();
 23fb742:	f7ff ff9f 	bl	23fb684 <sp_release_rx_page>
	rx_addr = (u32)sp_get_free_rx_page();
 23fb746:	f7ff ffb3 	bl	23fb6b0 <sp_get_free_rx_page>
 23fb74a:	9001      	str	r0, [sp, #4]
	rx_length = sp_get_free_rx_length();
 23fb74c:	f7ff ffc4 	bl	23fb6d8 <sp_get_free_rx_length>
 23fb750:	4605      	mov	r5, r0
	GDMA_SetDstAddr(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_addr);
 23fb752:	9a01      	ldr	r2, [sp, #4]
 23fb754:	7861      	ldrb	r1, [r4, #1]
 23fb756:	7820      	ldrb	r0, [r4, #0]
 23fb758:	4b0b      	ldr	r3, [pc, #44]	; (23fb788 <sp_rx_complete+0x90>)
 23fb75a:	4798      	blx	r3
	GDMA_SetBlkSize(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_length>>2);	
 23fb75c:	7861      	ldrb	r1, [r4, #1]
 23fb75e:	7820      	ldrb	r0, [r4, #0]
 23fb760:	08aa      	lsrs	r2, r5, #2
 23fb762:	4b0a      	ldr	r3, [pc, #40]	; (23fb78c <sp_rx_complete+0x94>)
 23fb764:	4798      	blx	r3
	
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23fb766:	2201      	movs	r2, #1
 23fb768:	7861      	ldrb	r1, [r4, #1]
 23fb76a:	7820      	ldrb	r0, [r4, #0]
 23fb76c:	4b08      	ldr	r3, [pc, #32]	; (23fb790 <sp_rx_complete+0x98>)
	//AUDIO_SP_RXGDMA_Restart(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_addr, rx_length);
}
 23fb76e:	b003      	add	sp, #12
 23fb770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23fb774:	4718      	bx	r3
      SCB->DCIMVAC = op_addr;
 23fb776:	f8c0 125c 	str.w	r1, [r0, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 23fb77a:	3a20      	subs	r2, #32
 23fb77c:	e7d5      	b.n	23fb72a <sp_rx_complete+0x32>
 23fb77e:	bf00      	nop
 23fb780:	e000ed00 	.word	0xe000ed00
 23fb784:	1010bda5 	.word	0x1010bda5
 23fb788:	1010c2b9 	.word	0x1010c2b9
 23fb78c:	1010c309 	.word	0x1010c309
 23fb790:	1010bf91 	.word	0x1010bf91

023fb794 <dmic_setup>:
//

void dmic_setup(int sampleRate, bool stereoMode) {
    SP_OBJ sp_obj;

	switch(sampleRate) {
 23fb794:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
void dmic_setup(int sampleRate, bool stereoMode) {
 23fb798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch(sampleRate) {
 23fb79a:	d01c      	beq.n	23fb7d6 <dmic_setup+0x42>
		case 8000:
			sp_obj.sample_rate = SR_8K;
			break;

		case 32000:
			sp_obj.sample_rate = SR_32K;
 23fb79c:	f5b0 4ffa 	cmp.w	r0, #32000	; 0x7d00
 23fb7a0:	bf14      	ite	ne
 23fb7a2:	2505      	movne	r5, #5
 23fb7a4:	2503      	moveq	r5, #3
	PLL_I2S_Set(ENABLE);		//enable 98.304MHz PLL. needed if fs=8k/16k/32k/48k/96k
 23fb7a6:	4b37      	ldr	r3, [pc, #220]	; (23fb884 <dmic_setup+0xf0>)
 23fb7a8:	2001      	movs	r0, #1
			sp_obj.sample_rate = SR_16K;
			break;
	}

	sp_obj.word_len = WL_16;
	sp_obj.mono_stereo = stereoMode ? CH_STEREO : CH_MONO;
 23fb7aa:	fab1 f481 	clz	r4, r1
	PLL_I2S_Set(ENABLE);		//enable 98.304MHz PLL. needed if fs=8k/16k/32k/48k/96k
 23fb7ae:	4798      	blx	r3
	RCC_PeriphClockCmd(APBPeriph_AUDIOC, APBPeriph_AUDIOC_CLOCK, ENABLE);
 23fb7b0:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 23fb7b4:	2201      	movs	r2, #1
 23fb7b6:	4608      	mov	r0, r1
 23fb7b8:	4f33      	ldr	r7, [pc, #204]	; (23fb888 <dmic_setup+0xf4>)
 23fb7ba:	47b8      	blx	r7
	RCC_PeriphClockCmd(APBPeriph_SPORT, APBPeriph_SPORT_CLOCK, ENABLE);	
 23fb7bc:	4933      	ldr	r1, [pc, #204]	; (23fb88c <dmic_setup+0xf8>)
 23fb7be:	2201      	movs	r2, #1
 23fb7c0:	4608      	mov	r0, r1
 23fb7c2:	47b8      	blx	r7
 23fb7c4:	1eeb      	subs	r3, r5, #3
	sp_obj.mono_stereo = stereoMode ? CH_STEREO : CH_MONO;
 23fb7c6:	0964      	lsrs	r4, r4, #5
	switch(psp_obj->sample_rate){
 23fb7c8:	2b04      	cmp	r3, #4
 23fb7ca:	d807      	bhi.n	23fb7dc <dmic_setup+0x48>
 23fb7cc:	e8df f003 	tbb	[pc, r3]
 23fb7d0:	06560605 	.word	0x06560605
 23fb7d4:	58          	.byte	0x58
 23fb7d5:	00          	.byte	0x00
	switch(sampleRate) {
 23fb7d6:	2507      	movs	r5, #7
 23fb7d8:	e7e5      	b.n	23fb7a6 <dmic_setup+0x12>
			div = 12;
 23fb7da:	260c      	movs	r6, #12
	PLL_Div(div);
 23fb7dc:	4630      	mov	r0, r6
 23fb7de:	f003 fd8d 	bl	23ff2fc <PLL_Div>
	CODEC_Init(psp_obj->sample_rate, psp_obj->word_len, psp_obj->mono_stereo, psp_obj->direction);
 23fb7e2:	2302      	movs	r3, #2
 23fb7e4:	4622      	mov	r2, r4
 23fb7e6:	4628      	mov	r0, r5
 23fb7e8:	2100      	movs	r1, #0
 23fb7ea:	f000 f89f 	bl	23fb92c <CODEC_Init>
	PAD_CMD(_PB_1, DISABLE);
 23fb7ee:	4d28      	ldr	r5, [pc, #160]	; (23fb890 <dmic_setup+0xfc>)
 23fb7f0:	2100      	movs	r1, #0
 23fb7f2:	2021      	movs	r0, #33	; 0x21
 23fb7f4:	47a8      	blx	r5
	PAD_CMD(_PB_2, DISABLE);
 23fb7f6:	2100      	movs	r1, #0
 23fb7f8:	2022      	movs	r0, #34	; 0x22
 23fb7fa:	47a8      	blx	r5
	Pinmux_Config(_PB_1, PINMUX_FUNCTION_DMIC); // DMIC_CLK - A0
 23fb7fc:	4d25      	ldr	r5, [pc, #148]	; (23fb894 <dmic_setup+0x100>)
 23fb7fe:	210c      	movs	r1, #12
 23fb800:	2021      	movs	r0, #33	; 0x21
 23fb802:	47a8      	blx	r5
	Pinmux_Config(_PB_2, PINMUX_FUNCTION_DMIC);	// DMIC_DATA - A1
 23fb804:	210c      	movs	r1, #12
 23fb806:	2022      	movs	r0, #34	; 0x22
 23fb808:	47a8      	blx	r5
	sp_rx_info.rx_full_block.rx_addr = (u32)sp_full_buf;
 23fb80a:	4b23      	ldr	r3, [pc, #140]	; (23fb898 <dmic_setup+0x104>)
 23fb80c:	4a23      	ldr	r2, [pc, #140]	; (23fb89c <dmic_setup+0x108>)
		sp_rx_info.rx_block[i].rx_gdma_own = 1;
 23fb80e:	2501      	movs	r5, #1
	sp_rx_info.rx_full_block.rx_addr = (u32)sp_full_buf;
 23fb810:	635a      	str	r2, [r3, #52]	; 0x34
	sp_rx_info.rx_full_block.rx_length = (u32)SP_FULL_BUF_SIZE;
 23fb812:	2280      	movs	r2, #128	; 0x80
 23fb814:	639a      	str	r2, [r3, #56]	; 0x38
	sp_rx_info.rx_gdma_cnt = 0;
 23fb816:	2200      	movs	r2, #0
		sp_rx_info.rx_block[i].rx_length = SP_DMA_PAGE_SIZE;
 23fb818:	f44f 7000 	mov.w	r0, #512	; 0x200
 23fb81c:	4920      	ldr	r1, [pc, #128]	; (23fb8a0 <dmic_setup+0x10c>)
	sp_rx_info.rx_gdma_cnt = 0;
 23fb81e:	879a      	strh	r2, [r3, #60]	; 0x3c
	sp_rx_info.rx_full_flag = 0;
 23fb820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	for(i=0; i<SP_DMA_PAGE_NUM; i++){
 23fb824:	3201      	adds	r2, #1
 23fb826:	2a04      	cmp	r2, #4
		sp_rx_info.rx_block[i].rx_length = SP_DMA_PAGE_SIZE;
 23fb828:	e9c3 1001 	strd	r1, r0, [r3, #4]
		sp_rx_info.rx_block[i].rx_gdma_own = 1;
 23fb82c:	701d      	strb	r5, [r3, #0]
	for(i=0; i<SP_DMA_PAGE_NUM; i++){
 23fb82e:	f501 7100 	add.w	r1, r1, #512	; 0x200
 23fb832:	f103 030c 	add.w	r3, r3, #12
 23fb836:	d1f5      	bne.n	23fb824 <dmic_setup+0x90>
	sp_init_rx_variables();

	/*configure Sport according to the parameters*/
	AUDIO_SP_StructInit(&SP_InitStruct);
	SP_InitStruct.SP_MonoStereo= psp_obj->mono_stereo;
	SP_InitStruct.SP_WordLen = psp_obj->word_len;
 23fb838:	2600      	movs	r6, #0
	AUDIO_SP_StructInit(&SP_InitStruct);
 23fb83a:	4d1a      	ldr	r5, [pc, #104]	; (23fb8a4 <dmic_setup+0x110>)
 23fb83c:	4b1a      	ldr	r3, [pc, #104]	; (23fb8a8 <dmic_setup+0x114>)
 23fb83e:	4628      	mov	r0, r5
 23fb840:	4798      	blx	r3

	AUDIO_SP_Init(AUDIO_SPORT_DEV, &SP_InitStruct);
 23fb842:	4629      	mov	r1, r5
 23fb844:	4819      	ldr	r0, [pc, #100]	; (23fb8ac <dmic_setup+0x118>)
 23fb846:	4b1a      	ldr	r3, [pc, #104]	; (23fb8b0 <dmic_setup+0x11c>)
	SP_InitStruct.SP_MonoStereo= psp_obj->mono_stereo;
 23fb848:	60ac      	str	r4, [r5, #8]
	SP_InitStruct.SP_WordLen = psp_obj->word_len;
 23fb84a:	602e      	str	r6, [r5, #0]
	AUDIO_SP_Init(AUDIO_SPORT_DEV, &SP_InitStruct);
 23fb84c:	4798      	blx	r3
	
	AUDIO_SP_RdmaCmd(AUDIO_SPORT_DEV, ENABLE);
 23fb84e:	2101      	movs	r1, #1
 23fb850:	4816      	ldr	r0, [pc, #88]	; (23fb8ac <dmic_setup+0x118>)
 23fb852:	4b18      	ldr	r3, [pc, #96]	; (23fb8b4 <dmic_setup+0x120>)
 23fb854:	4798      	blx	r3
	AUDIO_SP_RxStart(AUDIO_SPORT_DEV, ENABLE);	
 23fb856:	2101      	movs	r1, #1
 23fb858:	4b17      	ldr	r3, [pc, #92]	; (23fb8b8 <dmic_setup+0x124>)
 23fb85a:	4814      	ldr	r0, [pc, #80]	; (23fb8ac <dmic_setup+0x118>)
 23fb85c:	4798      	blx	r3

	rx_addr = (u32)sp_get_free_rx_page();
 23fb85e:	f7ff ff27 	bl	23fb6b0 <sp_get_free_rx_page>
 23fb862:	4604      	mov	r4, r0
	rx_length = sp_get_free_rx_length();
 23fb864:	f7ff ff38 	bl	23fb6d8 <sp_get_free_rx_length>
	AUDIO_SP_RXGDMA_Init(0, &SPGdmaStruct.SpRxGdmaInitStruct, &SPGdmaStruct, (IRQ_FUN)sp_rx_complete, (u8*)rx_addr, rx_length);	
 23fb868:	4a14      	ldr	r2, [pc, #80]	; (23fb8bc <dmic_setup+0x128>)
 23fb86a:	e9cd 4000 	strd	r4, r0, [sp]
 23fb86e:	4611      	mov	r1, r2
 23fb870:	4630      	mov	r0, r6
 23fb872:	4b13      	ldr	r3, [pc, #76]	; (23fb8c0 <dmic_setup+0x12c>)
 23fb874:	4c13      	ldr	r4, [pc, #76]	; (23fb8c4 <dmic_setup+0x130>)
 23fb876:	47a0      	blx	r4

    // Particle.connect();
}
 23fb878:	b003      	add	sp, #12
 23fb87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			div = 24;
 23fb87c:	2618      	movs	r6, #24
			break;
 23fb87e:	e7ad      	b.n	23fb7dc <dmic_setup+0x48>
			div = 48;
 23fb880:	2630      	movs	r6, #48	; 0x30
			break;
 23fb882:	e7ab      	b.n	23fb7dc <dmic_setup+0x48>
 23fb884:	023ff315 	.word	0x023ff315
 23fb888:	10110039 	.word	0x10110039
 23fb88c:	40080000 	.word	0x40080000
 23fb890:	1010cf99 	.word	0x1010cf99
 23fb894:	1010cfb9 	.word	0x1010cfb9
 23fb898:	1007adc0 	.word	0x1007adc0
 23fb89c:	1007ad40 	.word	0x1007ad40
 23fb8a0:	1007a4c0 	.word	0x1007a4c0
 23fb8a4:	1007ad14 	.word	0x1007ad14
 23fb8a8:	023ff3c9 	.word	0x023ff3c9
 23fb8ac:	40010800 	.word	0x40010800
 23fb8b0:	023ff41d 	.word	0x023ff41d
 23fb8b4:	023ff4bd 	.word	0x023ff4bd
 23fb8b8:	023ff3f9 	.word	0x023ff3f9
 23fb8bc:	1007acc0 	.word	0x1007acc0
 23fb8c0:	023fb6f9 	.word	0x023fb6f9
 23fb8c4:	023ff4e1 	.word	0x023ff4e1

023fb8c8 <dmic_flush>:


void dmic_flush() {
 23fb8c8:	b508      	push	{r3, lr}
	while(sp_get_ready_rx_page() != NULL) {
 23fb8ca:	f7ff feb1 	bl	23fb630 <sp_get_ready_rx_page>
 23fb8ce:	b900      	cbnz	r0, 23fb8d2 <dmic_flush+0xa>
        sp_read_rx_page(NULL, 0);
    }  
}
 23fb8d0:	bd08      	pop	{r3, pc}
        sp_read_rx_page(NULL, 0);
 23fb8d2:	2100      	movs	r1, #0
 23fb8d4:	4608      	mov	r0, r1
 23fb8d6:	f7ff feb9 	bl	23fb64c <sp_read_rx_page>
 23fb8da:	e7f6      	b.n	23fb8ca <dmic_flush+0x2>

023fb8dc <dmic_ready>:

unsigned char *dmic_ready() {
	return sp_get_ready_rx_page();
 23fb8dc:	f7ff bea8 	b.w	23fb630 <sp_get_ready_rx_page>

023fb8e0 <dmic_read>:
}

void dmic_read(unsigned char *buf, size_t len) {
	sp_read_rx_page(buf, len);
 23fb8e0:	f7ff beb4 	b.w	23fb64c <sp_read_rx_page>

023fb8e4 <AUDIO_SI_WriteReg>:
void AUDIO_SI_WriteReg(u32 address, u32 data)
{
	u32 cnt = 0;
	AUDIO_SI_TypeDef *SIx = AUDIO_SI_DEV;

	SIx->SI_CTRLR = (address << 8) | (data << 16) | BIT_CTRLR_SI_WR_START;
 23fb8e4:	0409      	lsls	r1, r1, #16
 23fb8e6:	4a06      	ldr	r2, [pc, #24]	; (23fb900 <AUDIO_SI_WriteReg+0x1c>)
 23fb8e8:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 23fb8ec:	f040 0001 	orr.w	r0, r0, #1

	while ((SIx->SI_CTRLR & BIT_CTRLR_SI_WR_START) && (++cnt) < 100000);
 23fb8f0:	4b04      	ldr	r3, [pc, #16]	; (23fb904 <AUDIO_SI_WriteReg+0x20>)
	SIx->SI_CTRLR = (address << 8) | (data << 16) | BIT_CTRLR_SI_WR_START;
 23fb8f2:	6010      	str	r0, [r2, #0]
	while ((SIx->SI_CTRLR & BIT_CTRLR_SI_WR_START) && (++cnt) < 100000);
 23fb8f4:	6811      	ldr	r1, [r2, #0]
 23fb8f6:	07c9      	lsls	r1, r1, #31
 23fb8f8:	d501      	bpl.n	23fb8fe <AUDIO_SI_WriteReg+0x1a>
 23fb8fa:	3b01      	subs	r3, #1
 23fb8fc:	d1fa      	bne.n	23fb8f4 <AUDIO_SI_WriteReg+0x10>

	if (cnt == 100000) {
		DBG_8195A("write codec reg fail!!\n");
	}
}
 23fb8fe:	4770      	bx	lr
 23fb900:	40010000 	.word	0x40010000
 23fb904:	000186a0 	.word	0x000186a0

023fb908 <AUDIO_SI_ReadReg>:
	u32 reg_value = 0;
	u32 cnt = 0;
	AUDIO_SI_TypeDef *SIx = AUDIO_SI_DEV;

	/* Configure Read command */
	SIx->SI_CTRLR = (address << 8) | BIT_CTRLR_SI_RD_START;
 23fb908:	4a06      	ldr	r2, [pc, #24]	; (23fb924 <AUDIO_SI_ReadReg+0x1c>)
 23fb90a:	0200      	lsls	r0, r0, #8
 23fb90c:	f040 0010 	orr.w	r0, r0, #16
 23fb910:	6010      	str	r0, [r2, #0]
 23fb912:	4805      	ldr	r0, [pc, #20]	; (23fb928 <AUDIO_SI_ReadReg+0x20>)

	do {
		reg_value = SIx->SI_CTRLR;
 23fb914:	6813      	ldr	r3, [r2, #0]
		/* waiting for read done */
	} while ((reg_value & BIT_CTRLR_SI_RD_START) && (++cnt) < 100000);
 23fb916:	06d9      	lsls	r1, r3, #27
 23fb918:	d502      	bpl.n	23fb920 <AUDIO_SI_ReadReg+0x18>
 23fb91a:	3801      	subs	r0, #1
 23fb91c:	d1fa      	bne.n	23fb914 <AUDIO_SI_ReadReg+0xc>
 23fb91e:	4770      	bx	lr
	if (cnt == 100000) {
		DBG_8195A("read codec reg fail!!\n");
		return 0;
	}

	return ((reg_value & BIT_CTRLR_SI_DATA) >> 16);
 23fb920:	0c18      	lsrs	r0, r3, #16
}
 23fb922:	4770      	bx	lr
 23fb924:	40010000 	.word	0x40010000
 23fb928:	000186a0 	.word	0x000186a0

023fb92c <CODEC_Init>:
  *            @arg APP_LINE_OUT: line out
  *            @arg APP_DAAD_LPBK: loopback
  * @return  None
  */
void CODEC_Init(u32 sample_rate, u32 word_len, u32 mono_stereo, u32 application)
{
 23fb92c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fb930:	4617      	mov	r7, r2
	uint32_t reg_value = 0, reg_value2 = 0, reg_value3 = 0;

	reg_value = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL);
 23fb932:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
{
 23fb936:	461d      	mov	r5, r3
 23fb938:	4688      	mov	r8, r1
	reg_value = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL);
 23fb93a:	f8d2 3344 	ldr.w	r3, [r2, #836]	; 0x344
#define AUTO_CAL_MAX_ERROR				0x007

static inline u32
is_power_supply18(void)
{
	u32 temp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AON_LDO_CTRL0);
 23fb93e:	6911      	ldr	r1, [r2, #16]
	reg_value &= ~(BIT_LSYS_MASK_AC_LDO_REG << BIT_LSYS_SHIFT_AC_LDO_REG);
 23fb940:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

	if (temp & BIT_AON_V1833_SEL)
 23fb944:	0149      	lsls	r1, r1, #5
	//restore the pad power
	if (is_power_supply18()) {
		reg_value |= ((u32)0x68) << BIT_LSYS_SHIFT_AC_LDO_REG;
	} else {
		reg_value |= ((u32)0x2A) << BIT_LSYS_SHIFT_AC_LDO_REG;
 23fb946:	bf4c      	ite	mi
 23fb948:	f043 0354 	orrmi.w	r3, r3, #84	; 0x54
		reg_value |= ((u32)0x68) << BIT_LSYS_SHIFT_AC_LDO_REG;
 23fb94c:	f043 03d0 	orrpl.w	r3, r3, #208	; 0xd0
	}
	HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL, reg_value);

	/* ================= CODEC initialize ======================== */

	if ((application & APP_DAAD_LPBK) == APP_DAAD_LPBK) {
 23fb950:	f015 0410 	ands.w	r4, r5, #16
{
 23fb954:	4606      	mov	r6, r0
	HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL, reg_value);
 23fb956:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344

		reg_value3 = (1 | 1 << BIT_ASRC_FTK_LOOP_EN | 1 << BIT_ASRC_256FS_SYS_SEL | 1 << BIT_ASRC_EN);
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
		reg_value3 = 0;

		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23fb95a:	ea40 1900 	orr.w	r9, r0, r0, lsl #4
	if ((application & APP_DAAD_LPBK) == APP_DAAD_LPBK) {
 23fb95e:	d059      	beq.n	23fba14 <CODEC_Init+0xe8>
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value3);
 23fb960:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 23fb964:	2012      	movs	r0, #18
 23fb966:	f7ff ffbd 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value3);
 23fb96a:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 23fb96e:	2015      	movs	r0, #21
 23fb970:	f7ff ffb8 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23fb974:	201b      	movs	r0, #27
 23fb976:	f7ff ffc7 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 | 1 << BIT_ASRC_FTK_LOOP_EN | 1 << BIT_ASRC_256FS_SYS_SEL);
 23fb97a:	f040 0007 	orr.w	r0, r0, #7
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23fb97e:	b281      	uxth	r1, r0
 23fb980:	201b      	movs	r0, #27
 23fb982:	f7ff ffaf 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23fb986:	201b      	movs	r0, #27
 23fb988:	f7ff ffbe 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ASRC_EN);
 23fb98c:	f040 0010 	orr.w	r0, r0, #16
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23fb990:	b281      	uxth	r1, r0
 23fb992:	201b      	movs	r0, #27
 23fb994:	f7ff ffa6 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value3);
 23fb998:	f641 71bf 	movw	r1, #8127	; 0x1fbf
 23fb99c:	2018      	movs	r0, #24
 23fb99e:	f7ff ffa1 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_L_MUTE_CTRL);
 23fb9a2:	20fb      	movs	r0, #251	; 0xfb
 23fb9a4:	f7ff ffb0 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAAD_LPBK_EN);
 23fb9a8:	f040 0002 	orr.w	r0, r0, #2
		AUDIO_SI_WriteReg(DAC_L_MUTE_CTRL, reg_value);
 23fb9ac:	b281      	uxth	r1, r0
 23fb9ae:	20fb      	movs	r0, #251	; 0xfb
 23fb9b0:	f7ff ff98 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_L_FILTER_CTRL);
 23fb9b4:	2011      	movs	r0, #17
 23fb9b6:	f7ff ffa7 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_AD_MIX_MUTE);
 23fb9ba:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 23fb9be:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 23fb9c2:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value);
 23fb9c4:	2011      	movs	r0, #17
 23fb9c6:	f7ff ff8d 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_R_FILTER_CTRL);
 23fb9ca:	2014      	movs	r0, #20
 23fb9cc:	f7ff ff9c 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_R_AD_MIX_MUTE);
 23fb9d0:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 23fb9d4:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 23fb9d8:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value);
 23fb9da:	2014      	movs	r0, #20
 23fb9dc:	f7ff ff82 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL);
 23fb9e0:	2018      	movs	r0, #24
 23fb9e2:	f7ff ff91 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_L_EN | 1 << BIT_DMIC_R_EN | 1 << BIT_DMIC_CLK_EN);
 23fb9e6:	ea6f 40c0 	mvn.w	r0, r0, lsl #19
 23fb9ea:	ea6f 40d0 	mvn.w	r0, r0, lsr #19
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23fb9ee:	b281      	uxth	r1, r0
 23fb9f0:	2018      	movs	r0, #24
 23fb9f2:	f7ff ff77 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
 23fb9f6:	2117      	movs	r1, #23
 23fb9f8:	201b      	movs	r0, #27
 23fb9fa:	f7ff ff73 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23fb9fe:	4649      	mov	r1, r9
 23fba00:	2017      	movs	r0, #23
 23fba02:	f7ff ff6f 	bl	23fb8e4 <AUDIO_SI_WriteReg>

		reg_value3 = (1 << BIT_I2S_RST_N_REG);
		AUDIO_SI_WriteReg(I2S_CTRL, reg_value3);
 23fba06:	2180      	movs	r1, #128	; 0x80
		reg_value &= (0xffff & (~(3 << BIT_ASRC_256FS_SYS_SEL)));
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
	}

	reg_value = ((word_len << 4) | mono_stereo | 0x0080);
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23fba08:	2010      	movs	r0, #16
}
 23fba0a:	b002      	add	sp, #8
 23fba0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23fba10:	f7ff bf68 	b.w	23fb8e4 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//VREF voltage selection
 23fba14:	2003      	movs	r0, #3
 23fba16:	f7ff ff77 	bl	23fb908 <AUDIO_SI_ReadReg>
	reg_value |= (2 << BIT_VREF_VREFSEL);
 23fba1a:	f420 6140 	bic.w	r1, r0, #3072	; 0xc00
 23fba1e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
	AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23fba22:	2003      	movs	r0, #3
	reg_value |= (2 << BIT_VREF_VREFSEL);
 23fba24:	b289      	uxth	r1, r1
	AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23fba26:	f7ff ff5d 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	if ((application & APP_LINE_OUT) == APP_LINE_OUT) {
 23fba2a:	f015 0a08 	ands.w	sl, r5, #8
 23fba2e:	d04a      	beq.n	23fbac6 <CODEC_Init+0x19a>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL); 	//dac modulation/filter/fifo on
 23fba30:	2018      	movs	r0, #24
 23fba32:	f7ff ff69 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DA_L_EN | 1 << BIT_DA_R_EN | 1 << BIT_MOD_L_EN | 1 << BIT_MOD_R_EN | 1 << BIT_DA_ANA_CLK_EN | 1 << BIT_DA_FIFO_EN);
 23fba36:	f040 003f 	orr.w	r0, r0, #63	; 0x3f
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23fba3a:	b281      	uxth	r1, r0
 23fba3c:	2018      	movs	r0, #24
 23fba3e:	f7ff ff51 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23fba42:	4620      	mov	r0, r4
 23fba44:	f7ff ff60 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DPRAMP_POW | 1 << BIT_DTSDM_CKXEN);
 23fba48:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23fba4c:	f440 7146 	orr.w	r1, r0, #792	; 0x318
 23fba50:	f041 0103 	orr.w	r1, r1, #3
 23fba54:	4620      	mov	r0, r4
 23fba56:	f7ff ff45 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23fba5a:	f240 71fc 	movw	r1, #2044	; 0x7fc
 23fba5e:	2001      	movs	r0, #1
 23fba60:	f7ff ff40 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23fba64:	2002      	movs	r0, #2
 23fba66:	f7ff ff4f 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 1 << BIT_HPO_R_POW | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23fba6a:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23fba6e:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23fba72:	f041 01ea 	orr.w	r1, r1, #234	; 0xea
 23fba76:	2002      	movs	r0, #2
 23fba78:	f7ff ff34 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23fba7c:	2110      	movs	r1, #16
 23fba7e:	200c      	movs	r0, #12
 23fba80:	f7ff ff30 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23fba84:	f649 71fc 	movw	r1, #40956	; 0x9ffc
 23fba88:	2001      	movs	r0, #1
 23fba8a:	f7ff ff2b 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23fba8e:	2002      	movs	r0, #2
 23fba90:	f7ff ff3a 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 1 << BIT_HPO_OPPDPR | 1 << BIT_HPO_R_POW | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 <<
 23fba94:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23fba98:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23fba9c:	f041 01fa 	orr.w	r1, r1, #250	; 0xfa
 23fbaa0:	2002      	movs	r0, #2
 23fbaa2:	f7ff ff1f 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23fbaa6:	4620      	mov	r0, r4
 23fbaa8:	f7ff ff2e 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DPRAMP_ENRAMP | 1 << BIT_DPRAMP_POW | 1 <<
 23fbaac:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23fbab0:	f440 7166 	orr.w	r1, r0, #920	; 0x398
 23fbab4:	f041 0103 	orr.w	r1, r1, #3
 23fbab8:	4620      	mov	r0, r4
 23fbaba:	f7ff ff13 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23fbabe:	2118      	movs	r1, #24
 23fbac0:	200c      	movs	r0, #12
 23fbac2:	f7ff ff0f 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23fbac6:	f015 0405 	ands.w	r4, r5, #5
 23fbaca:	d02f      	beq.n	23fbb2c <CODEC_Init+0x200>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);		//vref power on
 23fbacc:	2002      	movs	r0, #2
 23fbace:	f7ff ff1b 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23fbad2:	f420 41c0 	bic.w	r1, r0, #24576	; 0x6000
 23fbad6:	f441 4101 	orr.w	r1, r1, #33024	; 0x8100
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23fbada:	2002      	movs	r0, #2
		reg_value |= (1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23fbadc:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23fbade:	f7ff ff01 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		DelayUs(5);
 23fbae2:	2005      	movs	r0, #5
 23fbae4:	f003 ff68 	bl	23ff9b8 <__DelayUs_veneer>
		if ((application & APP_AMIC_IN) == APP_AMIC_IN) {
 23fbae8:	07ea      	lsls	r2, r5, #31
 23fbaea:	d57f      	bpl.n	23fbbec <CODEC_Init+0x2c0>
			reg_value = AUDIO_SI_ReadReg(CK_DEPOP_MICBIAS);		//micbias chopper clock enable
 23fbaec:	200c      	movs	r0, #12
 23fbaee:	f7ff ff0b 	bl	23fb908 <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_CKX_MICBIAS_EN);
 23fbaf2:	f040 0010 	orr.w	r0, r0, #16
			AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value);
 23fbaf6:	b281      	uxth	r1, r0
 23fbaf8:	200c      	movs	r0, #12
 23fbafa:	f7ff fef3 	bl	23fb8e4 <AUDIO_SI_WriteReg>
			reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);		//release micbias chopper clock gate and mic_bias on
 23fbafe:	2002      	movs	r0, #2
 23fbb00:	f7ff ff02 	bl	23fb908 <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_MICBIAS_ENCHX | 1 << BIT_MICBIAS_POW);
 23fbb04:	f440 60c0 	orr.w	r0, r0, #1536	; 0x600
			AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23fbb08:	b281      	uxth	r1, r0
 23fbb0a:	2002      	movs	r0, #2
 23fbb0c:	f7ff feea 	bl	23fb8e4 <AUDIO_SI_WriteReg>
			DelayUs(100);
 23fbb10:	2064      	movs	r0, #100	; 0x64
 23fbb12:	f003 ff51 	bl	23ff9b8 <__DelayUs_veneer>
			reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//PGA on and unmute mic
 23fbb16:	2003      	movs	r0, #3
 23fbb18:	f7ff fef6 	bl	23fb908 <AUDIO_SI_ReadReg>
			reg_value |= (2 << BIT_MICBST_MUTE_L | 2 << BIT_MICBST_MUTE_R | 3 << BIT_MICBST_POW);
 23fbb1c:	f020 01f0 	bic.w	r1, r0, #240	; 0xf0
 23fbb20:	f441 7168 	orr.w	r1, r1, #928	; 0x3a0
 23fbb24:	b289      	uxth	r1, r1
			AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23fbb26:	2003      	movs	r0, #3
 23fbb28:	f7ff fedc 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN) || ((application & APP_LINE_OUT) == APP_LINE_OUT)) {
 23fbb2c:	f015 0f0d 	tst.w	r5, #13
 23fbb30:	d002      	beq.n	23fbb38 <CODEC_Init+0x20c>
		DelayMs(200);
 23fbb32:	20c8      	movs	r0, #200	; 0xc8
 23fbb34:	f003 ff38 	bl	23ff9a8 <__DelayMs_veneer>
	if ((application & APP_LINE_OUT) == APP_LINE_OUT) {
 23fbb38:	f1ba 0f00 	cmp.w	sl, #0
 23fbb3c:	d020      	beq.n	23fbb80 <CODEC_Init+0x254>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23fbb3e:	2000      	movs	r0, #0
 23fbb40:	f7ff fee2 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DTSDM_CKXEN);
 23fbb44:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23fbb48:	f440 7106 	orr.w	r1, r0, #536	; 0x218
 23fbb4c:	f041 0103 	orr.w	r1, r1, #3
 23fbb50:	2000      	movs	r0, #0
 23fbb52:	f7ff fec7 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23fbb56:	f240 41fc 	movw	r1, #1276	; 0x4fc
 23fbb5a:	2001      	movs	r0, #1
 23fbb5c:	f7ff fec2 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23fbb60:	2002      	movs	r0, #2
 23fbb62:	f7ff fed1 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 2 << BIT_HPO_OPPDPR | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23fbb66:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23fbb6a:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23fbb6e:	f041 01ea 	orr.w	r1, r1, #234	; 0xea
 23fbb72:	2002      	movs	r0, #2
 23fbb74:	f7ff feb6 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23fbb78:	2110      	movs	r1, #16
 23fbb7a:	200c      	movs	r0, #12
 23fbb7c:	f7ff feb2 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23fbb80:	b16c      	cbz	r4, 23fbb9e <CODEC_Init+0x272>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);		//adc on
 23fbb82:	2000      	movs	r0, #0
 23fbb84:	f7ff fec0 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DTSDM_CKXEN | 1 << BIT_DTSDM_POW_L | 1 << BIT_DTSDM_POW_R);
 23fbb88:	f440 6060 	orr.w	r0, r0, #3584	; 0xe00
 23fbb8c:	f040 0001 	orr.w	r0, r0, #1
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23fbb90:	b281      	uxth	r1, r0
 23fbb92:	2000      	movs	r0, #0
 23fbb94:	f7ff fea6 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		DelayUs(50);
 23fbb98:	2032      	movs	r0, #50	; 0x32
 23fbb9a:	f003 ff0d 	bl	23ff9b8 <__DelayUs_veneer>
	AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value3);
 23fbb9e:	f641 71bf 	movw	r1, #8127	; 0x1fbf
 23fbba2:	2018      	movs	r0, #24
 23fbba4:	f7ff fe9e 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value3);
 23fbba8:	f246 3120 	movw	r1, #25376	; 0x6320
 23fbbac:	2011      	movs	r0, #17
 23fbbae:	f7ff fe99 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value3);
 23fbbb2:	f246 3120 	movw	r1, #25376	; 0x6320
 23fbbb6:	2014      	movs	r0, #20
 23fbbb8:	f7ff fe94 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23fbbbc:	b364      	cbz	r4, 23fbc18 <CODEC_Init+0x2ec>
		reg_value = AUDIO_SI_ReadReg(ADC_L_CTRL);
 23fbbbe:	2012      	movs	r0, #18
 23fbbc0:	f7ff fea2 	bl	23fb908 <AUDIO_SI_ReadReg>
 23fbbc4:	4604      	mov	r4, r0
		reg_value2 = AUDIO_SI_ReadReg(ADC_R_ADJ_D);
 23fbbc6:	2015      	movs	r0, #21
 23fbbc8:	f7ff fe9e 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value &= (0xffff & (~(7 << BIT_ADC_L_ADJ_HPF_COEF_SEL | 3 << BIT_ADC_L_AD_ZDET_FUNC)));
 23fbbcc:	f424 64c7 	bic.w	r4, r4, #1592	; 0x638
 23fbbd0:	f420 6ac7 	bic.w	sl, r0, #1592	; 0x638
 23fbbd4:	b2a4      	uxth	r4, r4
		reg_value2 &= (0xffff & (~(7 << BIT_ADC_R_ADJ_HPF_COEF_SEL | 3 << BIT_ADC_R_AD_ZDET_FUNC)));
 23fbbd6:	fa1f fa8a 	uxth.w	sl, sl
		switch (sample_rate) {
 23fbbda:	2e09      	cmp	r6, #9
 23fbbdc:	d80e      	bhi.n	23fbbfc <CODEC_Init+0x2d0>
 23fbbde:	e8df f006 	tbb	[pc, r6]
 23fbbe2:	c0bb      	.short	0xc0bb
 23fbbe4:	0d0db60d 	.word	0x0d0db60d
 23fbbe8:	c0bb0d0d 	.word	0xc0bb0d0d
			reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//PGA on and unmute line-in
 23fbbec:	2003      	movs	r0, #3
 23fbbee:	f7ff fe8b 	bl	23fb908 <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_MICBST_MUTE_L | 1 << BIT_MICBST_MUTE_R | 3 << BIT_MICBST_POW);
 23fbbf2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
			AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23fbbf6:	f440 7154 	orr.w	r1, r0, #848	; 0x350
 23fbbfa:	e794      	b.n	23fbb26 <CODEC_Init+0x1fa>
		reg_value |= (1 << BIT_ADC_L_ADJ_HPF_2ND_EN);
 23fbbfc:	f044 0104 	orr.w	r1, r4, #4
		reg_value2 |= (1 << BIT_ADC_R_ADJ_HPF_2ND_EN);
 23fbc00:	f04a 0a04 	orr.w	sl, sl, #4
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value);
 23fbc04:	2012      	movs	r0, #18
 23fbc06:	f7ff fe6d 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value2);
 23fbc0a:	2015      	movs	r0, #21
 23fbc0c:	4651      	mov	r1, sl
 23fbc0e:	f7ff fe69 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		DelayMs(50);		//maybe need fine tune per board
 23fbc12:	2032      	movs	r0, #50	; 0x32
 23fbc14:	f003 fec8 	bl	23ff9a8 <__DelayMs_veneer>
	AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
 23fbc18:	2117      	movs	r1, #23
 23fbc1a:	201b      	movs	r0, #27
 23fbc1c:	f7ff fe62 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23fbc20:	4649      	mov	r1, r9
 23fbc22:	2017      	movs	r0, #23
 23fbc24:	f7ff fe5e 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_L_MUTE_CTRL);
 23fbc28:	20fb      	movs	r0, #251	; 0xfb
 23fbc2a:	f7ff fe6d 	bl	23fb908 <AUDIO_SI_ReadReg>
	AUDIO_SI_WriteReg(DAC_L_MUTE_CTRL, reg_value & 0xfff9);
 23fbc2e:	f020 0106 	bic.w	r1, r0, #6
 23fbc32:	f041 0108 	orr.w	r1, r1, #8
 23fbc36:	b289      	uxth	r1, r1
 23fbc38:	20fb      	movs	r0, #251	; 0xfb
 23fbc3a:	f7ff fe53 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_R_MUTE_CTRL);
 23fbc3e:	20fd      	movs	r0, #253	; 0xfd
 23fbc40:	f7ff fe62 	bl	23fb908 <AUDIO_SI_ReadReg>
	AUDIO_SI_WriteReg(DAC_R_MUTE_CTRL, reg_value & 0xfff9);
 23fbc44:	f020 0106 	bic.w	r1, r0, #6
 23fbc48:	f041 0108 	orr.w	r1, r1, #8
 23fbc4c:	b289      	uxth	r1, r1
 23fbc4e:	20fd      	movs	r0, #253	; 0xfd
 23fbc50:	f7ff fe48 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(ALC_MIN_GAIN);
 23fbc54:	2027      	movs	r0, #39	; 0x27
 23fbc56:	f7ff fe57 	bl	23fb908 <AUDIO_SI_ReadReg>
	reg_value &= (0xffff & (~(1 << BIT_DA_STEREO_MODE_EN)));
 23fbc5a:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 23fbc5e:	b281      	uxth	r1, r0
	if (mono_stereo == CH_STEREO) {
 23fbc60:	b90f      	cbnz	r7, 23fbc66 <CODEC_Init+0x33a>
		reg_value |= BIT8;
 23fbc62:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	AUDIO_SI_WriteReg(ALC_MIN_GAIN, reg_value);
 23fbc66:	2027      	movs	r0, #39	; 0x27
 23fbc68:	f7ff fe3c 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_L_CTRL);
 23fbc6c:	20fa      	movs	r0, #250	; 0xfa
 23fbc6e:	f7ff fe4b 	bl	23fb908 <AUDIO_SI_ReadReg>
	reg_value |= (2 << BIT_DAC_L_DA_ZDET_FUNC);
 23fbc72:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 23fbc76:	0540      	lsls	r0, r0, #21
 23fbc78:	0d40      	lsrs	r0, r0, #21
 23fbc7a:	f440 5180 	orr.w	r1, r0, #4096	; 0x1000
	AUDIO_SI_WriteReg(DAC_L_CTRL, reg_value);
 23fbc7e:	20fa      	movs	r0, #250	; 0xfa
 23fbc80:	9101      	str	r1, [sp, #4]
 23fbc82:	f7ff fe2f 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(DAC_R_CTRL, reg_value);
 23fbc86:	20fc      	movs	r0, #252	; 0xfc
 23fbc88:	9901      	ldr	r1, [sp, #4]
 23fbc8a:	f7ff fe2b 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	if ((application & APP_DMIC_IN) == APP_DMIC_IN) {
 23fbc8e:	07ab      	lsls	r3, r5, #30
 23fbc90:	d540      	bpl.n	23fbd14 <CODEC_Init+0x3e8>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_L_FILTER_CTRL);
 23fbc92:	2011      	movs	r0, #17
 23fbc94:	f7ff fe38 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_DMIC_RI_FA_SEL | 1 << BIT_ADC_L_DMIC_LPF2ND_EN | 1 << BIT_ADC_L_DMIC_LPF1ST_EN | 1 << BIT_ADC_L_AD_MIX_MUTE | 1 <<
 23fbc98:	4c34      	ldr	r4, [pc, #208]	; (23fbd6c <CODEC_Init+0x440>)
 23fbc9a:	4020      	ands	r0, r4
 23fbc9c:	f440 41a0 	orr.w	r1, r0, #20480	; 0x5000
 23fbca0:	f041 0119 	orr.w	r1, r1, #25
 23fbca4:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value);
 23fbca6:	2011      	movs	r0, #17
 23fbca8:	f7ff fe1c 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_L_CTRL);
 23fbcac:	2012      	movs	r0, #18
 23fbcae:	f7ff fe2b 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_ADJ_HPF_2ND_EN);
 23fbcb2:	f040 0004 	orr.w	r0, r0, #4
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value);
 23fbcb6:	b281      	uxth	r1, r0
 23fbcb8:	2012      	movs	r0, #18
 23fbcba:	f7ff fe13 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_R_FILTER_CTRL);
 23fbcbe:	2014      	movs	r0, #20
 23fbcc0:	f7ff fe22 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_DMIC_LPF2ND_EN | 1 << BIT_ADC_L_DMIC_LPF1ST_EN | 1 << BIT_ADC_L_AD_MIX_MUTE | 1 << BIT_ADC_L_AD_DCHPF_EN);
 23fbcc4:	4020      	ands	r0, r4
 23fbcc6:	f440 41a0 	orr.w	r1, r0, #20480	; 0x5000
 23fbcca:	f041 0118 	orr.w	r1, r1, #24
 23fbcce:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value);	//bit0: 0 means latching rising edge, whereas 1 means falling edge.
 23fbcd0:	2014      	movs	r0, #20
 23fbcd2:	f7ff fe07 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_R_ADJ_D);
 23fbcd6:	2015      	movs	r0, #21
 23fbcd8:	f7ff fe16 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_R_ADJ_HPF_2ND_EN);
 23fbcdc:	f040 0004 	orr.w	r0, r0, #4
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value);
 23fbce0:	b281      	uxth	r1, r0
 23fbce2:	2015      	movs	r0, #21
 23fbce4:	f7ff fdfe 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_SR_CTRL);
 23fbce8:	2017      	movs	r0, #23
 23fbcea:	f7ff fe0d 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_CLK_SEL);
 23fbcee:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 23fbcf2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 23fbcf6:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, reg_value);
 23fbcf8:	2017      	movs	r0, #23
 23fbcfa:	f7ff fdf3 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL);
 23fbcfe:	2018      	movs	r0, #24
 23fbd00:	f7ff fe02 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_L_EN | 1 << BIT_DMIC_R_EN | 1 << BIT_DMIC_CLK_EN);
 23fbd04:	ea6f 40c0 	mvn.w	r0, r0, lsl #19
 23fbd08:	ea6f 40d0 	mvn.w	r0, r0, lsr #19
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23fbd0c:	b281      	uxth	r1, r0
 23fbd0e:	2018      	movs	r0, #24
 23fbd10:	f7ff fde8 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	if ((sample_rate == SR_96K) || (sample_rate == SR_88P2K)) {
 23fbd14:	f026 0608 	bic.w	r6, r6, #8
 23fbd18:	2e01      	cmp	r6, #1
 23fbd1a:	d113      	bne.n	23fbd44 <CODEC_Init+0x418>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_SR_CTRL);
 23fbd1c:	2017      	movs	r0, #23
 23fbd1e:	f7ff fdf3 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ASRC_FSI_RATE_MANUAL);
 23fbd22:	f420 41f0 	bic.w	r1, r0, #30720	; 0x7800
 23fbd26:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 23fbd2a:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, reg_value);
 23fbd2c:	2017      	movs	r0, #23
 23fbd2e:	f7ff fdd9 	bl	23fb8e4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23fbd32:	201b      	movs	r0, #27
 23fbd34:	f7ff fde8 	bl	23fb908 <AUDIO_SI_ReadReg>
		reg_value &= (0xffff & (~(3 << BIT_ASRC_256FS_SYS_SEL)));
 23fbd38:	f020 000c 	bic.w	r0, r0, #12
 23fbd3c:	b281      	uxth	r1, r0
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23fbd3e:	201b      	movs	r0, #27
 23fbd40:	f7ff fdd0 	bl	23fb8e4 <AUDIO_SI_WriteReg>
	reg_value = ((word_len << 4) | mono_stereo | 0x0080);
 23fbd44:	ea47 1108 	orr.w	r1, r7, r8, lsl #4
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23fbd48:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 23fbd4c:	e65c      	b.n	23fba08 <CODEC_Init+0xdc>
			reg_value |= (1 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23fbd4e:	f044 010c 	orr.w	r1, r4, #12
			reg_value2 |= (1 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23fbd52:	f04a 0a0c 	orr.w	sl, sl, #12
			break;
 23fbd56:	e755      	b.n	23fbc04 <CODEC_Init+0x2d8>
			reg_value |= (2 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23fbd58:	f044 0114 	orr.w	r1, r4, #20
			reg_value2 |= (2 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23fbd5c:	f04a 0a14 	orr.w	sl, sl, #20
			break;
 23fbd60:	e750      	b.n	23fbc04 <CODEC_Init+0x2d8>
			reg_value |= (3 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23fbd62:	f044 011c 	orr.w	r1, r4, #28
			reg_value2 |= (3 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23fbd66:	f04a 0a1c 	orr.w	sl, sl, #28
			break;
 23fbd6a:	e74b      	b.n	23fbc04 <CODEC_Init+0x2d8>
 23fbd6c:	ffffdffe 	.word	0xffffdffe

023fbd70 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fbd70:	4770      	bx	lr

023fbd72 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
 23fbd72:	b530      	push	{r4, r5, lr}
 23fbd74:	b085      	sub	sp, #20
 23fbd76:	4604      	mov	r4, r0
 23fbd78:	9808      	ldr	r0, [sp, #32]
        if (!context) {
 23fbd7a:	b160      	cbz	r0, 23fbd96 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
 23fbd7c:	6840      	ldr	r0, [r0, #4]
 23fbd7e:	b150      	cbz	r0, 23fbd96 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
 23fbd80:	6885      	ldr	r5, [r0, #8]
 23fbd82:	b145      	cbz	r5, 23fbd96 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
 23fbd84:	e9cd 4102 	strd	r4, r1, [sp, #8]
 23fbd88:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fbd8c:	68c4      	ldr	r4, [r0, #12]
 23fbd8e:	466a      	mov	r2, sp
 23fbd90:	ab01      	add	r3, sp, #4
 23fbd92:	a902      	add	r1, sp, #8
 23fbd94:	47a0      	blx	r4
    }
 23fbd96:	b005      	add	sp, #20
 23fbd98:	bd30      	pop	{r4, r5, pc}
	...

023fbd9c <_Z13buttonHandleryi>:

// --------------------------------------------------------------------------
// Button handler for SETUP button, toggles recording on/off
// --------------------------------------------------------------------------
void buttonHandler(system_event_t event, int data) {
    startRecording = !startRecording; // Toggle recording state
 23fbd9c:	4b05      	ldr	r3, [pc, #20]	; (23fbdb4 <_Z13buttonHandleryi+0x18>)
 23fbd9e:	7819      	ldrb	r1, [r3, #0]
 23fbda0:	f081 0101 	eor.w	r1, r1, #1
 23fbda4:	7019      	strb	r1, [r3, #0]
    if (!startRecording) {
 23fbda6:	b911      	cbnz	r1, 23fbdae <_Z13buttonHandleryi+0x12>
        digitalWrite(LED1_PIN, LOW); // Turn off recording LED when stopping
        // (No direct stop method for PDM sampling, so no call here)
    } else {
        digitalWrite(LED1_PIN, HIGH); // Turn on recording LED when starting
 23fbda8:	2007      	movs	r0, #7
 23fbdaa:	f003 b98e 	b.w	23ff0ca <digitalWrite>
 23fbdae:	2101      	movs	r1, #1
 23fbdb0:	e7fa      	b.n	23fbda8 <_Z13buttonHandleryi+0xc>
 23fbdb2:	bf00      	nop
 23fbdb4:	1007ae44 	.word	0x1007ae44

023fbdb8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fbdb8:	b530      	push	{r4, r5, lr}
 23fbdba:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 23fbdbc:	6800      	ldr	r0, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fbdbe:	b085      	sub	sp, #20
 23fbdc0:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 23fbdc2:	6883      	ldr	r3, [r0, #8]
 23fbdc4:	e9d1 4500 	ldrd	r4, r5, [r1]
 23fbdc8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 23fbdcc:	b90b      	cbnz	r3, 23fbdd2 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
 23fbdce:	f003 fc37 	bl	23ff640 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fbdd2:	68c3      	ldr	r3, [r0, #12]
 23fbdd4:	aa01      	add	r2, sp, #4
 23fbdd6:	a902      	add	r1, sp, #8
 23fbdd8:	4798      	blx	r3
      }
 23fbdda:	b005      	add	sp, #20
 23fbddc:	bd30      	pop	{r4, r5, pc}

023fbdde <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 23fbdde:	2a01      	cmp	r2, #1
 23fbde0:	d102      	bne.n	23fbde8 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fbde2:	6001      	str	r1, [r0, #0]
      }
 23fbde4:	2000      	movs	r0, #0
 23fbde6:	4770      	bx	lr
	  switch (__op)
 23fbde8:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23fbdea:	bf04      	itt	eq
 23fbdec:	680b      	ldreq	r3, [r1, #0]
 23fbdee:	6003      	streq	r3, [r0, #0]
	      break;
 23fbdf0:	e7f8      	b.n	23fbde4 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

023fbdf2 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fbdf2:	6803      	ldr	r3, [r0, #0]
 23fbdf4:	6812      	ldr	r2, [r2, #0]
 23fbdf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fbdfa:	4718      	bx	r3

023fbdfc <_ZNSt17_Function_handlerIFvPhjEZ4loopEUlS0_jE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
 23fbdfc:	2a01      	cmp	r2, #1
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fbdfe:	bf08      	it	eq
 23fbe00:	6001      	streq	r1, [r0, #0]
      }
 23fbe02:	2000      	movs	r0, #0
 23fbe04:	4770      	bx	lr
	...

023fbe08 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fbe08:	b510      	push	{r4, lr}
 23fbe0a:	4604      	mov	r4, r0
 23fbe0c:	4b09      	ldr	r3, [pc, #36]	; (23fbe34 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fbe0e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fbe10:	f001 fd86 	bl	23fd920 <_ZN5spark10LogManager8instanceEv>
 23fbe14:	4621      	mov	r1, r4
 23fbe16:	f001 ffbd 	bl	23fdd94 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fbe1a:	f002 fd57 	bl	23fe8cc <_Z16_fetch_usbserialv>
 23fbe1e:	f002 fd49 	bl	23fe8b4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fbe22:	4620      	mov	r0, r4
 23fbe24:	4b04      	ldr	r3, [pc, #16]	; (23fbe38 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fbe26:	f840 3b04 	str.w	r3, [r0], #4
 23fbe2a:	f001 fe4f 	bl	23fdacc <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fbe2e:	4620      	mov	r0, r4
 23fbe30:	bd10      	pop	{r4, pc}
 23fbe32:	bf00      	nop
 23fbe34:	023ffa58 	.word	0x023ffa58
 23fbe38:	023ffa40 	.word	0x023ffa40

023fbe3c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fbe3c:	b510      	push	{r4, lr}
 23fbe3e:	4604      	mov	r4, r0
    }
 23fbe40:	f7ff ffe2 	bl	23fbe08 <_ZN5spark16SerialLogHandlerD1Ev>
 23fbe44:	4620      	mov	r0, r4
 23fbe46:	2124      	movs	r1, #36	; 0x24
 23fbe48:	f7ff fbdb 	bl	23fb602 <_ZdlPvj>
 23fbe4c:	4620      	mov	r0, r4
 23fbe4e:	bd10      	pop	{r4, pc}

023fbe50 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fbe50:	b510      	push	{r4, lr}
      if (_M_manager)
 23fbe52:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fbe54:	4604      	mov	r4, r0
      if (_M_manager)
 23fbe56:	b113      	cbz	r3, 23fbe5e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fbe58:	2203      	movs	r2, #3
 23fbe5a:	4601      	mov	r1, r0
 23fbe5c:	4798      	blx	r3
    }
 23fbe5e:	4620      	mov	r0, r4
 23fbe60:	bd10      	pop	{r4, pc}

023fbe62 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
 23fbe62:	b510      	push	{r4, lr}
            delete callableWrapper;
 23fbe64:	4604      	mov	r4, r0
 23fbe66:	b138      	cbz	r0, 23fbe78 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
 23fbe68:	f7ff fff2 	bl	23fbe50 <_ZNSt14_Function_baseD1Ev>
 23fbe6c:	4620      	mov	r0, r4
        };
 23fbe6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
 23fbe72:	2110      	movs	r1, #16
 23fbe74:	f7ff bbc5 	b.w	23fb602 <_ZdlPvj>
        };
 23fbe78:	bd10      	pop	{r4, pc}

023fbe7a <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23fbe7a:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fbe7c:	f04f 0c20 	mov.w	ip, #32
 23fbe80:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23fbe82:	b500      	push	{lr}
 23fbe84:	b08c      	sub	sp, #48	; 0x30
 23fbe86:	aa0d      	add	r2, sp, #52	; 0x34
 23fbe88:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fbe8c:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fbe90:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fbe94:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fbe96:	6801      	ldr	r1, [r0, #0]
 23fbe98:	aa04      	add	r2, sp, #16
 23fbe9a:	201e      	movs	r0, #30
 23fbe9c:	f000 fffc 	bl	23fce98 <log_message_v>
}
 23fbea0:	b00c      	add	sp, #48	; 0x30
 23fbea2:	f85d eb04 	ldr.w	lr, [sp], #4
 23fbea6:	b003      	add	sp, #12
 23fbea8:	4770      	bx	lr

023fbeaa <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
 23fbeaa:	b40e      	push	{r1, r2, r3}
    attr.flags = 0;
 23fbeac:	f04f 0c20 	mov.w	ip, #32
 23fbeb0:	2300      	movs	r3, #0
inline void spark::Logger::error(const char *fmt, ...) const {
 23fbeb2:	b500      	push	{lr}
 23fbeb4:	b08c      	sub	sp, #48	; 0x30
 23fbeb6:	aa0d      	add	r2, sp, #52	; 0x34
 23fbeb8:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fbebc:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fbec0:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fbec4:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fbec6:	6801      	ldr	r1, [r0, #0]
 23fbec8:	aa04      	add	r2, sp, #16
 23fbeca:	2032      	movs	r0, #50	; 0x32
 23fbecc:	f000 ffe4 	bl	23fce98 <log_message_v>
}
 23fbed0:	b00c      	add	sp, #48	; 0x30
 23fbed2:	f85d eb04 	ldr.w	lr, [sp], #4
 23fbed6:	b003      	add	sp, #12
 23fbed8:	4770      	bx	lr
	...

023fbedc <_Z5santav>:
void santa()  {
 23fbedc:	b510      	push	{r4, lr}
    myservo.write(130);                           // tell servo to go to position in variable 'pos'
 23fbede:	4c07      	ldr	r4, [pc, #28]	; (23fbefc <_Z5santav+0x20>)
 23fbee0:	2182      	movs	r1, #130	; 0x82
 23fbee2:	4620      	mov	r0, r4
 23fbee4:	f001 fa0d 	bl	23fd302 <_ZN5Servo5writeEi>
    delay(wait);
 23fbee8:	200a      	movs	r0, #10
 23fbeea:	f002 fb63 	bl	23fe5b4 <delay>
    myservo.write(-130);                           // tell servo to go to position in variable 'pos'
 23fbeee:	4620      	mov	r0, r4
}
 23fbef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    myservo.write(-130);                           // tell servo to go to position in variable 'pos'
 23fbef4:	f06f 0181 	mvn.w	r1, #129	; 0x81
 23fbef8:	f001 ba03 	b.w	23fd302 <_ZN5Servo5writeEi>
 23fbefc:	1007ae34 	.word	0x1007ae34

023fbf00 <_Z13analyzeBufferPhj>:
    int energy = 0;
 23fbf00:	2200      	movs	r2, #0
void analyzeBuffer(uint8_t *buf, size_t bufSize) {
 23fbf02:	b510      	push	{r4, lr}
    size_t samples = bufSize / sizeof(int16_t);
 23fbf04:	084c      	lsrs	r4, r1, #1
    for (size_t i = 0; i < samples; i++) {
 23fbf06:	f021 0101 	bic.w	r1, r1, #1
 23fbf0a:	4401      	add	r1, r0
 23fbf0c:	4288      	cmp	r0, r1
 23fbf0e:	d007      	beq.n	23fbf20 <_Z13analyzeBufferPhj+0x20>
        energy += abs(audioData[i]);
 23fbf10:	f930 3b02 	ldrsh.w	r3, [r0], #2
 23fbf14:	2b00      	cmp	r3, #0
 23fbf16:	bfb8      	it	lt
 23fbf18:	425b      	neglt	r3, r3
 23fbf1a:	fa12 f283 	uxtah	r2, r2, r3
    for (size_t i = 0; i < samples; i++) {
 23fbf1e:	e7f5      	b.n	23fbf0c <_Z13analyzeBufferPhj+0xc>
    energy /= samples; // Average energy
 23fbf20:	fbb2 f4f4 	udiv	r4, r2, r4
    Log.info("Average Energy Level: %d", energy);
 23fbf24:	4906      	ldr	r1, [pc, #24]	; (23fbf40 <_Z13analyzeBufferPhj+0x40>)
 23fbf26:	4622      	mov	r2, r4
 23fbf28:	4806      	ldr	r0, [pc, #24]	; (23fbf44 <_Z13analyzeBufferPhj+0x44>)
 23fbf2a:	f7ff ffa6 	bl	23fbe7a <_ZNK5spark6Logger4infoEPKcz>
    if (energy > ENERGY_THRESHOLD) {
 23fbf2e:	f240 23ee 	movw	r3, #750	; 0x2ee
 23fbf32:	429c      	cmp	r4, r3
 23fbf34:	d903      	bls.n	23fbf3e <_Z13analyzeBufferPhj+0x3e>
}
 23fbf36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        santa();
 23fbf3a:	f7ff bfcf 	b.w	23fbedc <_Z5santav>
}
 23fbf3e:	bd10      	pop	{r4, pc}
 23fbf40:	023ff9ed 	.word	0x023ff9ed
 23fbf44:	1007ae74 	.word	0x1007ae74

023fbf48 <_ZNSt17_Function_handlerIFvPhjEZ4loopEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fbf48:	b508      	push	{r3, lr}
 23fbf4a:	460b      	mov	r3, r1
                analyzeBuffer(buf, bufSize);
 23fbf4c:	6811      	ldr	r1, [r2, #0]
 23fbf4e:	6818      	ldr	r0, [r3, #0]
 23fbf50:	f7ff ffd6 	bl	23fbf00 <_Z13analyzeBufferPhj>
                isSamplingInProgress = false;
 23fbf54:	2200      	movs	r2, #0
 23fbf56:	4b01      	ldr	r3, [pc, #4]	; (23fbf5c <_ZNSt17_Function_handlerIFvPhjEZ4loopEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x14>)
 23fbf58:	701a      	strb	r2, [r3, #0]
      }
 23fbf5a:	bd08      	pop	{r3, pc}
 23fbf5c:	1007ae0c 	.word	0x1007ae0c

023fbf60 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 23fbf60:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fbf62:	2300      	movs	r3, #0
 23fbf64:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fbf66:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fbf68:	4604      	mov	r4, r0
 23fbf6a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fbf6c:	b12b      	cbz	r3, 23fbf7a <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fbf6e:	2202      	movs	r2, #2
 23fbf70:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fbf72:	68eb      	ldr	r3, [r5, #12]
 23fbf74:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fbf76:	68ab      	ldr	r3, [r5, #8]
 23fbf78:	60a3      	str	r3, [r4, #8]
    }
 23fbf7a:	4620      	mov	r0, r4
 23fbf7c:	bd38      	pop	{r3, r4, r5, pc}

023fbf7e <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
 23fbf7e:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fbf80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fbf82:	4604      	mov	r4, r0
	switch (__op)
 23fbf84:	d104      	bne.n	23fbf90 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 23fbf86:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fbf88:	6003      	str	r3, [r0, #0]
      }
 23fbf8a:	2000      	movs	r0, #0
 23fbf8c:	b003      	add	sp, #12
 23fbf8e:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
 23fbf90:	2a02      	cmp	r2, #2
 23fbf92:	d00c      	beq.n	23fbfae <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
 23fbf94:	2a03      	cmp	r2, #3
 23fbf96:	d1f8      	bne.n	23fbf8a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fbf98:	6804      	ldr	r4, [r0, #0]
 23fbf9a:	2c00      	cmp	r4, #0
 23fbf9c:	d0f5      	beq.n	23fbf8a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fbf9e:	4620      	mov	r0, r4
 23fbfa0:	f7ff ff56 	bl	23fbe50 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fbfa4:	2110      	movs	r1, #16
 23fbfa6:	4620      	mov	r0, r4
 23fbfa8:	f7ff fb2b 	bl	23fb602 <_ZdlPvj>
 23fbfac:	e7ed      	b.n	23fbf8a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
 23fbfae:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fbfb0:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 23fbfb2:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fbfb4:	f7ff fb1f 	bl	23fb5f6 <_Znwj>
 23fbfb8:	4605      	mov	r5, r0
 23fbfba:	b110      	cbz	r0, 23fbfc2 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23fbfbc:	9901      	ldr	r1, [sp, #4]
 23fbfbe:	f7ff ffcf 	bl	23fbf60 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
 23fbfc2:	6025      	str	r5, [r4, #0]
	}
 23fbfc4:	e7e1      	b.n	23fbf8a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

023fbfc6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbfc6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fbfc8:	2614      	movs	r6, #20
 23fbfca:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbfce:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fbfd0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fbfd4:	42ae      	cmp	r6, r5
 23fbfd6:	d004      	beq.n	23fbfe2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fbfd8:	4628      	mov	r0, r5
 23fbfda:	f001 fa0d 	bl	23fd3f8 <_ZN6StringD1Ev>
 23fbfde:	3514      	adds	r5, #20
 23fbfe0:	e7f8      	b.n	23fbfd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fbfe2:	6820      	ldr	r0, [r4, #0]
 23fbfe4:	f001 f8d2 	bl	23fd18c <free>
    AllocatorT::free(data_);
}
 23fbfe8:	4620      	mov	r0, r4
 23fbfea:	bd70      	pop	{r4, r5, r6, pc}

023fbfec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fbfec:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbfee:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fbff0:	460b      	mov	r3, r1
 23fbff2:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbff4:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fbff8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fbffc:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fc000:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fc004:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fc008:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fc00c:	b002      	add	sp, #8
 23fc00e:	bd10      	pop	{r4, pc}

023fc010 <loop>:
void loop() {
 23fc010:	b510      	push	{r4, lr}
 23fc012:	b088      	sub	sp, #32
    Microphone_PDM::instance().loop();
 23fc014:	f000 fb30 	bl	23fc678 <_ZN14Microphone_PDM8instanceEv>
 23fc018:	f000 fb80 	bl	23fc71c <_ZN14Microphone_PDM4loopEv>
    if (startRecording) {
 23fc01c:	4b1f      	ldr	r3, [pc, #124]	; (23fc09c <loop+0x8c>)
 23fc01e:	781a      	ldrb	r2, [r3, #0]
 23fc020:	4b1f      	ldr	r3, [pc, #124]	; (23fc0a0 <loop+0x90>)
 23fc022:	2a00      	cmp	r2, #0
 23fc024:	d037      	beq.n	23fc096 <loop+0x86>
        if (!isSamplingInProgress) {
 23fc026:	781a      	ldrb	r2, [r3, #0]
 23fc028:	2a00      	cmp	r2, #0
 23fc02a:	d135      	bne.n	23fc098 <loop+0x88>
            isSamplingInProgress = true;
 23fc02c:	2201      	movs	r2, #1
            Microphone_PDM_BufferSampling *samplingBuffer = new Microphone_PDM_BufferSampling_wav();
 23fc02e:	202c      	movs	r0, #44	; 0x2c
            isSamplingInProgress = true;
 23fc030:	701a      	strb	r2, [r3, #0]
            Microphone_PDM_BufferSampling *samplingBuffer = new Microphone_PDM_BufferSampling_wav();
 23fc032:	f7ff fae0 	bl	23fb5f6 <_Znwj>
 23fc036:	4604      	mov	r4, r0
 23fc038:	b108      	cbz	r0, 23fc03e <loop+0x2e>
 23fc03a:	f000 fcab 	bl	23fc994 <_ZN33Microphone_PDM_BufferSampling_wavC1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
 23fc03e:	4b19      	ldr	r3, [pc, #100]	; (23fc0a4 <loop+0x94>)
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fc040:	2202      	movs	r2, #2
	    _M_invoker = &_My_handler::_M_invoke;
 23fc042:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fc044:	4b18      	ldr	r3, [pc, #96]	; (23fc0a8 <loop+0x98>)
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fc046:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
 23fc048:	9302      	str	r3, [sp, #8]
    _Function_base() : _M_manager(nullptr) { }
 23fc04a:	2300      	movs	r3, #0
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fc04c:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
 23fc04e:	9306      	str	r3, [sp, #24]
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fc050:	f7ff fed4 	bl	23fbdfc <_ZNSt17_Function_handlerIFvPhjEZ4loopEUlS0_jE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
 23fc054:	9b03      	ldr	r3, [sp, #12]
	std::swap(_M_functor, __x._M_functor);
 23fc056:	f104 0114 	add.w	r1, r4, #20
	  _M_invoker = __x._M_invoker;
 23fc05a:	9307      	str	r3, [sp, #28]
	  _M_manager = __x._M_manager;
 23fc05c:	9b02      	ldr	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
 23fc05e:	a804      	add	r0, sp, #16
	  _M_manager = __x._M_manager;
 23fc060:	9306      	str	r3, [sp, #24]
	std::swap(_M_functor, __x._M_functor);
 23fc062:	f7ff ffc3 	bl	23fbfec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc066:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fc068:	69e2      	ldr	r2, [r4, #28]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc06a:	61e3      	str	r3, [r4, #28]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc06c:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fc06e:	9206      	str	r2, [sp, #24]
 23fc070:	6a22      	ldr	r2, [r4, #32]
    class function<_Res(_ArgTypes...)>
 23fc072:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 23fc074:	6223      	str	r3, [r4, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fc076:	9207      	str	r2, [sp, #28]
 23fc078:	f7ff feea 	bl	23fbe50 <_ZNSt14_Function_baseD1Ev>
 23fc07c:	4668      	mov	r0, sp
 23fc07e:	f7ff fee7 	bl	23fbe50 <_ZNSt14_Function_baseD1Ev>
	virtual ~Microphone_PDM_BufferSampling();

	/**
	 * @brief Set the how long you want to record in milliseconds
	 */
	Microphone_PDM_BufferSampling &withDurationMs(unsigned long ms) { this->durationMs = ms; return *this;};
 23fc082:	2332      	movs	r3, #50	; 0x32
 23fc084:	6123      	str	r3, [r4, #16]
            Microphone_PDM::instance().bufferSamplingStart(samplingBuffer);
 23fc086:	f000 faf7 	bl	23fc678 <_ZN14Microphone_PDM8instanceEv>
 23fc08a:	4621      	mov	r1, r4
}
 23fc08c:	b008      	add	sp, #32
 23fc08e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            Microphone_PDM::instance().bufferSamplingStart(samplingBuffer);
 23fc092:	f000 bb53 	b.w	23fc73c <_ZN14Microphone_PDM19bufferSamplingStartEP29Microphone_PDM_BufferSampling>
        isSamplingInProgress = false;
 23fc096:	701a      	strb	r2, [r3, #0]
}
 23fc098:	b008      	add	sp, #32
 23fc09a:	bd10      	pop	{r4, pc}
 23fc09c:	1007ae44 	.word	0x1007ae44
 23fc0a0:	1007ae0c 	.word	0x1007ae0c
 23fc0a4:	023fbf49 	.word	0x023fbf49
 23fc0a8:	023fbdfd 	.word	0x023fbdfd

023fc0ac <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
 23fc0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fc0b0:	f04f 0800 	mov.w	r8, #0
 23fc0b4:	b094      	sub	sp, #80	; 0x50
        };
 23fc0b6:	991a      	ldr	r1, [sp, #104]	; 0x68
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
 23fc0b8:	4605      	mov	r5, r0
        };
 23fc0ba:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
 23fc0bc:	4617      	mov	r7, r2
 23fc0be:	461e      	mov	r6, r3
        };
 23fc0c0:	f7ff ff4e 	bl	23fbf60 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23fc0c4:	a904      	add	r1, sp, #16
 23fc0c6:	a808      	add	r0, sp, #32
 23fc0c8:	f7ff ff4a 	bl	23fbf60 <_ZNSt8functionIFvyiEEC1ERKS1_>
 23fc0cc:	a908      	add	r1, sp, #32
 23fc0ce:	a80c      	add	r0, sp, #48	; 0x30
 23fc0d0:	f7ff ff46 	bl	23fbf60 <_ZNSt8functionIFvyiEEC1ERKS1_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fc0d4:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 23fc0d6:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fc0da:	f7ff fa8c 	bl	23fb5f6 <_Znwj>
 23fc0de:	4604      	mov	r4, r0
 23fc0e0:	b168      	cbz	r0, 23fc0fe <_ZN11SystemClass2onEySt8functionIFvyiEE+0x52>
	std::swap(_M_functor, __x._M_functor);
 23fc0e2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fc0e4:	f8c0 8008 	str.w	r8, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fc0e8:	a80c      	add	r0, sp, #48	; 0x30
 23fc0ea:	f7ff ff7f 	bl	23fbfec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc0ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
 23fc0f0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc0f2:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fc0f4:	920e      	str	r2, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc0f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
 23fc0f8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc0fa:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fc0fc:	920f      	str	r2, [sp, #60]	; 0x3c
	    _M_invoker = &_My_handler::_M_invoke;
 23fc0fe:	4b24      	ldr	r3, [pc, #144]	; (23fc190 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe4>)
              callable_(callable) {
 23fc100:	2200      	movs	r2, #0
 23fc102:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
 23fc104:	4b23      	ldr	r3, [pc, #140]	; (23fc194 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>)
 23fc106:	f04f 0800 	mov.w	r8, #0
 23fc10a:	9312      	str	r3, [sp, #72]	; 0x48
 23fc10c:	2300      	movs	r3, #0
 23fc10e:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
 23fc112:	4b21      	ldr	r3, [pc, #132]	; (23fc198 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xec>)
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23fc114:	2010      	movs	r0, #16
              callable_(callable) {
 23fc116:	f8c5 8008 	str.w	r8, [r5, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fc11a:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
 23fc11c:	e9cd 3801 	strd	r3, r8, [sp, #4]
 23fc120:	f8cd 800c 	str.w	r8, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23fc124:	f7ff fa67 	bl	23fb5f6 <_Znwj>
 23fc128:	4604      	mov	r4, r0
 23fc12a:	b1d8      	cbz	r0, 23fc164 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xb8>
    bool _M_empty() const { return !_M_manager; }
 23fc12c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
 23fc12e:	f8c0 8008 	str.w	r8, [r0, #8]
      if (static_cast<bool>(__x))
 23fc132:	b133      	cbz	r3, 23fc142 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x96>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fc134:	2202      	movs	r2, #2
 23fc136:	a910      	add	r1, sp, #64	; 0x40
 23fc138:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fc13a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23fc13c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fc13e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23fc140:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
 23fc142:	4b16      	ldr	r3, [pc, #88]	; (23fc19c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf0>)
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23fc144:	4638      	mov	r0, r7
        context.destructor = [](void* callable) -> void {
 23fc146:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23fc148:	4631      	mov	r1, r6
 23fc14a:	4a15      	ldr	r2, [pc, #84]	; (23fc1a0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
 23fc14c:	ab01      	add	r3, sp, #4
        context.callable = wrapper;
 23fc14e:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23fc150:	f000 fee8 	bl	23fcf24 <system_subscribe_event>
        if (r) {
 23fc154:	b1b0      	cbz	r0, 23fc184 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xd8>
    class function<_Res(_ArgTypes...)>
 23fc156:	4620      	mov	r0, r4
 23fc158:	f7ff fe7a 	bl	23fbe50 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
 23fc15c:	2110      	movs	r1, #16
 23fc15e:	4620      	mov	r0, r4
 23fc160:	f7ff fa4f 	bl	23fb602 <_ZdlPvj>
 23fc164:	a810      	add	r0, sp, #64	; 0x40
 23fc166:	f7ff fe73 	bl	23fbe50 <_ZNSt14_Function_baseD1Ev>
 23fc16a:	a80c      	add	r0, sp, #48	; 0x30
 23fc16c:	f7ff fe70 	bl	23fbe50 <_ZNSt14_Function_baseD1Ev>
 23fc170:	a808      	add	r0, sp, #32
 23fc172:	f7ff fe6d 	bl	23fbe50 <_ZNSt14_Function_baseD1Ev>
 23fc176:	a804      	add	r0, sp, #16
 23fc178:	f7ff fe6a 	bl	23fbe50 <_ZNSt14_Function_baseD1Ev>
    }
 23fc17c:	4628      	mov	r0, r5
 23fc17e:	b014      	add	sp, #80	; 0x50
 23fc180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            sub = SystemEventSubscription(events, context.callable);
 23fc184:	9b02      	ldr	r3, [sp, #8]
 23fc186:	e9c5 7600 	strd	r7, r6, [r5]
 23fc18a:	60ab      	str	r3, [r5, #8]
 23fc18c:	e7ea      	b.n	23fc164 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xb8>
 23fc18e:	bf00      	nop
 23fc190:	023fbdb9 	.word	0x023fbdb9
 23fc194:	023fbf7f 	.word	0x023fbf7f
 23fc198:	000c0002 	.word	0x000c0002
 23fc19c:	023fbe63 	.word	0x023fbe63
 23fc1a0:	023fbd73 	.word	0x023fbd73

023fc1a4 <setup>:
}

// --------------------------------------------------------------------------
// setup()
// --------------------------------------------------------------------------
void setup() {
 23fc1a4:	b530      	push	{r4, r5, lr}

    myservo.attach(D1);                                 // attaches the servo on the D2 pin to the servo object
 23fc1a6:	23b4      	movs	r3, #180	; 0xb4
 23fc1a8:	2400      	movs	r4, #0
void setup() {
 23fc1aa:	b08b      	sub	sp, #44	; 0x2c
    myservo.attach(D1);                                 // attaches the servo on the D2 pin to the servo object
 23fc1ac:	f44f 7208 	mov.w	r2, #544	; 0x220
 23fc1b0:	2101      	movs	r1, #1
 23fc1b2:	e9cd 4300 	strd	r4, r3, [sp]
 23fc1b6:	4828      	ldr	r0, [pc, #160]	; (23fc258 <setup+0xb4>)
 23fc1b8:	f44f 6316 	mov.w	r3, #2400	; 0x960
 23fc1bc:	f001 f8de 	bl	23fd37c <_ZN5Servo6attachEtttss>
    //Wire.begin();                                       // Initialize I2C

    santa();
 23fc1c0:	f7ff fe8c 	bl	23fbedc <_Z5santav>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(const spark::NetworkClass& network = spark::Network) {
        spark_set_connection_property(SPARK_CLOUD_BIND_NETWORK_INTERFACE, static_cast<network_interface_t>(network), nullptr, nullptr);
 23fc1c4:	4925      	ldr	r1, [pc, #148]	; (23fc25c <setup+0xb8>)
 23fc1c6:	4623      	mov	r3, r4
 23fc1c8:	6849      	ldr	r1, [r1, #4]
 23fc1ca:	4622      	mov	r2, r4
 23fc1cc:	2006      	movs	r0, #6
 23fc1ce:	f000 ffb3 	bl	23fd138 <spark_set_connection_property>
        spark_cloud_flag_connect();
 23fc1d2:	f000 ffa3 	bl	23fd11c <spark_cloud_flag_connect>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23fc1d6:	4b22      	ldr	r3, [pc, #136]	; (23fc260 <setup+0xbc>)
    
    Particle.connect();


    // Register handler for the SETUP (Mode) button (single click)
    System.on(button_click, buttonHandler);
 23fc1d8:	ad06      	add	r5, sp, #24
 23fc1da:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
 23fc1dc:	4b21      	ldr	r3, [pc, #132]	; (23fc264 <setup+0xc0>)
 23fc1de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 23fc1e2:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
 23fc1e4:	4b20      	ldr	r3, [pc, #128]	; (23fc268 <setup+0xc4>)
 23fc1e6:	a802      	add	r0, sp, #8
 23fc1e8:	9308      	str	r3, [sp, #32]
 23fc1ea:	9500      	str	r5, [sp, #0]
 23fc1ec:	2300      	movs	r3, #0
 23fc1ee:	f7ff ff5d 	bl	23fc0ac <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
 23fc1f2:	4628      	mov	r0, r5
 23fc1f4:	f7ff fe2c 	bl	23fbe50 <_ZNSt14_Function_baseD1Ev>


    // Initialize LEDs
    pinMode(LED1_PIN, OUTPUT);
 23fc1f8:	2101      	movs	r1, #1
 23fc1fa:	2007      	movs	r0, #7
 23fc1fc:	f002 ff54 	bl	23ff0a8 <pinMode>
    pinMode(LED2_PIN, OUTPUT);
 23fc200:	2101      	movs	r1, #1
 23fc202:	2006      	movs	r0, #6
 23fc204:	f002 ff50 	bl	23ff0a8 <pinMode>

    // Turn LEDs off initially
    digitalWrite(LED1_PIN, LOW);
 23fc208:	4621      	mov	r1, r4
 23fc20a:	2007      	movs	r0, #7
 23fc20c:	f002 ff5d 	bl	23ff0ca <digitalWrite>
    digitalWrite(LED2_PIN, LOW);
 23fc210:	4621      	mov	r1, r4
 23fc212:	2006      	movs	r0, #6
 23fc214:	f002 ff59 	bl	23ff0ca <digitalWrite>

    // Initialize and start the PDM microphone
    int err = Microphone_PDM::instance()
 23fc218:	f000 fa2e 	bl	23fc678 <_ZN14Microphone_PDM8instanceEv>
	 * RANGE_32768 From -32768 to 32767 (16 bits) (same as raw mode)
	 *
	 * The range should be set based on the PDM microphone you are using. For the Adafruit microphone,
	 * the default value of RANGE_2048 (12-bit) is correct. 
	 */
	Microphone_PDM &withRange(Range range) { this->range = range; return *this; };
 23fc21c:	2101      	movs	r1, #1
 23fc21e:	2204      	movs	r2, #4
 23fc220:	e9c0 1204 	strd	r1, r2, [r0, #16]
	 * @param sampleRate 8000, 16000, or 32000. The default is 16000.
	 * 
	 * This call can only be used on RTL827x (P2, Photon 2). It is ignored on nRF52.
	 * Setting an invalid value will use 16000.
	 */
	Microphone_PDM &withSampleRate(int sampleRate) { this->sampleRate = sampleRate; return *this; };
 23fc224:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
        .withOutputSize(Microphone_PDM::OutputSize::SIGNED_16)
        .withRange(Microphone_PDM::Range::RANGE_2048)
        .withSampleRate(16000)
        .init();
 23fc228:	6803      	ldr	r3, [r0, #0]
 23fc22a:	60c2      	str	r2, [r0, #12]
 23fc22c:	68db      	ldr	r3, [r3, #12]
 23fc22e:	4798      	blx	r3

    if (err) {
 23fc230:	4602      	mov	r2, r0
 23fc232:	b118      	cbz	r0, 23fc23c <setup+0x98>
        Log.error("PDM decoder init err=%d", err);
 23fc234:	490d      	ldr	r1, [pc, #52]	; (23fc26c <setup+0xc8>)
 23fc236:	480e      	ldr	r0, [pc, #56]	; (23fc270 <setup+0xcc>)
 23fc238:	f7ff fe37 	bl	23fbeaa <_ZNK5spark6Logger5errorEPKcz>
    }

    err = Microphone_PDM::instance().start();
 23fc23c:	f000 fa1c 	bl	23fc678 <_ZN14Microphone_PDM8instanceEv>
 23fc240:	6803      	ldr	r3, [r0, #0]
 23fc242:	695b      	ldr	r3, [r3, #20]
 23fc244:	4798      	blx	r3
    if (err) {
 23fc246:	4602      	mov	r2, r0
 23fc248:	b118      	cbz	r0, 23fc252 <setup+0xae>
        Log.error("PDM decoder start err=%d", err);
 23fc24a:	490a      	ldr	r1, [pc, #40]	; (23fc274 <setup+0xd0>)
 23fc24c:	4808      	ldr	r0, [pc, #32]	; (23fc270 <setup+0xcc>)
 23fc24e:	f7ff fe2c 	bl	23fbeaa <_ZNK5spark6Logger5errorEPKcz>
    }
}
 23fc252:	b00b      	add	sp, #44	; 0x2c
 23fc254:	bd30      	pop	{r4, r5, pc}
 23fc256:	bf00      	nop
 23fc258:	1007ae34 	.word	0x1007ae34
 23fc25c:	1007aedc 	.word	0x1007aedc
 23fc260:	023fbd9d 	.word	0x023fbd9d
 23fc264:	023fbdf3 	.word	0x023fbdf3
 23fc268:	023fbddf 	.word	0x023fbddf
 23fc26c:	023ffa06 	.word	0x023ffa06
 23fc270:	1007ae74 	.word	0x1007ae74
 23fc274:	023ffa1e 	.word	0x023ffa1e

023fc278 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fc278:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fc27a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc27c:	4604      	mov	r4, r0
 23fc27e:	460d      	mov	r5, r1
 23fc280:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fc282:	d916      	bls.n	23fc2b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fc284:	4290      	cmp	r0, r2
 23fc286:	d215      	bcs.n	23fc2b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fc288:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fc28c:	1a75      	subs	r5, r6, r1
 23fc28e:	f1a1 0714 	sub.w	r7, r1, #20
 23fc292:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fc294:	42b7      	cmp	r7, r6
 23fc296:	d01c      	beq.n	23fc2d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fc298:	b12c      	cbz	r4, 23fc2a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fc29a:	4631      	mov	r1, r6
 23fc29c:	4620      	mov	r0, r4
 23fc29e:	f001 f914 	bl	23fd4ca <_ZN6StringC1EOS_>
 23fc2a2:	7c33      	ldrb	r3, [r6, #16]
 23fc2a4:	7423      	strb	r3, [r4, #16]
 23fc2a6:	4630      	mov	r0, r6
 23fc2a8:	f001 f8a6 	bl	23fd3f8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fc2ac:	3e14      	subs	r6, #20
 23fc2ae:	3c14      	subs	r4, #20
 23fc2b0:	e7f0      	b.n	23fc294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fc2b2:	d00e      	beq.n	23fc2d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fc2b4:	42b5      	cmp	r5, r6
 23fc2b6:	d00c      	beq.n	23fc2d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fc2b8:	b12c      	cbz	r4, 23fc2c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fc2ba:	4629      	mov	r1, r5
 23fc2bc:	4620      	mov	r0, r4
 23fc2be:	f001 f904 	bl	23fd4ca <_ZN6StringC1EOS_>
 23fc2c2:	7c2b      	ldrb	r3, [r5, #16]
 23fc2c4:	7423      	strb	r3, [r4, #16]
 23fc2c6:	4628      	mov	r0, r5
 23fc2c8:	f001 f896 	bl	23fd3f8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fc2cc:	3514      	adds	r5, #20
 23fc2ce:	3414      	adds	r4, #20
 23fc2d0:	e7f0      	b.n	23fc2b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fc2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc2d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fc2d4:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fc2da:	e9c0 3300 	strd	r3, r3, [r0]
 23fc2de:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc2e0:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc2e2:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc2e4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc2e6:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc2e8:	dd24      	ble.n	23fc334 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fc2ea:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fc2ee:	fb08 f007 	mul.w	r0, r8, r7
 23fc2f2:	f000 ff3d 	bl	23fd170 <malloc>
            if (!d) {
 23fc2f6:	4605      	mov	r5, r0
 23fc2f8:	b1e0      	cbz	r0, 23fc334 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fc2fa:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fc2fe:	fb08 1202 	mla	r2, r8, r2, r1
 23fc302:	f7ff ffb9 	bl	23fc278 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fc306:	6820      	ldr	r0, [r4, #0]
 23fc308:	f000 ff40 	bl	23fd18c <free>
        data_ = d;
 23fc30c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fc30e:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fc310:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fc314:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fc318:	45b8      	cmp	r8, r7
 23fc31a:	d009      	beq.n	23fc330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fc31c:	4639      	mov	r1, r7
 23fc31e:	4628      	mov	r0, r5
 23fc320:	f001 f8ed 	bl	23fd4fe <_ZN6StringC1ERKS_>
 23fc324:	7c3b      	ldrb	r3, [r7, #16]
 23fc326:	3514      	adds	r5, #20
 23fc328:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fc32c:	3714      	adds	r7, #20
 23fc32e:	e7f3      	b.n	23fc318 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fc330:	6873      	ldr	r3, [r6, #4]
 23fc332:	6063      	str	r3, [r4, #4]
}
 23fc334:	4620      	mov	r0, r4
 23fc336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023fc33c <_GLOBAL__sub_I_SystemMode>:
 23fc33c:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
 23fc33e:	2400      	movs	r4, #0
 23fc340:	b08c      	sub	sp, #48	; 0x30
SYSTEM_THREAD(ENABLED);
 23fc342:	2100      	movs	r1, #0
 23fc344:	2001      	movs	r0, #1
 23fc346:	f000 fdfb 	bl	23fcf40 <system_thread_set_state>
 23fc34a:	4b23      	ldr	r3, [pc, #140]	; (23fc3d8 <_GLOBAL__sub_I_SystemMode+0x9c>)
    SleepResult() {}
 23fc34c:	4a23      	ldr	r2, [pc, #140]	; (23fc3dc <_GLOBAL__sub_I_SystemMode+0xa0>)
              error_(SYSTEM_ERROR_NONE) {
 23fc34e:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23fc352:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fc354:	2002      	movs	r0, #2
 23fc356:	f000 fdc9 	bl	23fceec <set_system_mode>
        capacity_(0) {
 23fc35a:	e9cd 4400 	strd	r4, r4, [sp]
 23fc35e:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fc360:	f002 fab4 	bl	23fe8cc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fc364:	4c1e      	ldr	r4, [pc, #120]	; (23fc3e0 <_GLOBAL__sub_I_SystemMode+0xa4>)
 23fc366:	4605      	mov	r5, r0
 23fc368:	4626      	mov	r6, r4
 23fc36a:	4669      	mov	r1, sp
 23fc36c:	a803      	add	r0, sp, #12
 23fc36e:	f7ff ffb1 	bl	23fc2d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fc372:	a903      	add	r1, sp, #12
 23fc374:	a806      	add	r0, sp, #24
 23fc376:	f7ff ffad 	bl	23fc2d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fc37a:	4b1a      	ldr	r3, [pc, #104]	; (23fc3e4 <_GLOBAL__sub_I_SystemMode+0xa8>)
 23fc37c:	a906      	add	r1, sp, #24
 23fc37e:	f846 3b04 	str.w	r3, [r6], #4
 23fc382:	a809      	add	r0, sp, #36	; 0x24
 23fc384:	f7ff ffa6 	bl	23fc2d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fc388:	aa09      	add	r2, sp, #36	; 0x24
 23fc38a:	211e      	movs	r1, #30
 23fc38c:	4630      	mov	r0, r6
 23fc38e:	f001 fde3 	bl	23fdf58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fc392:	a809      	add	r0, sp, #36	; 0x24
 23fc394:	f7ff fe17 	bl	23fbfc6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fc398:	a806      	add	r0, sp, #24
 23fc39a:	f7ff fe14 	bl	23fbfc6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc39e:	4b12      	ldr	r3, [pc, #72]	; (23fc3e8 <_GLOBAL__sub_I_SystemMode+0xac>)
 23fc3a0:	6225      	str	r5, [r4, #32]
 23fc3a2:	6023      	str	r3, [r4, #0]
 23fc3a4:	a803      	add	r0, sp, #12
 23fc3a6:	f7ff fe0e 	bl	23fbfc6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc3aa:	4b10      	ldr	r3, [pc, #64]	; (23fc3ec <_GLOBAL__sub_I_SystemMode+0xb0>)
 23fc3ac:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fc3ae:	f002 fa8d 	bl	23fe8cc <_Z16_fetch_usbserialv>
 23fc3b2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fc3b6:	f002 fa79 	bl	23fe8ac <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fc3ba:	f001 fab1 	bl	23fd920 <_ZN5spark10LogManager8instanceEv>
 23fc3be:	4621      	mov	r1, r4
 23fc3c0:	f001 fca2 	bl	23fdd08 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
 23fc3c4:	4668      	mov	r0, sp
 23fc3c6:	f7ff fdfe 	bl	23fbfc6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo myservo;                                      // create servo object to control a servo
 23fc3ca:	4809      	ldr	r0, [pc, #36]	; (23fc3f0 <_GLOBAL__sub_I_SystemMode+0xb4>)
}
 23fc3cc:	b00c      	add	sp, #48	; 0x30
 23fc3ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
Servo myservo;                                      // create servo object to control a servo
 23fc3d2:	f000 bfbf 	b.w	23fd354 <_ZN5ServoC1Ev>
 23fc3d6:	bf00      	nop
 23fc3d8:	1007ae00 	.word	0x1007ae00
 23fc3dc:	ffff0000 	.word	0xffff0000
 23fc3e0:	1007ae10 	.word	0x1007ae10
 23fc3e4:	023ffa40 	.word	0x023ffa40
 23fc3e8:	023ffc58 	.word	0x023ffc58
 23fc3ec:	023ffa58 	.word	0x023ffa58
 23fc3f0:	1007ae34 	.word	0x1007ae34

023fc3f4 <_ZNK19Microphone_PDM_Base16copySrcIncrementEv>:
	virtual size_t copySrcIncrement() const { return 1; };
 23fc3f4:	2001      	movs	r0, #1
 23fc3f6:	4770      	bx	lr

023fc3f8 <_ZN22Microphone_PDM_RTL872x6uninitEv>:
	 * You normally will just initialize it once and only start and stop it as necessary, however
	 * you can completely uninitialize it if desired. The clkPin will be reset to INPUT mode.
	 */
	virtual int uninit() {
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
 23fc3f8:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fc3fc:	4770      	bx	lr

023fc3fe <_ZN22Microphone_PDM_RTL872xD1Ev>:

}

Microphone_PDM_RTL872x::~Microphone_PDM_RTL872x() {

}
 23fc3fe:	4770      	bx	lr

023fc400 <_ZN22Microphone_PDM_RTL872x4stopEv>:
    running = true;
    return 0;
}

int Microphone_PDM_RTL872x::stop() {
    running = false;
 23fc400:	2300      	movs	r3, #0
 23fc402:	7703      	strb	r3, [r0, #28]
    return 0;
}
 23fc404:	4618      	mov	r0, r3
 23fc406:	4770      	bx	lr

023fc408 <_ZN22Microphone_PDM_RTL872xD0Ev>:
Microphone_PDM_RTL872x::~Microphone_PDM_RTL872x() {
 23fc408:	b510      	push	{r4, lr}
 23fc40a:	4604      	mov	r4, r0
}
 23fc40c:	2120      	movs	r1, #32
 23fc40e:	f7ff f8f8 	bl	23fb602 <_ZdlPvj>
 23fc412:	4620      	mov	r0, r4
 23fc414:	bd10      	pop	{r4, pc}

023fc416 <_ZN22Microphone_PDM_RTL872x4initEv>:
int Microphone_PDM_RTL872x::init() {
 23fc416:	b508      	push	{r3, lr}
    switch(sampleRate) {
 23fc418:	68c3      	ldr	r3, [r0, #12]
 23fc41a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 23fc41e:	d008      	beq.n	23fc432 <_ZN22Microphone_PDM_RTL872x4initEv+0x1c>
 23fc420:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 23fc424:	d005      	beq.n	23fc432 <_ZN22Microphone_PDM_RTL872x4initEv+0x1c>
 23fc426:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
            sampleRate = 16000;
 23fc42a:	bf1c      	itt	ne
 23fc42c:	f44f 537a 	movne.w	r3, #16000	; 0x3e80
 23fc430:	60c3      	strne	r3, [r0, #12]
    dmic_setup(sampleRate, stereoMode);
 23fc432:	7a01      	ldrb	r1, [r0, #8]
 23fc434:	68c0      	ldr	r0, [r0, #12]
 23fc436:	f7ff f9ad 	bl	23fb794 <dmic_setup>
}
 23fc43a:	2000      	movs	r0, #0
 23fc43c:	bd08      	pop	{r3, pc}

023fc43e <_ZN22Microphone_PDM_RTL872x5startEv>:
int Microphone_PDM_RTL872x::start() {
 23fc43e:	b510      	push	{r4, lr}
 23fc440:	4604      	mov	r4, r0
    dmic_flush();
 23fc442:	f7ff fa41 	bl	23fb8c8 <dmic_flush>
    running = true;
 23fc446:	2301      	movs	r3, #1
}
 23fc448:	2000      	movs	r0, #0
    running = true;
 23fc44a:	7723      	strb	r3, [r4, #28]
}
 23fc44c:	bd10      	pop	{r4, pc}

023fc44e <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv>:
 


bool Microphone_PDM_RTL872x::samplesAvailable() const {
 23fc44e:	b508      	push	{r3, lr}
    if (!running) {
 23fc450:	7f00      	ldrb	r0, [r0, #28]
 23fc452:	b120      	cbz	r0, 23fc45e <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv+0x10>
        return false;
    }

	return (dmic_ready() != NULL);
 23fc454:	f7ff fa42 	bl	23fb8dc <dmic_ready>
 23fc458:	3800      	subs	r0, #0
 23fc45a:	bf18      	it	ne
 23fc45c:	2001      	movne	r0, #1
}
 23fc45e:	bd08      	pop	{r3, pc}

023fc460 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv>:

bool Microphone_PDM_RTL872x::copySamples(void*pSamples) {
 23fc460:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!running) {
 23fc462:	7f05      	ldrb	r5, [r0, #28]
bool Microphone_PDM_RTL872x::copySamples(void*pSamples) {
 23fc464:	4604      	mov	r4, r0
    if (!running) {
 23fc466:	b91d      	cbnz	r5, 23fc470 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0x10>
        return false;
 23fc468:	2500      	movs	r5, #0
		return true;
	}
	else {
		return false;
	}
}
 23fc46a:	4628      	mov	r0, r5
 23fc46c:	b003      	add	sp, #12
 23fc46e:	bd30      	pop	{r4, r5, pc}
 23fc470:	9101      	str	r1, [sp, #4]
    int16_t *src = (int16_t *)dmic_ready();
 23fc472:	f7ff fa33 	bl	23fb8dc <dmic_ready>
	if (src) {
 23fc476:	4601      	mov	r1, r0
 23fc478:	2800      	cmp	r0, #0
 23fc47a:	d0f5      	beq.n	23fc468 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0x8>
		copySamplesInternal(src, (uint8_t *)pSamples);
 23fc47c:	4620      	mov	r0, r4
 23fc47e:	9a01      	ldr	r2, [sp, #4]
 23fc480:	f000 f96e 	bl	23fc760 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
        dmic_read(NULL, 0);
 23fc484:	2100      	movs	r1, #0
 23fc486:	4608      	mov	r0, r1
 23fc488:	f7ff fa2a 	bl	23fb8e0 <dmic_read>
		return true;
 23fc48c:	e7ed      	b.n	23fc46a <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0xa>

023fc48e <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE>:

bool Microphone_PDM_RTL872x::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23fc48e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (!running) {
 23fc490:	7f07      	ldrb	r7, [r0, #28]
bool Microphone_PDM_RTL872x::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23fc492:	4606      	mov	r6, r0
 23fc494:	460d      	mov	r5, r1
    if (!running) {
 23fc496:	b91f      	cbnz	r7, 23fc4a0 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0x12>
        return false;
 23fc498:	2700      	movs	r7, #0
		return true;
	}
	else {
		return false;
	}
}
 23fc49a:	4638      	mov	r0, r7
 23fc49c:	b003      	add	sp, #12
 23fc49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t *src = (int16_t *)dmic_ready();
 23fc4a0:	f7ff fa1c 	bl	23fb8dc <dmic_ready>
	if (src) {
 23fc4a4:	4604      	mov	r4, r0
 23fc4a6:	2800      	cmp	r0, #0
 23fc4a8:	d0f6      	beq.n	23fc498 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0xa>
		copySamplesInternal(src, (uint8_t *)src);
 23fc4aa:	4602      	mov	r2, r0
 23fc4ac:	4601      	mov	r1, r0
 23fc4ae:	4630      	mov	r0, r6
 23fc4b0:	f000 f956 	bl	23fc760 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
		callback(src, BUFFER_SIZE_SAMPLES);
 23fc4b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 23fc4b8:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 23fc4ba:	68ab      	ldr	r3, [r5, #8]
 23fc4bc:	9400      	str	r4, [sp, #0]
 23fc4be:	b90b      	cbnz	r3, 23fc4c4 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0x36>
	__throw_bad_function_call();
 23fc4c0:	f003 f8be 	bl	23ff640 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fc4c4:	4669      	mov	r1, sp
 23fc4c6:	4628      	mov	r0, r5
 23fc4c8:	68eb      	ldr	r3, [r5, #12]
 23fc4ca:	aa01      	add	r2, sp, #4
 23fc4cc:	4798      	blx	r3
        dmic_read(NULL, 0);
 23fc4ce:	2100      	movs	r1, #0
 23fc4d0:	4608      	mov	r0, r1
 23fc4d2:	f7ff fa05 	bl	23fb8e0 <dmic_read>
		return true;
 23fc4d6:	e7e0      	b.n	23fc49a <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0xc>

023fc4d8 <_ZN22Microphone_PDM_RTL872xC1Ev>:
	Microphone_PDM_Base(size_t numSamples) : numSamples(numSamples) {};
 23fc4d8:	f04f 0c01 	mov.w	ip, #1
 23fc4dc:	2104      	movs	r1, #4
 23fc4de:	4a06      	ldr	r2, [pc, #24]	; (23fc4f8 <_ZN22Microphone_PDM_RTL872xC1Ev+0x20>)
 23fc4e0:	e9c0 c104 	strd	ip, r1, [r0, #16]
 23fc4e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 23fc4e8:	6042      	str	r2, [r0, #4]
 23fc4ea:	2200      	movs	r2, #0
 23fc4ec:	6181      	str	r1, [r0, #24]
Microphone_PDM_RTL872x::Microphone_PDM_RTL872x() : Microphone_PDM_Base(BUFFER_SIZE_SAMPLES) {
 23fc4ee:	4903      	ldr	r1, [pc, #12]	; (23fc4fc <_ZN22Microphone_PDM_RTL872xC1Ev+0x24>)
 23fc4f0:	7202      	strb	r2, [r0, #8]
 23fc4f2:	6001      	str	r1, [r0, #0]
 23fc4f4:	7702      	strb	r2, [r0, #28]
}
 23fc4f6:	4770      	bx	lr
 23fc4f8:	000c000b 	.word	0x000c000b
 23fc4fc:	023ffa70 	.word	0x023ffa70

023fc500 <_ZN29Microphone_PDM_BufferSampling13preCompletionEv>:
	virtual void preCompletion() {};
 23fc500:	4770      	bx	lr

023fc502 <_ZN14Microphone_PDM6uninitEv>:
	 * Releases the resources used by the PDM module, though the 2K RAM buffer is statically 
	 * allocated on the heap and is not freed.
	 */
	int uninit() {
		return Microphone_PDM_MCU::uninit();
	}
 23fc502:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fc506:	4770      	bx	lr

023fc508 <_ZNK29Microphone_PDM_BufferSampling4doneEv>:
		});

	}
}
bool Microphone_PDM_BufferSampling::done() const {
	return buffer && offset >= bufferSize;
 23fc508:	6843      	ldr	r3, [r0, #4]
 23fc50a:	b133      	cbz	r3, 23fc51a <_ZNK29Microphone_PDM_BufferSampling4doneEv+0x12>
 23fc50c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
 23fc510:	4283      	cmp	r3, r0
 23fc512:	bf34      	ite	cc
 23fc514:	2000      	movcc	r0, #0
 23fc516:	2001      	movcs	r0, #1
 23fc518:	4770      	bx	lr
 23fc51a:	4618      	mov	r0, r3
}
 23fc51c:	4770      	bx	lr

023fc51e <_ZN14Microphone_PDM4initEv>:
		return Microphone_PDM_MCU::init();
 23fc51e:	f7ff bf7a 	b.w	23fc416 <_ZN22Microphone_PDM_RTL872x4initEv>

023fc522 <_ZN14Microphone_PDM5startEv>:

	/**
	 * @brief Start sampling
	 */
	int start() {
		return Microphone_PDM_MCU::start();
 23fc522:	f7ff bf8c 	b.w	23fc43e <_ZN22Microphone_PDM_RTL872x5startEv>

023fc526 <_ZN14Microphone_PDM4stopEv>:
	 * On the RTL872x (P2, Photon 2), it's not actually possible to stop sampling once you
	 * start it. Calling stop() will discard the data and samplesAvailable(), copySamples(),
	 * etc. will behave as if the DMA had been stopped.
	 */
	int stop() {
		return Microphone_PDM_MCU::stop();
 23fc526:	f7ff bf6b 	b.w	23fc400 <_ZN22Microphone_PDM_RTL872x4stopEv>

023fc52a <_ZNK14Microphone_PDM16samplesAvailableEv>:
	 * 
	 * @return true 
	 * @return false 
	 */
	bool samplesAvailable() const {
		return Microphone_PDM_MCU::samplesAvailable();
 23fc52a:	f7ff bf90 	b.w	23fc44e <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv>

023fc52e <_ZN14Microphone_PDM11copySamplesEPv>:
	 * 
	 * You can skip calling samplesAvailable() and just call copySamples which will return false in the same cases
	 * where samplesAvailable() would have returned false.
	 */
	bool copySamples(void*pSamples) {
		return Microphone_PDM_MCU::copySamples(pSamples);
 23fc52e:	f7ff bf97 	b.w	23fc460 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv>
	...

023fc534 <_ZN18Microphone_PDM_MCUD1Ev>:
 * @brief Microphone_PDM_MCU is an alias for the MCU-specific class like Microphone_PDM_RTL872x
 * 
 * This class exists so the subclass Microphone_PDM can just reference Microphone_PDM_MCU
 * as its superclass regardless of which class is actually used.
 */
class Microphone_PDM_MCU : public Microphone_PDM_RTL872x {
 23fc534:	b510      	push	{r4, lr}
 23fc536:	4604      	mov	r4, r0
 23fc538:	4b02      	ldr	r3, [pc, #8]	; (23fc544 <_ZN18Microphone_PDM_MCUD1Ev+0x10>)
 23fc53a:	6003      	str	r3, [r0, #0]
 23fc53c:	f7ff ff5f 	bl	23fc3fe <_ZN22Microphone_PDM_RTL872xD1Ev>
 23fc540:	4620      	mov	r0, r4
 23fc542:	bd10      	pop	{r4, pc}
 23fc544:	023ffaa0 	.word	0x023ffaa0

023fc548 <_ZN18Microphone_PDM_MCUD0Ev>:
 23fc548:	b510      	push	{r4, lr}
 23fc54a:	4604      	mov	r4, r0
 23fc54c:	f7ff fff2 	bl	23fc534 <_ZN18Microphone_PDM_MCUD1Ev>
 23fc550:	4620      	mov	r0, r4
 23fc552:	2120      	movs	r1, #32
 23fc554:	f7ff f855 	bl	23fb602 <_ZdlPvj>
 23fc558:	4620      	mov	r0, r4
 23fc55a:	bd10      	pop	{r4, pc}

023fc55c <_ZN14Microphone_PDMD1Ev>:
Microphone_PDM::~Microphone_PDM() {
 23fc55c:	b510      	push	{r4, lr}
 23fc55e:	4604      	mov	r4, r0
 23fc560:	4b02      	ldr	r3, [pc, #8]	; (23fc56c <_ZN14Microphone_PDMD1Ev+0x10>)
 23fc562:	6003      	str	r3, [r0, #0]
 23fc564:	f7ff ffe6 	bl	23fc534 <_ZN18Microphone_PDM_MCUD1Ev>
}
 23fc568:	4620      	mov	r0, r4
 23fc56a:	bd10      	pop	{r4, pc}
 23fc56c:	023ffad0 	.word	0x023ffad0

023fc570 <_ZN14Microphone_PDMD0Ev>:
Microphone_PDM::~Microphone_PDM() {
 23fc570:	b510      	push	{r4, lr}
 23fc572:	4604      	mov	r4, r0
}
 23fc574:	f7ff fff2 	bl	23fc55c <_ZN14Microphone_PDMD1Ev>
 23fc578:	4620      	mov	r0, r4
 23fc57a:	2124      	movs	r1, #36	; 0x24
 23fc57c:	f7ff f841 	bl	23fb602 <_ZdlPvj>
 23fc580:	4620      	mov	r0, r4
 23fc582:	bd10      	pop	{r4, pc}

023fc584 <_ZNSt17_Function_handlerIFvPvjEZN29Microphone_PDM_BufferSampling4loopEvEUlS0_jE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
 23fc584:	2a01      	cmp	r2, #1
 23fc586:	d102      	bne.n	23fc58e <_ZNSt17_Function_handlerIFvPvjEZN29Microphone_PDM_BufferSampling4loopEvEUlS0_jE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fc588:	6001      	str	r1, [r0, #0]
      }
 23fc58a:	2000      	movs	r0, #0
 23fc58c:	4770      	bx	lr
	  switch (__op)
 23fc58e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23fc590:	bf04      	itt	eq
 23fc592:	680b      	ldreq	r3, [r1, #0]
 23fc594:	6003      	streq	r3, [r0, #0]
	      break;
 23fc596:	e7f8      	b.n	23fc58a <_ZNSt17_Function_handlerIFvPvjEZN29Microphone_PDM_BufferSampling4loopEvEUlS0_jE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

023fc598 <_ZNSt17_Function_handlerIFvPvjEZN29Microphone_PDM_BufferSampling4loopEvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fc598:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fc59a:	4604      	mov	r4, r0
		Microphone_PDM::instance().noCopySamples([this](void *pSamples, size_t numSamples) {
 23fc59c:	6803      	ldr	r3, [r0, #0]
			size_t bytesToCopy = sampleSizeInBytes * numSamples;
 23fc59e:	6815      	ldr	r5, [r2, #0]
 23fc5a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 23fc5a2:	6809      	ldr	r1, [r1, #0]
 23fc5a4:	4355      	muls	r5, r2
			if ((offset + bytesToCopy) > bufferSize) {
 23fc5a6:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
 23fc5aa:	182e      	adds	r6, r5, r0
 23fc5ac:	4296      	cmp	r6, r2
			memcpy(&buffer[offset], pSamples, bytesToCopy);
 23fc5ae:	685b      	ldr	r3, [r3, #4]
				bytesToCopy = bufferSize - offset;
 23fc5b0:	bf88      	it	hi
 23fc5b2:	1a15      	subhi	r5, r2, r0
			memcpy(&buffer[offset], pSamples, bytesToCopy);
 23fc5b4:	462a      	mov	r2, r5
 23fc5b6:	4418      	add	r0, r3
 23fc5b8:	f003 f854 	bl	23ff664 <memcpy>
		Microphone_PDM::instance().noCopySamples([this](void *pSamples, size_t numSamples) {
 23fc5bc:	6822      	ldr	r2, [r4, #0]
			offset += bytesToCopy;
 23fc5be:	6893      	ldr	r3, [r2, #8]
 23fc5c0:	442b      	add	r3, r5
 23fc5c2:	6093      	str	r3, [r2, #8]
		Microphone_PDM::instance().noCopySamples([this](void *pSamples, size_t numSamples) {
 23fc5c4:	6820      	ldr	r0, [r4, #0]
			if (offset >= bufferSize && completionCallback) {
 23fc5c6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 23fc5ca:	429a      	cmp	r2, r3
 23fc5cc:	d312      	bcc.n	23fc5f4 <_ZNSt17_Function_handlerIFvPvjEZN29Microphone_PDM_BufferSampling4loopEvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x5c>
 23fc5ce:	69c3      	ldr	r3, [r0, #28]
 23fc5d0:	b183      	cbz	r3, 23fc5f4 <_ZNSt17_Function_handlerIFvPvjEZN29Microphone_PDM_BufferSampling4loopEvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x5c>
				preCompletion();
 23fc5d2:	6803      	ldr	r3, [r0, #0]
 23fc5d4:	695b      	ldr	r3, [r3, #20]
 23fc5d6:	4798      	blx	r3
		Microphone_PDM::instance().noCopySamples([this](void *pSamples, size_t numSamples) {
 23fc5d8:	6820      	ldr	r0, [r4, #0]
				completionCallback(buffer, bufferSize);
 23fc5da:	68c3      	ldr	r3, [r0, #12]
 23fc5dc:	6842      	ldr	r2, [r0, #4]
 23fc5de:	e9cd 2300 	strd	r2, r3, [sp]
      if (_M_empty())
 23fc5e2:	69c3      	ldr	r3, [r0, #28]
 23fc5e4:	b90b      	cbnz	r3, 23fc5ea <_ZNSt17_Function_handlerIFvPvjEZN29Microphone_PDM_BufferSampling4loopEvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x52>
	__throw_bad_function_call();
 23fc5e6:	f003 f82b 	bl	23ff640 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fc5ea:	6a03      	ldr	r3, [r0, #32]
 23fc5ec:	4669      	mov	r1, sp
 23fc5ee:	aa01      	add	r2, sp, #4
 23fc5f0:	3014      	adds	r0, #20
 23fc5f2:	4798      	blx	r3
      }
 23fc5f4:	b002      	add	sp, #8
 23fc5f6:	bd70      	pop	{r4, r5, r6, pc}

023fc5f8 <_ZN29Microphone_PDM_BufferSamplingD1Ev>:
Microphone_PDM_BufferSampling::~Microphone_PDM_BufferSampling() {
 23fc5f8:	b510      	push	{r4, lr}
 23fc5fa:	4b06      	ldr	r3, [pc, #24]	; (23fc614 <_ZN29Microphone_PDM_BufferSamplingD1Ev+0x1c>)
 23fc5fc:	4604      	mov	r4, r0
 23fc5fe:	6003      	str	r3, [r0, #0]
	if (buffer) {
 23fc600:	6840      	ldr	r0, [r0, #4]
 23fc602:	b108      	cbz	r0, 23fc608 <_ZN29Microphone_PDM_BufferSamplingD1Ev+0x10>
		delete[] buffer;		
 23fc604:	f7fe fffb 	bl	23fb5fe <_ZdaPv>
    class function<_Res(_ArgTypes...)>
 23fc608:	f104 0014 	add.w	r0, r4, #20
 23fc60c:	f7ff fc20 	bl	23fbe50 <_ZNSt14_Function_baseD1Ev>
}
 23fc610:	4620      	mov	r0, r4
 23fc612:	bd10      	pop	{r4, pc}
 23fc614:	023ffb00 	.word	0x023ffb00

023fc618 <_ZN29Microphone_PDM_BufferSamplingD0Ev>:
Microphone_PDM_BufferSampling::~Microphone_PDM_BufferSampling() {
 23fc618:	b510      	push	{r4, lr}
 23fc61a:	4604      	mov	r4, r0
}
 23fc61c:	f7ff ffec 	bl	23fc5f8 <_ZN29Microphone_PDM_BufferSamplingD1Ev>
 23fc620:	4620      	mov	r0, r4
 23fc622:	212c      	movs	r1, #44	; 0x2c
 23fc624:	f7fe ffed 	bl	23fb602 <_ZdlPvj>
 23fc628:	4620      	mov	r0, r4
 23fc62a:	bd10      	pop	{r4, pc}

023fc62c <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE>:
    _Function_base() : _M_manager(nullptr) { }
 23fc62c:	2300      	movs	r3, #0
	 * of data. The number of bytes will vary depending on the outputSize. 
	 * 
	 * You can skip calling samplesAvailable() and just call noCopySamples which will return false in the same cases
	 * where samplesAvailable() would have returned false.
	 */
	bool noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23fc62e:	b530      	push	{r4, r5, lr}
 23fc630:	b085      	sub	sp, #20
 23fc632:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
 23fc634:	688b      	ldr	r3, [r1, #8]
 23fc636:	4605      	mov	r5, r0
 23fc638:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
 23fc63a:	b133      	cbz	r3, 23fc64a <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fc63c:	2202      	movs	r2, #2
 23fc63e:	4668      	mov	r0, sp
 23fc640:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fc642:	68e3      	ldr	r3, [r4, #12]
 23fc644:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 23fc646:	68a3      	ldr	r3, [r4, #8]
 23fc648:	9302      	str	r3, [sp, #8]
		return Microphone_PDM_MCU::noCopySamples(callback);
 23fc64a:	4669      	mov	r1, sp
 23fc64c:	4628      	mov	r0, r5
 23fc64e:	f7ff ff1e 	bl	23fc48e <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE>
 23fc652:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23fc654:	4668      	mov	r0, sp
 23fc656:	f7ff fbfb 	bl	23fbe50 <_ZNSt14_Function_baseD1Ev>
	}
 23fc65a:	4620      	mov	r0, r4
 23fc65c:	b005      	add	sp, #20
 23fc65e:	bd30      	pop	{r4, r5, pc}

023fc660 <_ZN14Microphone_PDMC1Ev>:
Microphone_PDM::Microphone_PDM() {
 23fc660:	b510      	push	{r4, lr}
 23fc662:	4604      	mov	r4, r0
 23fc664:	f7ff ff38 	bl	23fc4d8 <_ZN22Microphone_PDM_RTL872xC1Ev>
 23fc668:	4b02      	ldr	r3, [pc, #8]	; (23fc674 <_ZN14Microphone_PDMC1Ev+0x14>)
}
 23fc66a:	4620      	mov	r0, r4
Microphone_PDM::Microphone_PDM() {
 23fc66c:	6023      	str	r3, [r4, #0]
 23fc66e:	2300      	movs	r3, #0
 23fc670:	6223      	str	r3, [r4, #32]
}
 23fc672:	bd10      	pop	{r4, pc}
 23fc674:	023ffad0 	.word	0x023ffad0

023fc678 <_ZN14Microphone_PDM8instanceEv>:
Microphone_PDM &Microphone_PDM::instance() {
 23fc678:	b538      	push	{r3, r4, r5, lr}
	if (!_instance) {
 23fc67a:	4d06      	ldr	r5, [pc, #24]	; (23fc694 <_ZN14Microphone_PDM8instanceEv+0x1c>)
 23fc67c:	682b      	ldr	r3, [r5, #0]
 23fc67e:	b93b      	cbnz	r3, 23fc690 <_ZN14Microphone_PDM8instanceEv+0x18>
		_instance = new Microphone_PDM();
 23fc680:	2024      	movs	r0, #36	; 0x24
 23fc682:	f7fe ffb8 	bl	23fb5f6 <_Znwj>
 23fc686:	4604      	mov	r4, r0
 23fc688:	b108      	cbz	r0, 23fc68e <_ZN14Microphone_PDM8instanceEv+0x16>
 23fc68a:	f7ff ffe9 	bl	23fc660 <_ZN14Microphone_PDMC1Ev>
 23fc68e:	602c      	str	r4, [r5, #0]
}
 23fc690:	6828      	ldr	r0, [r5, #0]
 23fc692:	bd38      	pop	{r3, r4, r5, pc}
 23fc694:	1007ae48 	.word	0x1007ae48

023fc698 <_ZN29Microphone_PDM_BufferSampling4loopEv>:
void Microphone_PDM_BufferSampling::loop() {
 23fc698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (buffer && offset < bufferSize && Microphone_PDM::instance().samplesAvailable()) {
 23fc69a:	6843      	ldr	r3, [r0, #4]
void Microphone_PDM_BufferSampling::loop() {
 23fc69c:	4604      	mov	r4, r0
	if (buffer && offset < bufferSize && Microphone_PDM::instance().samplesAvailable()) {
 23fc69e:	b1bb      	cbz	r3, 23fc6d0 <_ZN29Microphone_PDM_BufferSampling4loopEv+0x38>
 23fc6a0:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 23fc6a4:	429a      	cmp	r2, r3
 23fc6a6:	d213      	bcs.n	23fc6d0 <_ZN29Microphone_PDM_BufferSampling4loopEv+0x38>
 23fc6a8:	f7ff ffe6 	bl	23fc678 <_ZN14Microphone_PDM8instanceEv>
 23fc6ac:	6803      	ldr	r3, [r0, #0]
 23fc6ae:	69db      	ldr	r3, [r3, #28]
 23fc6b0:	4798      	blx	r3
 23fc6b2:	b168      	cbz	r0, 23fc6d0 <_ZN29Microphone_PDM_BufferSampling4loopEv+0x38>
		Microphone_PDM::instance().noCopySamples([this](void *pSamples, size_t numSamples) {
 23fc6b4:	f7ff ffe0 	bl	23fc678 <_ZN14Microphone_PDM8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
 23fc6b8:	4a06      	ldr	r2, [pc, #24]	; (23fc6d4 <_ZN29Microphone_PDM_BufferSampling4loopEv+0x3c>)
		});
 23fc6ba:	6803      	ldr	r3, [r0, #0]
 23fc6bc:	9203      	str	r2, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fc6be:	4a06      	ldr	r2, [pc, #24]	; (23fc6d8 <_ZN29Microphone_PDM_BufferSampling4loopEv+0x40>)
		Microphone_PDM::instance().noCopySamples([this](void *pSamples, size_t numSamples) {
 23fc6c0:	4669      	mov	r1, sp
		});
 23fc6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23fc6c4:	9400      	str	r4, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
 23fc6c6:	9202      	str	r2, [sp, #8]
		Microphone_PDM::instance().noCopySamples([this](void *pSamples, size_t numSamples) {
 23fc6c8:	4798      	blx	r3
    class function<_Res(_ArgTypes...)>
 23fc6ca:	4668      	mov	r0, sp
 23fc6cc:	f7ff fbc0 	bl	23fbe50 <_ZNSt14_Function_baseD1Ev>
}
 23fc6d0:	b004      	add	sp, #16
 23fc6d2:	bd10      	pop	{r4, pc}
 23fc6d4:	023fc599 	.word	0x023fc599
 23fc6d8:	023fc585 	.word	0x023fc585

023fc6dc <_ZN29Microphone_PDM_BufferSampling5startEv>:
bool Microphone_PDM_BufferSampling::start() {
 23fc6dc:	b538      	push	{r3, r4, r5, lr}
 23fc6de:	4604      	mov	r4, r0
	sampleSizeInBytes = Microphone_PDM::instance().getSampleSizeInBytes();
 23fc6e0:	f7ff ffca 	bl	23fc678 <_ZN14Microphone_PDM8instanceEv>
	switch(outputSize) {
 23fc6e4:	6903      	ldr	r3, [r0, #16]
	offset = reserveHeaderSize;
 23fc6e6:	6a65      	ldr	r5, [r4, #36]	; 0x24
			return 2;
 23fc6e8:	2b00      	cmp	r3, #0
 23fc6ea:	bf0c      	ite	eq
 23fc6ec:	2301      	moveq	r3, #1
 23fc6ee:	2302      	movne	r3, #2
	offset = reserveHeaderSize;
 23fc6f0:	60a5      	str	r5, [r4, #8]
	sampleSizeInBytes = Microphone_PDM::instance().getSampleSizeInBytes();
 23fc6f2:	62a3      	str	r3, [r4, #40]	; 0x28
	bufferSize = reserveHeaderSize + (Microphone_PDM::instance().getSampleRate() / 1000 * durationMs) * sampleSizeInBytes;
 23fc6f4:	f7ff ffc0 	bl	23fc678 <_ZN14Microphone_PDM8instanceEv>
 23fc6f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 23fc6fa:	6923      	ldr	r3, [r4, #16]
 23fc6fc:	68c0      	ldr	r0, [r0, #12]
 23fc6fe:	4353      	muls	r3, r2
 23fc700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23fc704:	fb90 f0f2 	sdiv	r0, r0, r2
 23fc708:	fb00 5003 	mla	r0, r0, r3, r5
 23fc70c:	60e0      	str	r0, [r4, #12]
	buffer = new uint8_t[bufferSize];
 23fc70e:	f7fe ff74 	bl	23fb5fa <_Znaj>
 23fc712:	6060      	str	r0, [r4, #4]
}
 23fc714:	3800      	subs	r0, #0
 23fc716:	bf18      	it	ne
 23fc718:	2001      	movne	r0, #1
 23fc71a:	bd38      	pop	{r3, r4, r5, pc}

023fc71c <_ZN14Microphone_PDM4loopEv>:
	if (sampling) {
 23fc71c:	6a00      	ldr	r0, [r0, #32]
 23fc71e:	b110      	cbz	r0, 23fc726 <_ZN14Microphone_PDM4loopEv+0xa>
		sampling->loop();
 23fc720:	6803      	ldr	r3, [r0, #0]
 23fc722:	68db      	ldr	r3, [r3, #12]
 23fc724:	4718      	bx	r3
}
 23fc726:	4770      	bx	lr

023fc728 <_ZN14Microphone_PDM21releaseBufferSamplingEv>:
void Microphone_PDM::releaseBufferSampling() {
 23fc728:	b510      	push	{r4, lr}
 23fc72a:	4604      	mov	r4, r0
	if (sampling) {
 23fc72c:	6a00      	ldr	r0, [r0, #32]
 23fc72e:	b110      	cbz	r0, 23fc736 <_ZN14Microphone_PDM21releaseBufferSamplingEv+0xe>
		delete sampling;
 23fc730:	6803      	ldr	r3, [r0, #0]
 23fc732:	685b      	ldr	r3, [r3, #4]
 23fc734:	4798      	blx	r3
	sampling = NULL;
 23fc736:	2300      	movs	r3, #0
 23fc738:	6223      	str	r3, [r4, #32]
}
 23fc73a:	bd10      	pop	{r4, pc}

023fc73c <_ZN14Microphone_PDM19bufferSamplingStartEP29Microphone_PDM_BufferSampling>:
bool Microphone_PDM::bufferSamplingStart(Microphone_PDM_BufferSampling *sampling) {
 23fc73c:	b570      	push	{r4, r5, r6, lr}
 23fc73e:	460c      	mov	r4, r1
 23fc740:	4605      	mov	r5, r0
	releaseBufferSampling();
 23fc742:	f7ff fff1 	bl	23fc728 <_ZN14Microphone_PDM21releaseBufferSamplingEv>
	this->sampling = sampling;
 23fc746:	622c      	str	r4, [r5, #32]
	return sampling->start();
 23fc748:	6823      	ldr	r3, [r4, #0]
 23fc74a:	4620      	mov	r0, r4
}
 23fc74c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return sampling->start();
 23fc750:	689b      	ldr	r3, [r3, #8]
 23fc752:	4718      	bx	r3

023fc754 <_ZNK14Microphone_PDM20getSampleSizeInBytesEv>:
	switch(outputSize) {
 23fc754:	6903      	ldr	r3, [r0, #16]
			return 2;
 23fc756:	2b00      	cmp	r3, #0
}
 23fc758:	bf0c      	ite	eq
 23fc75a:	2001      	moveq	r0, #1
 23fc75c:	2002      	movne	r0, #2
 23fc75e:	4770      	bx	lr

023fc760 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>:
void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
 23fc760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc762:	4607      	mov	r7, r0
	size_t increment = copySrcIncrement();
 23fc764:	6803      	ldr	r3, [r0, #0]
	const int16_t *srcEnd = &src[numSamples];
 23fc766:	6986      	ldr	r6, [r0, #24]
	size_t increment = copySrcIncrement();
 23fc768:	689b      	ldr	r3, [r3, #8]
void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
 23fc76a:	460c      	mov	r4, r1
 23fc76c:	4615      	mov	r5, r2
	const int16_t *srcEnd = &src[numSamples];
 23fc76e:	eb01 0646 	add.w	r6, r1, r6, lsl #1
	size_t increment = copySrcIncrement();
 23fc772:	4798      	blx	r3
	if (outputSize == OutputSize::UNSIGNED_8) {
 23fc774:	693b      	ldr	r3, [r7, #16]
 23fc776:	b9c3      	cbnz	r3, 23fc7aa <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x4a>
		int16_t div = (int16_t)(1 << (size_t) range);
 23fc778:	2201      	movs	r2, #1
			*((uint8_t *)dst) = (uint8_t) (val + 128);
 23fc77a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
		int16_t div = (int16_t)(1 << (size_t) range);
 23fc77e:	697b      	ldr	r3, [r7, #20]
			src += increment;
 23fc780:	0040      	lsls	r0, r0, #1
		int16_t div = (int16_t)(1 << (size_t) range);
 23fc782:	409a      	lsls	r2, r3
 23fc784:	b212      	sxth	r2, r2
		while(src < srcEnd) {
 23fc786:	42b4      	cmp	r4, r6
 23fc788:	d236      	bcs.n	23fc7f8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int16_t val = *src / div;
 23fc78a:	f9b4 3000 	ldrsh.w	r3, [r4]
			src += increment;
 23fc78e:	4404      	add	r4, r0
			int16_t val = *src / div;
 23fc790:	fb93 f3f2 	sdiv	r3, r3, r2
 23fc794:	b21b      	sxth	r3, r3
			if (val < -128) {
 23fc796:	2b7f      	cmp	r3, #127	; 0x7f
 23fc798:	bfa8      	it	ge
 23fc79a:	237f      	movge	r3, #127	; 0x7f
			*((uint8_t *)dst) = (uint8_t) (val + 128);
 23fc79c:	428b      	cmp	r3, r1
 23fc79e:	bfb8      	it	lt
 23fc7a0:	460b      	movlt	r3, r1
 23fc7a2:	3b80      	subs	r3, #128	; 0x80
 23fc7a4:	f805 3b01 	strb.w	r3, [r5], #1
		while(src < srcEnd) {
 23fc7a8:	e7ed      	b.n	23fc786 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x26>
	else if (outputSize == OutputSize::SIGNED_16) {		
 23fc7aa:	2b01      	cmp	r3, #1
 23fc7ac:	d117      	bne.n	23fc7de <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7e>
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
 23fc7ae:	697a      	ldr	r2, [r7, #20]
				val = 32868;
 23fc7b0:	f248 0764 	movw	r7, #32868	; 0x8064
			if (val < -32767) {
 23fc7b4:	4911      	ldr	r1, [pc, #68]	; (23fc7fc <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
 23fc7b6:	f1c2 0208 	rsb	r2, r2, #8
			src += increment;
 23fc7ba:	0040      	lsls	r0, r0, #1
		while(src < srcEnd) {
 23fc7bc:	42b4      	cmp	r4, r6
 23fc7be:	d21b      	bcs.n	23fc7f8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int32_t val = (int32_t)*src * mult;
 23fc7c0:	f9b4 3000 	ldrsh.w	r3, [r4]
			src += increment;
 23fc7c4:	4404      	add	r4, r0
			int32_t val = (int32_t)*src * mult;
 23fc7c6:	4093      	lsls	r3, r2
			if (val < -32767) {
 23fc7c8:	428b      	cmp	r3, r1
 23fc7ca:	db06      	blt.n	23fc7da <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7a>
				val = 32868;
 23fc7cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 23fc7d0:	bfc8      	it	gt
 23fc7d2:	463b      	movgt	r3, r7
			*((int16_t *)dst) = (int16_t) val;
 23fc7d4:	f825 3b02 	strh.w	r3, [r5], #2
		while(src < srcEnd) {
 23fc7d8:	e7f0      	b.n	23fc7bc <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x5c>
				val = -32767;
 23fc7da:	4b08      	ldr	r3, [pc, #32]	; (23fc7fc <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
 23fc7dc:	e7fa      	b.n	23fc7d4 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x74>
		if (src != (int16_t *)dst || increment != 1) {
 23fc7de:	42ac      	cmp	r4, r5
 23fc7e0:	d101      	bne.n	23fc7e6 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x86>
 23fc7e2:	2801      	cmp	r0, #1
 23fc7e4:	d008      	beq.n	23fc7f8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
				src += increment;
 23fc7e6:	0040      	lsls	r0, r0, #1
			while(src < srcEnd) {
 23fc7e8:	42b4      	cmp	r4, r6
 23fc7ea:	d205      	bcs.n	23fc7f8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
				*((int16_t *)dst) = *src;
 23fc7ec:	f9b4 3000 	ldrsh.w	r3, [r4]
				src += increment;
 23fc7f0:	4404      	add	r4, r0
				*((int16_t *)dst) = *src;
 23fc7f2:	f825 3b02 	strh.w	r3, [r5], #2
			while(src < srcEnd) {
 23fc7f6:	e7f7      	b.n	23fc7e8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x88>
}
 23fc7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc7fa:	bf00      	nop
 23fc7fc:	ffff8001 	.word	0xffff8001

023fc800 <_ZN29Microphone_PDM_BufferSamplingC1Ev>:
Microphone_PDM_BufferSampling::Microphone_PDM_BufferSampling() {
 23fc800:	4a04      	ldr	r2, [pc, #16]	; (23fc814 <_ZN29Microphone_PDM_BufferSamplingC1Ev+0x14>)
 23fc802:	6002      	str	r2, [r0, #0]
 23fc804:	2200      	movs	r2, #0
 23fc806:	e9c0 2201 	strd	r2, r2, [r0, #4]
 23fc80a:	e9c0 2203 	strd	r2, r2, [r0, #12]
    _Function_base() : _M_manager(nullptr) { }
 23fc80e:	61c2      	str	r2, [r0, #28]
 23fc810:	6242      	str	r2, [r0, #36]	; 0x24
}
 23fc812:	4770      	bx	lr
 23fc814:	023ffb00 	.word	0x023ffb00

023fc818 <_ZN16MicWavHeaderBaseD1Ev>:
MicWavHeaderBase::MicWavHeaderBase(uint8_t *buffer, size_t bufferSize) : buffer(buffer), bufferSize(bufferSize) {

}
MicWavHeaderBase::~MicWavHeaderBase() {

}
 23fc818:	4770      	bx	lr

023fc81a <_ZN16MicWavHeaderBaseD0Ev>:
MicWavHeaderBase::~MicWavHeaderBase() {
 23fc81a:	b510      	push	{r4, lr}
 23fc81c:	4604      	mov	r4, r0
}
 23fc81e:	2110      	movs	r1, #16
 23fc820:	f7fe feef 	bl	23fb602 <_ZdlPvj>
 23fc824:	4620      	mov	r0, r4
 23fc826:	bd10      	pop	{r4, pc}

023fc828 <_ZN33Microphone_PDM_BufferSampling_wavD1Ev>:
private:
	uint8_t staticBuffer[BUFFER_SIZE]; //!< static buffer to write to
};


class Microphone_PDM_BufferSampling_wav : public Microphone_PDM_BufferSampling {
 23fc828:	b510      	push	{r4, lr}
 23fc82a:	4604      	mov	r4, r0
 23fc82c:	4b02      	ldr	r3, [pc, #8]	; (23fc838 <_ZN33Microphone_PDM_BufferSampling_wavD1Ev+0x10>)
 23fc82e:	6003      	str	r3, [r0, #0]
 23fc830:	f7ff fee2 	bl	23fc5f8 <_ZN29Microphone_PDM_BufferSamplingD1Ev>
 23fc834:	4620      	mov	r0, r4
 23fc836:	bd10      	pop	{r4, pc}
 23fc838:	023ffb68 	.word	0x023ffb68

023fc83c <_ZN33Microphone_PDM_BufferSampling_wavD0Ev>:
 23fc83c:	b510      	push	{r4, lr}
 23fc83e:	4604      	mov	r4, r0
 23fc840:	f7ff fff2 	bl	23fc828 <_ZN33Microphone_PDM_BufferSampling_wavD1Ev>
 23fc844:	4620      	mov	r0, r4
 23fc846:	212c      	movs	r1, #44	; 0x2c
 23fc848:	f7fe fedb 	bl	23fb602 <_ZdlPvj>
 23fc84c:	4620      	mov	r0, r4
 23fc84e:	bd10      	pop	{r4, pc}

023fc850 <_ZN16MicWavHeaderBase21fourCharStringToValueEPKc>:
	value |= ((uint32_t)str[0]) << 24;
	value |= ((uint32_t)str[1]) << 16;
	value |= ((uint32_t)str[2]) << 8;
	value |= ((uint32_t)str[3]);

	return value;
 23fc850:	6800      	ldr	r0, [r0, #0]
}
 23fc852:	ba00      	rev	r0, r0
 23fc854:	4770      	bx	lr

023fc856 <_ZN16MicWavHeaderBase11setUint32BEEjm>:

void MicWavHeaderBase::setUint32BE(size_t offset, uint32_t value) {
	buffer[offset]     = (uint8_t) (value >> 24);
 23fc856:	6843      	ldr	r3, [r0, #4]
void MicWavHeaderBase::setUint32BE(size_t offset, uint32_t value) {
 23fc858:	b510      	push	{r4, lr}
	buffer[offset]     = (uint8_t) (value >> 24);
 23fc85a:	0e14      	lsrs	r4, r2, #24
 23fc85c:	545c      	strb	r4, [r3, r1]
	buffer[offset + 1] = (uint8_t) (value >> 16);
 23fc85e:	6843      	ldr	r3, [r0, #4]
 23fc860:	0c14      	lsrs	r4, r2, #16
 23fc862:	440b      	add	r3, r1
 23fc864:	705c      	strb	r4, [r3, #1]
	buffer[offset + 2] = (uint8_t) (value >> 8);
 23fc866:	6843      	ldr	r3, [r0, #4]
 23fc868:	0a14      	lsrs	r4, r2, #8
 23fc86a:	440b      	add	r3, r1
 23fc86c:	709c      	strb	r4, [r3, #2]
	buffer[offset + 3] = (uint8_t) value;
 23fc86e:	6843      	ldr	r3, [r0, #4]
 23fc870:	4419      	add	r1, r3
 23fc872:	70ca      	strb	r2, [r1, #3]
}
 23fc874:	bd10      	pop	{r4, pc}
	...

023fc878 <_ZN16MicWavHeaderBase11writeHeaderEhmhm>:
bool MicWavHeaderBase::writeHeader(uint8_t numChannels, uint32_t sampleRate, uint8_t bitsPerSample, uint32_t dataSizeInBytes) {
 23fc878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fc87c:	4615      	mov	r5, r2
	if (bufferSize < 44) {
 23fc87e:	6882      	ldr	r2, [r0, #8]
bool MicWavHeaderBase::writeHeader(uint8_t numChannels, uint32_t sampleRate, uint8_t bitsPerSample, uint32_t dataSizeInBytes) {
 23fc880:	4604      	mov	r4, r0
	if (bufferSize < 44) {
 23fc882:	2a2b      	cmp	r2, #43	; 0x2b
bool MicWavHeaderBase::writeHeader(uint8_t numChannels, uint32_t sampleRate, uint8_t bitsPerSample, uint32_t dataSizeInBytes) {
 23fc884:	460e      	mov	r6, r1
 23fc886:	4698      	mov	r8, r3
 23fc888:	f8dd 9020 	ldr.w	r9, [sp, #32]
	if (bufferSize < 44) {
 23fc88c:	d806      	bhi.n	23fc89c <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0x24>
		DEBUG_NORMAL(("buffer too small, was %d need 44", bufferSize));
 23fc88e:	4825      	ldr	r0, [pc, #148]	; (23fc924 <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0xac>)
 23fc890:	4925      	ldr	r1, [pc, #148]	; (23fc928 <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0xb0>)
 23fc892:	f7ff faf2 	bl	23fbe7a <_ZNK5spark6Logger4infoEPKcz>
		return false;
 23fc896:	2000      	movs	r0, #0
}
 23fc898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	setUint32BE(0, fourCharStringToValue("RIFF"));
 23fc89c:	4823      	ldr	r0, [pc, #140]	; (23fc92c <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0xb4>)
 23fc89e:	f7ff ffd7 	bl	23fc850 <_ZN16MicWavHeaderBase21fourCharStringToValueEPKc>
 23fc8a2:	2100      	movs	r1, #0
 23fc8a4:	4602      	mov	r2, r0
 23fc8a6:	4620      	mov	r0, r4
 23fc8a8:	f7ff ffd5 	bl	23fc856 <_ZN16MicWavHeaderBase11setUint32BEEjm>
	memcpy(&buffer[offset], &value, 4);
 23fc8ac:	6863      	ldr	r3, [r4, #4]
	setUint32LE(4, dataSizeInBytes + 36);
 23fc8ae:	f109 0224 	add.w	r2, r9, #36	; 0x24
	memcpy(&buffer[offset], &value, 4);
 23fc8b2:	605a      	str	r2, [r3, #4]
	setUint32BE(8, fourCharStringToValue("WAVE"));
 23fc8b4:	481e      	ldr	r0, [pc, #120]	; (23fc930 <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0xb8>)
 23fc8b6:	f7ff ffcb 	bl	23fc850 <_ZN16MicWavHeaderBase21fourCharStringToValueEPKc>
 23fc8ba:	2108      	movs	r1, #8
 23fc8bc:	4602      	mov	r2, r0
 23fc8be:	4620      	mov	r0, r4
 23fc8c0:	f7ff ffc9 	bl	23fc856 <_ZN16MicWavHeaderBase11setUint32BEEjm>
	setUint32BE(12, fourCharStringToValue("fmt "));
 23fc8c4:	481b      	ldr	r0, [pc, #108]	; (23fc934 <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0xbc>)
 23fc8c6:	f7ff ffc3 	bl	23fc850 <_ZN16MicWavHeaderBase21fourCharStringToValueEPKc>
 23fc8ca:	210c      	movs	r1, #12
 23fc8cc:	4602      	mov	r2, r0
 23fc8ce:	4620      	mov	r0, r4
 23fc8d0:	f7ff ffc1 	bl	23fc856 <_ZN16MicWavHeaderBase11setUint32BEEjm>
	memcpy(&buffer[offset], &value, 4);
 23fc8d4:	2210      	movs	r2, #16
	memcpy(&buffer[offset], &value, 2);
 23fc8d6:	2701      	movs	r7, #1
	memcpy(&buffer[offset], &value, 4);
 23fc8d8:	6863      	ldr	r3, [r4, #4]
	setUint32BE(36, fourCharStringToValue("data"));
 23fc8da:	4817      	ldr	r0, [pc, #92]	; (23fc938 <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0xc0>)
	memcpy(&buffer[offset], &value, 4);
 23fc8dc:	611a      	str	r2, [r3, #16]
	memcpy(&buffer[offset], &value, 2);
 23fc8de:	6863      	ldr	r3, [r4, #4]
	setUint32BE(36, fourCharStringToValue("data"));
 23fc8e0:	2124      	movs	r1, #36	; 0x24
	memcpy(&buffer[offset], &value, 2);
 23fc8e2:	829f      	strh	r7, [r3, #20]
 23fc8e4:	6863      	ldr	r3, [r4, #4]
 23fc8e6:	82de      	strh	r6, [r3, #22]
	memcpy(&buffer[offset], &value, 4);
 23fc8e8:	6863      	ldr	r3, [r4, #4]
 23fc8ea:	619d      	str	r5, [r3, #24]
	setUint32LE(28, sampleRate * numChannels * bitsPerSample / 8);
 23fc8ec:	fb05 f508 	mul.w	r5, r5, r8
 23fc8f0:	4375      	muls	r5, r6
	memcpy(&buffer[offset], &value, 4);
 23fc8f2:	6863      	ldr	r3, [r4, #4]
	setUint16LE(32, numChannels * bitsPerSample / 8);
 23fc8f4:	fb16 f608 	smulbb	r6, r6, r8
	setUint32LE(28, sampleRate * numChannels * bitsPerSample / 8);
 23fc8f8:	08ed      	lsrs	r5, r5, #3
	memcpy(&buffer[offset], &value, 4);
 23fc8fa:	61dd      	str	r5, [r3, #28]
	memcpy(&buffer[offset], &value, 2);
 23fc8fc:	6863      	ldr	r3, [r4, #4]
	setUint16LE(32, numChannels * bitsPerSample / 8);
 23fc8fe:	10f6      	asrs	r6, r6, #3
	memcpy(&buffer[offset], &value, 2);
 23fc900:	841e      	strh	r6, [r3, #32]
 23fc902:	6863      	ldr	r3, [r4, #4]
 23fc904:	f8a3 8022 	strh.w	r8, [r3, #34]	; 0x22
	setUint32BE(36, fourCharStringToValue("data"));
 23fc908:	f7ff ffa2 	bl	23fc850 <_ZN16MicWavHeaderBase21fourCharStringToValueEPKc>
 23fc90c:	4602      	mov	r2, r0
 23fc90e:	4620      	mov	r0, r4
 23fc910:	f7ff ffa1 	bl	23fc856 <_ZN16MicWavHeaderBase11setUint32BEEjm>
	memcpy(&buffer[offset], &value, 4);
 23fc914:	6863      	ldr	r3, [r4, #4]
	bufferOffset = 44;
 23fc916:	4638      	mov	r0, r7
	memcpy(&buffer[offset], &value, 4);
 23fc918:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
	bufferOffset = 44;
 23fc91c:	232c      	movs	r3, #44	; 0x2c
 23fc91e:	60e3      	str	r3, [r4, #12]
	return true;
 23fc920:	e7ba      	b.n	23fc898 <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0x20>
 23fc922:	bf00      	nop
 23fc924:	1007ae74 	.word	0x1007ae74
 23fc928:	023ffb18 	.word	0x023ffb18
 23fc92c:	023ffb39 	.word	0x023ffb39
 23fc930:	023ffb3e 	.word	0x023ffb3e
 23fc934:	023ffb43 	.word	0x023ffb43
 23fc938:	023ffb48 	.word	0x023ffb48

023fc93c <_ZN33Microphone_PDM_BufferSampling_wav13preCompletionEv>:

Microphone_PDM_BufferSampling_wav::Microphone_PDM_BufferSampling_wav() {
	reserveHeaderSize = MicWavHeaderBase::STANDARD_SIZE;
}

void Microphone_PDM_BufferSampling_wav::preCompletion() {
 23fc93c:	b510      	push	{r4, lr}
	MicWavHeaderBase wav(buffer, bufferSize);
 23fc93e:	68c3      	ldr	r3, [r0, #12]
void Microphone_PDM_BufferSampling_wav::preCompletion() {
 23fc940:	b088      	sub	sp, #32
MicWavHeaderBase::MicWavHeaderBase(uint8_t *buffer, size_t bufferSize) : buffer(buffer), bufferSize(bufferSize) {
 23fc942:	9306      	str	r3, [sp, #24]
 23fc944:	2300      	movs	r3, #0
 23fc946:	4912      	ldr	r1, [pc, #72]	; (23fc990 <_ZN33Microphone_PDM_BufferSampling_wav13preCompletionEv+0x54>)
	MicWavHeaderBase wav(buffer, bufferSize);
 23fc948:	6842      	ldr	r2, [r0, #4]
void Microphone_PDM_BufferSampling_wav::preCompletion() {
 23fc94a:	4604      	mov	r4, r0
MicWavHeaderBase::MicWavHeaderBase(uint8_t *buffer, size_t bufferSize) : buffer(buffer), bufferSize(bufferSize) {
 23fc94c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 23fc950:	9307      	str	r3, [sp, #28]

	wav.writeHeader(
		Microphone_PDM::instance().getNumChannels(),
 23fc952:	f7ff fe91 	bl	23fc678 <_ZN14Microphone_PDM8instanceEv>
	/**
	 * @brief Get the number of channels, either 1 or 2
	 * 
	 * @return uint8_t 
	 */
	uint8_t getNumChannels() const { return stereoMode ? 2 : 1; };
 23fc956:	7a03      	ldrb	r3, [r0, #8]
 23fc958:	2b00      	cmp	r3, #0
 23fc95a:	bf14      	ite	ne
 23fc95c:	2102      	movne	r1, #2
 23fc95e:	2101      	moveq	r1, #1
 23fc960:	9103      	str	r1, [sp, #12]
		(uint32_t) Microphone_PDM::instance().getSampleRate(),
 23fc962:	f7ff fe89 	bl	23fc678 <_ZN14Microphone_PDM8instanceEv>
	wav.writeHeader(
 23fc966:	68c2      	ldr	r2, [r0, #12]
 23fc968:	9202      	str	r2, [sp, #8]
		Microphone_PDM::instance().getBitsPerSample(),
 23fc96a:	f7ff fe85 	bl	23fc678 <_ZN14Microphone_PDM8instanceEv>
	/**
	 * @brief Get the number of bits per sample, 8 or 16
	 * 
	 * @return uint8_t bits per sample (8 or 16)
	 */
	uint8_t getBitsPerSample() const { return (uint8_t) getSampleSizeInBytes() * 8; };
 23fc96e:	f7ff fef1 	bl	23fc754 <_ZNK14Microphone_PDM20getSampleSizeInBytesEv>
	wav.writeHeader(
 23fc972:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
		bufferSize - reserveHeaderSize);
 23fc976:	68e3      	ldr	r3, [r4, #12]
 23fc978:	6a64      	ldr	r4, [r4, #36]	; 0x24
 23fc97a:	00c0      	lsls	r0, r0, #3
 23fc97c:	1b1b      	subs	r3, r3, r4
	wav.writeHeader(
 23fc97e:	9300      	str	r3, [sp, #0]
 23fc980:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 23fc984:	a804      	add	r0, sp, #16
 23fc986:	f7ff ff77 	bl	23fc878 <_ZN16MicWavHeaderBase11writeHeaderEhmhm>
}
 23fc98a:	b008      	add	sp, #32
 23fc98c:	bd10      	pop	{r4, pc}
 23fc98e:	bf00      	nop
 23fc990:	023ffb58 	.word	0x023ffb58

023fc994 <_ZN33Microphone_PDM_BufferSampling_wavC1Ev>:
Microphone_PDM_BufferSampling_wav::Microphone_PDM_BufferSampling_wav() {
 23fc994:	b510      	push	{r4, lr}
 23fc996:	4604      	mov	r4, r0
 23fc998:	f7ff ff32 	bl	23fc800 <_ZN29Microphone_PDM_BufferSamplingC1Ev>
 23fc99c:	4b02      	ldr	r3, [pc, #8]	; (23fc9a8 <_ZN33Microphone_PDM_BufferSampling_wavC1Ev+0x14>)
}
 23fc99e:	4620      	mov	r0, r4
Microphone_PDM_BufferSampling_wav::Microphone_PDM_BufferSampling_wav() {
 23fc9a0:	6023      	str	r3, [r4, #0]
	reserveHeaderSize = MicWavHeaderBase::STANDARD_SIZE;
 23fc9a2:	232c      	movs	r3, #44	; 0x2c
 23fc9a4:	6263      	str	r3, [r4, #36]	; 0x24
}
 23fc9a6:	bd10      	pop	{r4, pc}
 23fc9a8:	023ffb68 	.word	0x023ffb68

023fc9ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc9ac:	b509      	push	{r0, r3, lr}
 23fc9ae:	4804      	ldr	r0, [pc, #16]	; (23fc9c0 <netdb_freeaddrinfo+0x14>)
 23fc9b0:	6800      	ldr	r0, [r0, #0]
 23fc9b2:	4b04      	ldr	r3, [pc, #16]	; (23fc9c4 <netdb_freeaddrinfo+0x18>)
 23fc9b4:	4403      	add	r3, r0
 23fc9b6:	681b      	ldr	r3, [r3, #0]
 23fc9b8:	689b      	ldr	r3, [r3, #8]
 23fc9ba:	9302      	str	r3, [sp, #8]
 23fc9bc:	bd09      	pop	{r0, r3, pc}
 23fc9be:	0000      	.short	0x0000
 23fc9c0:	1007a448 	.word	0x1007a448
 23fc9c4:	00000050 	.word	0x00000050

023fc9c8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc9c8:	b509      	push	{r0, r3, lr}
 23fc9ca:	4804      	ldr	r0, [pc, #16]	; (23fc9dc <netdb_getaddrinfo+0x14>)
 23fc9cc:	6800      	ldr	r0, [r0, #0]
 23fc9ce:	4b04      	ldr	r3, [pc, #16]	; (23fc9e0 <netdb_getaddrinfo+0x18>)
 23fc9d0:	4403      	add	r3, r0
 23fc9d2:	681b      	ldr	r3, [r3, #0]
 23fc9d4:	68db      	ldr	r3, [r3, #12]
 23fc9d6:	9302      	str	r3, [sp, #8]
 23fc9d8:	bd09      	pop	{r0, r3, pc}
 23fc9da:	0000      	.short	0x0000
 23fc9dc:	1007a448 	.word	0x1007a448
 23fc9e0:	00000050 	.word	0x00000050

023fc9e4 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fc9e4:	b509      	push	{r0, r3, lr}
 23fc9e6:	4804      	ldr	r0, [pc, #16]	; (23fc9f8 <hal_pin_validate_function+0x14>)
 23fc9e8:	6800      	ldr	r0, [r0, #0]
 23fc9ea:	4b04      	ldr	r3, [pc, #16]	; (23fc9fc <hal_pin_validate_function+0x18>)
 23fc9ec:	4403      	add	r3, r0
 23fc9ee:	681b      	ldr	r3, [r3, #0]
 23fc9f0:	685b      	ldr	r3, [r3, #4]
 23fc9f2:	9302      	str	r3, [sp, #8]
 23fc9f4:	bd09      	pop	{r0, r3, pc}
 23fc9f6:	0000      	.short	0x0000
 23fc9f8:	1007a448 	.word	0x1007a448
 23fc9fc:	00000014 	.word	0x00000014

023fca00 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fca00:	b509      	push	{r0, r3, lr}
 23fca02:	4804      	ldr	r0, [pc, #16]	; (23fca14 <hal_gpio_mode+0x14>)
 23fca04:	6800      	ldr	r0, [r0, #0]
 23fca06:	4b04      	ldr	r3, [pc, #16]	; (23fca18 <hal_gpio_mode+0x18>)
 23fca08:	4403      	add	r3, r0
 23fca0a:	681b      	ldr	r3, [r3, #0]
 23fca0c:	689b      	ldr	r3, [r3, #8]
 23fca0e:	9302      	str	r3, [sp, #8]
 23fca10:	bd09      	pop	{r0, r3, pc}
 23fca12:	0000      	.short	0x0000
 23fca14:	1007a448 	.word	0x1007a448
 23fca18:	00000014 	.word	0x00000014

023fca1c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fca1c:	b509      	push	{r0, r3, lr}
 23fca1e:	4804      	ldr	r0, [pc, #16]	; (23fca30 <hal_gpio_get_mode+0x14>)
 23fca20:	6800      	ldr	r0, [r0, #0]
 23fca22:	4b04      	ldr	r3, [pc, #16]	; (23fca34 <hal_gpio_get_mode+0x18>)
 23fca24:	4403      	add	r3, r0
 23fca26:	681b      	ldr	r3, [r3, #0]
 23fca28:	68db      	ldr	r3, [r3, #12]
 23fca2a:	9302      	str	r3, [sp, #8]
 23fca2c:	bd09      	pop	{r0, r3, pc}
 23fca2e:	0000      	.short	0x0000
 23fca30:	1007a448 	.word	0x1007a448
 23fca34:	00000014 	.word	0x00000014

023fca38 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fca38:	b509      	push	{r0, r3, lr}
 23fca3a:	4804      	ldr	r0, [pc, #16]	; (23fca4c <hal_gpio_write+0x14>)
 23fca3c:	6800      	ldr	r0, [r0, #0]
 23fca3e:	4b04      	ldr	r3, [pc, #16]	; (23fca50 <hal_gpio_write+0x18>)
 23fca40:	4403      	add	r3, r0
 23fca42:	681b      	ldr	r3, [r3, #0]
 23fca44:	691b      	ldr	r3, [r3, #16]
 23fca46:	9302      	str	r3, [sp, #8]
 23fca48:	bd09      	pop	{r0, r3, pc}
 23fca4a:	0000      	.short	0x0000
 23fca4c:	1007a448 	.word	0x1007a448
 23fca50:	00000014 	.word	0x00000014

023fca54 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fca54:	b509      	push	{r0, r3, lr}
 23fca56:	4804      	ldr	r0, [pc, #16]	; (23fca68 <HAL_RNG_GetRandomNumber+0x14>)
 23fca58:	6800      	ldr	r0, [r0, #0]
 23fca5a:	4b04      	ldr	r3, [pc, #16]	; (23fca6c <HAL_RNG_GetRandomNumber+0x18>)
 23fca5c:	4403      	add	r3, r0
 23fca5e:	681b      	ldr	r3, [r3, #0]
 23fca60:	685b      	ldr	r3, [r3, #4]
 23fca62:	9302      	str	r3, [sp, #8]
 23fca64:	bd09      	pop	{r0, r3, pc}
 23fca66:	0000      	.short	0x0000
 23fca68:	1007a448 	.word	0x1007a448
 23fca6c:	00000000 	.word	0x00000000

023fca70 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fca70:	b509      	push	{r0, r3, lr}
 23fca72:	4804      	ldr	r0, [pc, #16]	; (23fca84 <HAL_Delay_Microseconds+0x14>)
 23fca74:	6800      	ldr	r0, [r0, #0]
 23fca76:	4b04      	ldr	r3, [pc, #16]	; (23fca88 <HAL_Delay_Microseconds+0x18>)
 23fca78:	4403      	add	r3, r0
 23fca7a:	681b      	ldr	r3, [r3, #0]
 23fca7c:	68db      	ldr	r3, [r3, #12]
 23fca7e:	9302      	str	r3, [sp, #8]
 23fca80:	bd09      	pop	{r0, r3, pc}
 23fca82:	0000      	.short	0x0000
 23fca84:	1007a448 	.word	0x1007a448
 23fca88:	00000000 	.word	0x00000000

023fca8c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fca8c:	b509      	push	{r0, r3, lr}
 23fca8e:	4804      	ldr	r0, [pc, #16]	; (23fcaa0 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fca90:	6800      	ldr	r0, [r0, #0]
 23fca92:	4b04      	ldr	r3, [pc, #16]	; (23fcaa4 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fca94:	4403      	add	r3, r0
 23fca96:	681b      	ldr	r3, [r3, #0]
 23fca98:	695b      	ldr	r3, [r3, #20]
 23fca9a:	9302      	str	r3, [sp, #8]
 23fca9c:	bd09      	pop	{r0, r3, pc}
 23fca9e:	0000      	.short	0x0000
 23fcaa0:	1007a448 	.word	0x1007a448
 23fcaa4:	00000000 	.word	0x00000000

023fcaa8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fcaa8:	b509      	push	{r0, r3, lr}
 23fcaaa:	4804      	ldr	r0, [pc, #16]	; (23fcabc <os_mutex_recursive_create+0x14>)
 23fcaac:	6800      	ldr	r0, [r0, #0]
 23fcaae:	4b04      	ldr	r3, [pc, #16]	; (23fcac0 <os_mutex_recursive_create+0x18>)
 23fcab0:	4403      	add	r3, r0
 23fcab2:	681b      	ldr	r3, [r3, #0]
 23fcab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcab6:	9302      	str	r3, [sp, #8]
 23fcab8:	bd09      	pop	{r0, r3, pc}
 23fcaba:	0000      	.short	0x0000
 23fcabc:	1007a448 	.word	0x1007a448
 23fcac0:	00000030 	.word	0x00000030

023fcac4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fcac4:	b509      	push	{r0, r3, lr}
 23fcac6:	4804      	ldr	r0, [pc, #16]	; (23fcad8 <os_mutex_recursive_destroy+0x14>)
 23fcac8:	6800      	ldr	r0, [r0, #0]
 23fcaca:	4b04      	ldr	r3, [pc, #16]	; (23fcadc <os_mutex_recursive_destroy+0x18>)
 23fcacc:	4403      	add	r3, r0
 23fcace:	681b      	ldr	r3, [r3, #0]
 23fcad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fcad2:	9302      	str	r3, [sp, #8]
 23fcad4:	bd09      	pop	{r0, r3, pc}
 23fcad6:	0000      	.short	0x0000
 23fcad8:	1007a448 	.word	0x1007a448
 23fcadc:	00000030 	.word	0x00000030

023fcae0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fcae0:	b509      	push	{r0, r3, lr}
 23fcae2:	4804      	ldr	r0, [pc, #16]	; (23fcaf4 <os_mutex_recursive_lock+0x14>)
 23fcae4:	6800      	ldr	r0, [r0, #0]
 23fcae6:	4b04      	ldr	r3, [pc, #16]	; (23fcaf8 <os_mutex_recursive_lock+0x18>)
 23fcae8:	4403      	add	r3, r0
 23fcaea:	681b      	ldr	r3, [r3, #0]
 23fcaec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fcaee:	9302      	str	r3, [sp, #8]
 23fcaf0:	bd09      	pop	{r0, r3, pc}
 23fcaf2:	0000      	.short	0x0000
 23fcaf4:	1007a448 	.word	0x1007a448
 23fcaf8:	00000030 	.word	0x00000030

023fcafc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fcafc:	b509      	push	{r0, r3, lr}
 23fcafe:	4804      	ldr	r0, [pc, #16]	; (23fcb10 <os_mutex_recursive_unlock+0x14>)
 23fcb00:	6800      	ldr	r0, [r0, #0]
 23fcb02:	4b04      	ldr	r3, [pc, #16]	; (23fcb14 <os_mutex_recursive_unlock+0x18>)
 23fcb04:	4403      	add	r3, r0
 23fcb06:	681b      	ldr	r3, [r3, #0]
 23fcb08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fcb0a:	9302      	str	r3, [sp, #8]
 23fcb0c:	bd09      	pop	{r0, r3, pc}
 23fcb0e:	0000      	.short	0x0000
 23fcb10:	1007a448 	.word	0x1007a448
 23fcb14:	00000030 	.word	0x00000030

023fcb18 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fcb18:	b509      	push	{r0, r3, lr}
 23fcb1a:	4804      	ldr	r0, [pc, #16]	; (23fcb2c <inet_inet_ntop+0x14>)
 23fcb1c:	6800      	ldr	r0, [r0, #0]
 23fcb1e:	4b04      	ldr	r3, [pc, #16]	; (23fcb30 <inet_inet_ntop+0x18>)
 23fcb20:	4403      	add	r3, r0
 23fcb22:	681b      	ldr	r3, [r3, #0]
 23fcb24:	695b      	ldr	r3, [r3, #20]
 23fcb26:	9302      	str	r3, [sp, #8]
 23fcb28:	bd09      	pop	{r0, r3, pc}
 23fcb2a:	0000      	.short	0x0000
 23fcb2c:	1007a448 	.word	0x1007a448
 23fcb30:	0000004c 	.word	0x0000004c

023fcb34 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fcb34:	b509      	push	{r0, r3, lr}
 23fcb36:	4804      	ldr	r0, [pc, #16]	; (23fcb48 <hal_usart_end+0x14>)
 23fcb38:	6800      	ldr	r0, [r0, #0]
 23fcb3a:	4b04      	ldr	r3, [pc, #16]	; (23fcb4c <hal_usart_end+0x18>)
 23fcb3c:	4403      	add	r3, r0
 23fcb3e:	681b      	ldr	r3, [r3, #0]
 23fcb40:	689b      	ldr	r3, [r3, #8]
 23fcb42:	9302      	str	r3, [sp, #8]
 23fcb44:	bd09      	pop	{r0, r3, pc}
 23fcb46:	0000      	.short	0x0000
 23fcb48:	1007a448 	.word	0x1007a448
 23fcb4c:	00000024 	.word	0x00000024

023fcb50 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fcb50:	b509      	push	{r0, r3, lr}
 23fcb52:	4804      	ldr	r0, [pc, #16]	; (23fcb64 <hal_usart_write+0x14>)
 23fcb54:	6800      	ldr	r0, [r0, #0]
 23fcb56:	4b04      	ldr	r3, [pc, #16]	; (23fcb68 <hal_usart_write+0x18>)
 23fcb58:	4403      	add	r3, r0
 23fcb5a:	681b      	ldr	r3, [r3, #0]
 23fcb5c:	68db      	ldr	r3, [r3, #12]
 23fcb5e:	9302      	str	r3, [sp, #8]
 23fcb60:	bd09      	pop	{r0, r3, pc}
 23fcb62:	0000      	.short	0x0000
 23fcb64:	1007a448 	.word	0x1007a448
 23fcb68:	00000024 	.word	0x00000024

023fcb6c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fcb6c:	b509      	push	{r0, r3, lr}
 23fcb6e:	4804      	ldr	r0, [pc, #16]	; (23fcb80 <hal_usart_available+0x14>)
 23fcb70:	6800      	ldr	r0, [r0, #0]
 23fcb72:	4b04      	ldr	r3, [pc, #16]	; (23fcb84 <hal_usart_available+0x18>)
 23fcb74:	4403      	add	r3, r0
 23fcb76:	681b      	ldr	r3, [r3, #0]
 23fcb78:	691b      	ldr	r3, [r3, #16]
 23fcb7a:	9302      	str	r3, [sp, #8]
 23fcb7c:	bd09      	pop	{r0, r3, pc}
 23fcb7e:	0000      	.short	0x0000
 23fcb80:	1007a448 	.word	0x1007a448
 23fcb84:	00000024 	.word	0x00000024

023fcb88 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fcb88:	b509      	push	{r0, r3, lr}
 23fcb8a:	4804      	ldr	r0, [pc, #16]	; (23fcb9c <hal_usart_read+0x14>)
 23fcb8c:	6800      	ldr	r0, [r0, #0]
 23fcb8e:	4b04      	ldr	r3, [pc, #16]	; (23fcba0 <hal_usart_read+0x18>)
 23fcb90:	4403      	add	r3, r0
 23fcb92:	681b      	ldr	r3, [r3, #0]
 23fcb94:	695b      	ldr	r3, [r3, #20]
 23fcb96:	9302      	str	r3, [sp, #8]
 23fcb98:	bd09      	pop	{r0, r3, pc}
 23fcb9a:	0000      	.short	0x0000
 23fcb9c:	1007a448 	.word	0x1007a448
 23fcba0:	00000024 	.word	0x00000024

023fcba4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fcba4:	b509      	push	{r0, r3, lr}
 23fcba6:	4804      	ldr	r0, [pc, #16]	; (23fcbb8 <hal_usart_peek+0x14>)
 23fcba8:	6800      	ldr	r0, [r0, #0]
 23fcbaa:	4b04      	ldr	r3, [pc, #16]	; (23fcbbc <hal_usart_peek+0x18>)
 23fcbac:	4403      	add	r3, r0
 23fcbae:	681b      	ldr	r3, [r3, #0]
 23fcbb0:	699b      	ldr	r3, [r3, #24]
 23fcbb2:	9302      	str	r3, [sp, #8]
 23fcbb4:	bd09      	pop	{r0, r3, pc}
 23fcbb6:	0000      	.short	0x0000
 23fcbb8:	1007a448 	.word	0x1007a448
 23fcbbc:	00000024 	.word	0x00000024

023fcbc0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fcbc0:	b509      	push	{r0, r3, lr}
 23fcbc2:	4804      	ldr	r0, [pc, #16]	; (23fcbd4 <hal_usart_flush+0x14>)
 23fcbc4:	6800      	ldr	r0, [r0, #0]
 23fcbc6:	4b04      	ldr	r3, [pc, #16]	; (23fcbd8 <hal_usart_flush+0x18>)
 23fcbc8:	4403      	add	r3, r0
 23fcbca:	681b      	ldr	r3, [r3, #0]
 23fcbcc:	69db      	ldr	r3, [r3, #28]
 23fcbce:	9302      	str	r3, [sp, #8]
 23fcbd0:	bd09      	pop	{r0, r3, pc}
 23fcbd2:	0000      	.short	0x0000
 23fcbd4:	1007a448 	.word	0x1007a448
 23fcbd8:	00000024 	.word	0x00000024

023fcbdc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fcbdc:	b509      	push	{r0, r3, lr}
 23fcbde:	4804      	ldr	r0, [pc, #16]	; (23fcbf0 <hal_usart_is_enabled+0x14>)
 23fcbe0:	6800      	ldr	r0, [r0, #0]
 23fcbe2:	4b04      	ldr	r3, [pc, #16]	; (23fcbf4 <hal_usart_is_enabled+0x18>)
 23fcbe4:	4403      	add	r3, r0
 23fcbe6:	681b      	ldr	r3, [r3, #0]
 23fcbe8:	6a1b      	ldr	r3, [r3, #32]
 23fcbea:	9302      	str	r3, [sp, #8]
 23fcbec:	bd09      	pop	{r0, r3, pc}
 23fcbee:	0000      	.short	0x0000
 23fcbf0:	1007a448 	.word	0x1007a448
 23fcbf4:	00000024 	.word	0x00000024

023fcbf8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fcbf8:	b509      	push	{r0, r3, lr}
 23fcbfa:	4804      	ldr	r0, [pc, #16]	; (23fcc0c <hal_usart_available_data_for_write+0x14>)
 23fcbfc:	6800      	ldr	r0, [r0, #0]
 23fcbfe:	4b04      	ldr	r3, [pc, #16]	; (23fcc10 <hal_usart_available_data_for_write+0x18>)
 23fcc00:	4403      	add	r3, r0
 23fcc02:	681b      	ldr	r3, [r3, #0]
 23fcc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcc06:	9302      	str	r3, [sp, #8]
 23fcc08:	bd09      	pop	{r0, r3, pc}
 23fcc0a:	0000      	.short	0x0000
 23fcc0c:	1007a448 	.word	0x1007a448
 23fcc10:	00000024 	.word	0x00000024

023fcc14 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fcc14:	b509      	push	{r0, r3, lr}
 23fcc16:	4804      	ldr	r0, [pc, #16]	; (23fcc28 <hal_usart_begin_config+0x14>)
 23fcc18:	6800      	ldr	r0, [r0, #0]
 23fcc1a:	4b04      	ldr	r3, [pc, #16]	; (23fcc2c <hal_usart_begin_config+0x18>)
 23fcc1c:	4403      	add	r3, r0
 23fcc1e:	681b      	ldr	r3, [r3, #0]
 23fcc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcc22:	9302      	str	r3, [sp, #8]
 23fcc24:	bd09      	pop	{r0, r3, pc}
 23fcc26:	0000      	.short	0x0000
 23fcc28:	1007a448 	.word	0x1007a448
 23fcc2c:	00000024 	.word	0x00000024

023fcc30 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fcc30:	b509      	push	{r0, r3, lr}
 23fcc32:	4804      	ldr	r0, [pc, #16]	; (23fcc44 <hal_usart_init_ex+0x14>)
 23fcc34:	6800      	ldr	r0, [r0, #0]
 23fcc36:	4b04      	ldr	r3, [pc, #16]	; (23fcc48 <hal_usart_init_ex+0x18>)
 23fcc38:	4403      	add	r3, r0
 23fcc3a:	681b      	ldr	r3, [r3, #0]
 23fcc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcc3e:	9302      	str	r3, [sp, #8]
 23fcc40:	bd09      	pop	{r0, r3, pc}
 23fcc42:	0000      	.short	0x0000
 23fcc44:	1007a448 	.word	0x1007a448
 23fcc48:	00000024 	.word	0x00000024

023fcc4c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fcc4c:	b509      	push	{r0, r3, lr}
 23fcc4e:	4804      	ldr	r0, [pc, #16]	; (23fcc60 <hal_i2c_write+0x14>)
 23fcc50:	6800      	ldr	r0, [r0, #0]
 23fcc52:	4b04      	ldr	r3, [pc, #16]	; (23fcc64 <hal_i2c_write+0x18>)
 23fcc54:	4403      	add	r3, r0
 23fcc56:	681b      	ldr	r3, [r3, #0]
 23fcc58:	6a1b      	ldr	r3, [r3, #32]
 23fcc5a:	9302      	str	r3, [sp, #8]
 23fcc5c:	bd09      	pop	{r0, r3, pc}
 23fcc5e:	0000      	.short	0x0000
 23fcc60:	1007a448 	.word	0x1007a448
 23fcc64:	00000010 	.word	0x00000010

023fcc68 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fcc68:	b509      	push	{r0, r3, lr}
 23fcc6a:	4804      	ldr	r0, [pc, #16]	; (23fcc7c <hal_i2c_available+0x14>)
 23fcc6c:	6800      	ldr	r0, [r0, #0]
 23fcc6e:	4b04      	ldr	r3, [pc, #16]	; (23fcc80 <hal_i2c_available+0x18>)
 23fcc70:	4403      	add	r3, r0
 23fcc72:	681b      	ldr	r3, [r3, #0]
 23fcc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fcc76:	9302      	str	r3, [sp, #8]
 23fcc78:	bd09      	pop	{r0, r3, pc}
 23fcc7a:	0000      	.short	0x0000
 23fcc7c:	1007a448 	.word	0x1007a448
 23fcc80:	00000010 	.word	0x00000010

023fcc84 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fcc84:	b509      	push	{r0, r3, lr}
 23fcc86:	4804      	ldr	r0, [pc, #16]	; (23fcc98 <hal_i2c_read+0x14>)
 23fcc88:	6800      	ldr	r0, [r0, #0]
 23fcc8a:	4b04      	ldr	r3, [pc, #16]	; (23fcc9c <hal_i2c_read+0x18>)
 23fcc8c:	4403      	add	r3, r0
 23fcc8e:	681b      	ldr	r3, [r3, #0]
 23fcc90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcc92:	9302      	str	r3, [sp, #8]
 23fcc94:	bd09      	pop	{r0, r3, pc}
 23fcc96:	0000      	.short	0x0000
 23fcc98:	1007a448 	.word	0x1007a448
 23fcc9c:	00000010 	.word	0x00000010

023fcca0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fcca0:	b509      	push	{r0, r3, lr}
 23fcca2:	4804      	ldr	r0, [pc, #16]	; (23fccb4 <hal_i2c_peek+0x14>)
 23fcca4:	6800      	ldr	r0, [r0, #0]
 23fcca6:	4b04      	ldr	r3, [pc, #16]	; (23fccb8 <hal_i2c_peek+0x18>)
 23fcca8:	4403      	add	r3, r0
 23fccaa:	681b      	ldr	r3, [r3, #0]
 23fccac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fccae:	9302      	str	r3, [sp, #8]
 23fccb0:	bd09      	pop	{r0, r3, pc}
 23fccb2:	0000      	.short	0x0000
 23fccb4:	1007a448 	.word	0x1007a448
 23fccb8:	00000010 	.word	0x00000010

023fccbc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fccbc:	b509      	push	{r0, r3, lr}
 23fccbe:	4804      	ldr	r0, [pc, #16]	; (23fccd0 <hal_i2c_flush+0x14>)
 23fccc0:	6800      	ldr	r0, [r0, #0]
 23fccc2:	4b04      	ldr	r3, [pc, #16]	; (23fccd4 <hal_i2c_flush+0x18>)
 23fccc4:	4403      	add	r3, r0
 23fccc6:	681b      	ldr	r3, [r3, #0]
 23fccc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fccca:	9302      	str	r3, [sp, #8]
 23fcccc:	bd09      	pop	{r0, r3, pc}
 23fccce:	0000      	.short	0x0000
 23fccd0:	1007a448 	.word	0x1007a448
 23fccd4:	00000010 	.word	0x00000010

023fccd8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fccd8:	b509      	push	{r0, r3, lr}
 23fccda:	4804      	ldr	r0, [pc, #16]	; (23fccec <hal_i2c_is_enabled+0x14>)
 23fccdc:	6800      	ldr	r0, [r0, #0]
 23fccde:	4b04      	ldr	r3, [pc, #16]	; (23fccf0 <hal_i2c_is_enabled+0x18>)
 23fcce0:	4403      	add	r3, r0
 23fcce2:	681b      	ldr	r3, [r3, #0]
 23fcce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fcce6:	9302      	str	r3, [sp, #8]
 23fcce8:	bd09      	pop	{r0, r3, pc}
 23fccea:	0000      	.short	0x0000
 23fccec:	1007a448 	.word	0x1007a448
 23fccf0:	00000010 	.word	0x00000010

023fccf4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fccf4:	b509      	push	{r0, r3, lr}
 23fccf6:	4804      	ldr	r0, [pc, #16]	; (23fcd08 <hal_i2c_init+0x14>)
 23fccf8:	6800      	ldr	r0, [r0, #0]
 23fccfa:	4b04      	ldr	r3, [pc, #16]	; (23fcd0c <hal_i2c_init+0x18>)
 23fccfc:	4403      	add	r3, r0
 23fccfe:	681b      	ldr	r3, [r3, #0]
 23fcd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcd02:	9302      	str	r3, [sp, #8]
 23fcd04:	bd09      	pop	{r0, r3, pc}
 23fcd06:	0000      	.short	0x0000
 23fcd08:	1007a448 	.word	0x1007a448
 23fcd0c:	00000010 	.word	0x00000010

023fcd10 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fcd10:	b509      	push	{r0, r3, lr}
 23fcd12:	4804      	ldr	r0, [pc, #16]	; (23fcd24 <hal_spi_init+0x14>)
 23fcd14:	6800      	ldr	r0, [r0, #0]
 23fcd16:	4b04      	ldr	r3, [pc, #16]	; (23fcd28 <hal_spi_init+0x18>)
 23fcd18:	4403      	add	r3, r0
 23fcd1a:	681b      	ldr	r3, [r3, #0]
 23fcd1c:	69db      	ldr	r3, [r3, #28]
 23fcd1e:	9302      	str	r3, [sp, #8]
 23fcd20:	bd09      	pop	{r0, r3, pc}
 23fcd22:	0000      	.short	0x0000
 23fcd24:	1007a448 	.word	0x1007a448
 23fcd28:	00000018 	.word	0x00000018

023fcd2c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fcd2c:	b509      	push	{r0, r3, lr}
 23fcd2e:	4804      	ldr	r0, [pc, #16]	; (23fcd40 <hal_spi_is_enabled+0x14>)
 23fcd30:	6800      	ldr	r0, [r0, #0]
 23fcd32:	4b04      	ldr	r3, [pc, #16]	; (23fcd44 <hal_spi_is_enabled+0x18>)
 23fcd34:	4403      	add	r3, r0
 23fcd36:	681b      	ldr	r3, [r3, #0]
 23fcd38:	6a1b      	ldr	r3, [r3, #32]
 23fcd3a:	9302      	str	r3, [sp, #8]
 23fcd3c:	bd09      	pop	{r0, r3, pc}
 23fcd3e:	0000      	.short	0x0000
 23fcd40:	1007a448 	.word	0x1007a448
 23fcd44:	00000018 	.word	0x00000018

023fcd48 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 23fcd48:	b509      	push	{r0, r3, lr}
 23fcd4a:	4804      	ldr	r0, [pc, #16]	; (23fcd5c <HAL_Servo_Attach+0x14>)
 23fcd4c:	6800      	ldr	r0, [r0, #0]
 23fcd4e:	4b04      	ldr	r3, [pc, #16]	; (23fcd60 <HAL_Servo_Attach+0x18>)
 23fcd50:	4403      	add	r3, r0
 23fcd52:	681b      	ldr	r3, [r3, #0]
 23fcd54:	691b      	ldr	r3, [r3, #16]
 23fcd56:	9302      	str	r3, [sp, #8]
 23fcd58:	bd09      	pop	{r0, r3, pc}
 23fcd5a:	0000      	.short	0x0000
 23fcd5c:	1007a448 	.word	0x1007a448
 23fcd60:	0000000c 	.word	0x0000000c

023fcd64 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 23fcd64:	b509      	push	{r0, r3, lr}
 23fcd66:	4804      	ldr	r0, [pc, #16]	; (23fcd78 <HAL_Servo_Detach+0x14>)
 23fcd68:	6800      	ldr	r0, [r0, #0]
 23fcd6a:	4b04      	ldr	r3, [pc, #16]	; (23fcd7c <HAL_Servo_Detach+0x18>)
 23fcd6c:	4403      	add	r3, r0
 23fcd6e:	681b      	ldr	r3, [r3, #0]
 23fcd70:	695b      	ldr	r3, [r3, #20]
 23fcd72:	9302      	str	r3, [sp, #8]
 23fcd74:	bd09      	pop	{r0, r3, pc}
 23fcd76:	0000      	.short	0x0000
 23fcd78:	1007a448 	.word	0x1007a448
 23fcd7c:	0000000c 	.word	0x0000000c

023fcd80 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 23fcd80:	b509      	push	{r0, r3, lr}
 23fcd82:	4804      	ldr	r0, [pc, #16]	; (23fcd94 <HAL_Servo_Write_Pulse_Width+0x14>)
 23fcd84:	6800      	ldr	r0, [r0, #0]
 23fcd86:	4b04      	ldr	r3, [pc, #16]	; (23fcd98 <HAL_Servo_Write_Pulse_Width+0x18>)
 23fcd88:	4403      	add	r3, r0
 23fcd8a:	681b      	ldr	r3, [r3, #0]
 23fcd8c:	699b      	ldr	r3, [r3, #24]
 23fcd8e:	9302      	str	r3, [sp, #8]
 23fcd90:	bd09      	pop	{r0, r3, pc}
 23fcd92:	0000      	.short	0x0000
 23fcd94:	1007a448 	.word	0x1007a448
 23fcd98:	0000000c 	.word	0x0000000c

023fcd9c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fcd9c:	b509      	push	{r0, r3, lr}
 23fcd9e:	4804      	ldr	r0, [pc, #16]	; (23fcdb0 <HAL_USB_USART_Init+0x14>)
 23fcda0:	6800      	ldr	r0, [r0, #0]
 23fcda2:	4b04      	ldr	r3, [pc, #16]	; (23fcdb4 <HAL_USB_USART_Init+0x18>)
 23fcda4:	4403      	add	r3, r0
 23fcda6:	681b      	ldr	r3, [r3, #0]
 23fcda8:	681b      	ldr	r3, [r3, #0]
 23fcdaa:	9302      	str	r3, [sp, #8]
 23fcdac:	bd09      	pop	{r0, r3, pc}
 23fcdae:	0000      	.short	0x0000
 23fcdb0:	1007a448 	.word	0x1007a448
 23fcdb4:	00000034 	.word	0x00000034

023fcdb8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fcdb8:	b509      	push	{r0, r3, lr}
 23fcdba:	4804      	ldr	r0, [pc, #16]	; (23fcdcc <HAL_USB_USART_Begin+0x14>)
 23fcdbc:	6800      	ldr	r0, [r0, #0]
 23fcdbe:	4b04      	ldr	r3, [pc, #16]	; (23fcdd0 <HAL_USB_USART_Begin+0x18>)
 23fcdc0:	4403      	add	r3, r0
 23fcdc2:	681b      	ldr	r3, [r3, #0]
 23fcdc4:	685b      	ldr	r3, [r3, #4]
 23fcdc6:	9302      	str	r3, [sp, #8]
 23fcdc8:	bd09      	pop	{r0, r3, pc}
 23fcdca:	0000      	.short	0x0000
 23fcdcc:	1007a448 	.word	0x1007a448
 23fcdd0:	00000034 	.word	0x00000034

023fcdd4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fcdd4:	b509      	push	{r0, r3, lr}
 23fcdd6:	4804      	ldr	r0, [pc, #16]	; (23fcde8 <HAL_USB_USART_End+0x14>)
 23fcdd8:	6800      	ldr	r0, [r0, #0]
 23fcdda:	4b04      	ldr	r3, [pc, #16]	; (23fcdec <HAL_USB_USART_End+0x18>)
 23fcddc:	4403      	add	r3, r0
 23fcdde:	681b      	ldr	r3, [r3, #0]
 23fcde0:	689b      	ldr	r3, [r3, #8]
 23fcde2:	9302      	str	r3, [sp, #8]
 23fcde4:	bd09      	pop	{r0, r3, pc}
 23fcde6:	0000      	.short	0x0000
 23fcde8:	1007a448 	.word	0x1007a448
 23fcdec:	00000034 	.word	0x00000034

023fcdf0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fcdf0:	b509      	push	{r0, r3, lr}
 23fcdf2:	4804      	ldr	r0, [pc, #16]	; (23fce04 <HAL_USB_USART_Available_Data+0x14>)
 23fcdf4:	6800      	ldr	r0, [r0, #0]
 23fcdf6:	4b04      	ldr	r3, [pc, #16]	; (23fce08 <HAL_USB_USART_Available_Data+0x18>)
 23fcdf8:	4403      	add	r3, r0
 23fcdfa:	681b      	ldr	r3, [r3, #0]
 23fcdfc:	691b      	ldr	r3, [r3, #16]
 23fcdfe:	9302      	str	r3, [sp, #8]
 23fce00:	bd09      	pop	{r0, r3, pc}
 23fce02:	0000      	.short	0x0000
 23fce04:	1007a448 	.word	0x1007a448
 23fce08:	00000034 	.word	0x00000034

023fce0c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fce0c:	b509      	push	{r0, r3, lr}
 23fce0e:	4804      	ldr	r0, [pc, #16]	; (23fce20 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fce10:	6800      	ldr	r0, [r0, #0]
 23fce12:	4b04      	ldr	r3, [pc, #16]	; (23fce24 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fce14:	4403      	add	r3, r0
 23fce16:	681b      	ldr	r3, [r3, #0]
 23fce18:	695b      	ldr	r3, [r3, #20]
 23fce1a:	9302      	str	r3, [sp, #8]
 23fce1c:	bd09      	pop	{r0, r3, pc}
 23fce1e:	0000      	.short	0x0000
 23fce20:	1007a448 	.word	0x1007a448
 23fce24:	00000034 	.word	0x00000034

023fce28 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fce28:	b509      	push	{r0, r3, lr}
 23fce2a:	4804      	ldr	r0, [pc, #16]	; (23fce3c <HAL_USB_USART_Receive_Data+0x14>)
 23fce2c:	6800      	ldr	r0, [r0, #0]
 23fce2e:	4b04      	ldr	r3, [pc, #16]	; (23fce40 <HAL_USB_USART_Receive_Data+0x18>)
 23fce30:	4403      	add	r3, r0
 23fce32:	681b      	ldr	r3, [r3, #0]
 23fce34:	699b      	ldr	r3, [r3, #24]
 23fce36:	9302      	str	r3, [sp, #8]
 23fce38:	bd09      	pop	{r0, r3, pc}
 23fce3a:	0000      	.short	0x0000
 23fce3c:	1007a448 	.word	0x1007a448
 23fce40:	00000034 	.word	0x00000034

023fce44 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fce44:	b509      	push	{r0, r3, lr}
 23fce46:	4804      	ldr	r0, [pc, #16]	; (23fce58 <HAL_USB_USART_Send_Data+0x14>)
 23fce48:	6800      	ldr	r0, [r0, #0]
 23fce4a:	4b04      	ldr	r3, [pc, #16]	; (23fce5c <HAL_USB_USART_Send_Data+0x18>)
 23fce4c:	4403      	add	r3, r0
 23fce4e:	681b      	ldr	r3, [r3, #0]
 23fce50:	69db      	ldr	r3, [r3, #28]
 23fce52:	9302      	str	r3, [sp, #8]
 23fce54:	bd09      	pop	{r0, r3, pc}
 23fce56:	0000      	.short	0x0000
 23fce58:	1007a448 	.word	0x1007a448
 23fce5c:	00000034 	.word	0x00000034

023fce60 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fce60:	b509      	push	{r0, r3, lr}
 23fce62:	4804      	ldr	r0, [pc, #16]	; (23fce74 <HAL_USB_USART_Flush_Data+0x14>)
 23fce64:	6800      	ldr	r0, [r0, #0]
 23fce66:	4b04      	ldr	r3, [pc, #16]	; (23fce78 <HAL_USB_USART_Flush_Data+0x18>)
 23fce68:	4403      	add	r3, r0
 23fce6a:	681b      	ldr	r3, [r3, #0]
 23fce6c:	6a1b      	ldr	r3, [r3, #32]
 23fce6e:	9302      	str	r3, [sp, #8]
 23fce70:	bd09      	pop	{r0, r3, pc}
 23fce72:	0000      	.short	0x0000
 23fce74:	1007a448 	.word	0x1007a448
 23fce78:	00000034 	.word	0x00000034

023fce7c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fce7c:	b509      	push	{r0, r3, lr}
 23fce7e:	4804      	ldr	r0, [pc, #16]	; (23fce90 <panic_+0x14>)
 23fce80:	6800      	ldr	r0, [r0, #0]
 23fce82:	4b04      	ldr	r3, [pc, #16]	; (23fce94 <panic_+0x18>)
 23fce84:	4403      	add	r3, r0
 23fce86:	681b      	ldr	r3, [r3, #0]
 23fce88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fce8a:	9302      	str	r3, [sp, #8]
 23fce8c:	bd09      	pop	{r0, r3, pc}
 23fce8e:	0000      	.short	0x0000
 23fce90:	1007a448 	.word	0x1007a448
 23fce94:	00000048 	.word	0x00000048

023fce98 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fce98:	b509      	push	{r0, r3, lr}
 23fce9a:	4804      	ldr	r0, [pc, #16]	; (23fceac <log_message_v+0x14>)
 23fce9c:	6800      	ldr	r0, [r0, #0]
 23fce9e:	4b04      	ldr	r3, [pc, #16]	; (23fceb0 <log_message_v+0x18>)
 23fcea0:	4403      	add	r3, r0
 23fcea2:	681b      	ldr	r3, [r3, #0]
 23fcea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fcea6:	9302      	str	r3, [sp, #8]
 23fcea8:	bd09      	pop	{r0, r3, pc}
 23fceaa:	0000      	.short	0x0000
 23fceac:	1007a448 	.word	0x1007a448
 23fceb0:	00000048 	.word	0x00000048

023fceb4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fceb4:	b509      	push	{r0, r3, lr}
 23fceb6:	4804      	ldr	r0, [pc, #16]	; (23fcec8 <log_level_name+0x14>)
 23fceb8:	6800      	ldr	r0, [r0, #0]
 23fceba:	4b04      	ldr	r3, [pc, #16]	; (23fcecc <log_level_name+0x18>)
 23fcebc:	4403      	add	r3, r0
 23fcebe:	681b      	ldr	r3, [r3, #0]
 23fcec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fcec2:	9302      	str	r3, [sp, #8]
 23fcec4:	bd09      	pop	{r0, r3, pc}
 23fcec6:	0000      	.short	0x0000
 23fcec8:	1007a448 	.word	0x1007a448
 23fcecc:	00000048 	.word	0x00000048

023fced0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fced0:	b509      	push	{r0, r3, lr}
 23fced2:	4804      	ldr	r0, [pc, #16]	; (23fcee4 <log_set_callbacks+0x14>)
 23fced4:	6800      	ldr	r0, [r0, #0]
 23fced6:	4b04      	ldr	r3, [pc, #16]	; (23fcee8 <log_set_callbacks+0x18>)
 23fced8:	4403      	add	r3, r0
 23fceda:	681b      	ldr	r3, [r3, #0]
 23fcedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fcede:	9302      	str	r3, [sp, #8]
 23fcee0:	bd09      	pop	{r0, r3, pc}
 23fcee2:	0000      	.short	0x0000
 23fcee4:	1007a448 	.word	0x1007a448
 23fcee8:	00000048 	.word	0x00000048

023fceec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fceec:	b509      	push	{r0, r3, lr}
 23fceee:	4804      	ldr	r0, [pc, #16]	; (23fcf00 <set_system_mode+0x14>)
 23fcef0:	6800      	ldr	r0, [r0, #0]
 23fcef2:	4b04      	ldr	r3, [pc, #16]	; (23fcf04 <set_system_mode+0x18>)
 23fcef4:	4403      	add	r3, r0
 23fcef6:	681b      	ldr	r3, [r3, #0]
 23fcef8:	685b      	ldr	r3, [r3, #4]
 23fcefa:	9302      	str	r3, [sp, #8]
 23fcefc:	bd09      	pop	{r0, r3, pc}
 23fcefe:	0000      	.short	0x0000
 23fcf00:	1007a448 	.word	0x1007a448
 23fcf04:	00000008 	.word	0x00000008

023fcf08 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fcf08:	b509      	push	{r0, r3, lr}
 23fcf0a:	4804      	ldr	r0, [pc, #16]	; (23fcf1c <system_delay_ms+0x14>)
 23fcf0c:	6800      	ldr	r0, [r0, #0]
 23fcf0e:	4b04      	ldr	r3, [pc, #16]	; (23fcf20 <system_delay_ms+0x18>)
 23fcf10:	4403      	add	r3, r0
 23fcf12:	681b      	ldr	r3, [r3, #0]
 23fcf14:	695b      	ldr	r3, [r3, #20]
 23fcf16:	9302      	str	r3, [sp, #8]
 23fcf18:	bd09      	pop	{r0, r3, pc}
 23fcf1a:	0000      	.short	0x0000
 23fcf1c:	1007a448 	.word	0x1007a448
 23fcf20:	00000008 	.word	0x00000008

023fcf24 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
 23fcf24:	b509      	push	{r0, r3, lr}
 23fcf26:	4804      	ldr	r0, [pc, #16]	; (23fcf38 <system_subscribe_event+0x14>)
 23fcf28:	6800      	ldr	r0, [r0, #0]
 23fcf2a:	4b04      	ldr	r3, [pc, #16]	; (23fcf3c <system_subscribe_event+0x18>)
 23fcf2c:	4403      	add	r3, r0
 23fcf2e:	681b      	ldr	r3, [r3, #0]
 23fcf30:	6a1b      	ldr	r3, [r3, #32]
 23fcf32:	9302      	str	r3, [sp, #8]
 23fcf34:	bd09      	pop	{r0, r3, pc}
 23fcf36:	0000      	.short	0x0000
 23fcf38:	1007a448 	.word	0x1007a448
 23fcf3c:	00000008 	.word	0x00000008

023fcf40 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fcf40:	b509      	push	{r0, r3, lr}
 23fcf42:	4804      	ldr	r0, [pc, #16]	; (23fcf54 <system_thread_set_state+0x14>)
 23fcf44:	6800      	ldr	r0, [r0, #0]
 23fcf46:	4b04      	ldr	r3, [pc, #16]	; (23fcf58 <system_thread_set_state+0x18>)
 23fcf48:	4403      	add	r3, r0
 23fcf4a:	681b      	ldr	r3, [r3, #0]
 23fcf4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcf4e:	9302      	str	r3, [sp, #8]
 23fcf50:	bd09      	pop	{r0, r3, pc}
 23fcf52:	0000      	.short	0x0000
 23fcf54:	1007a448 	.word	0x1007a448
 23fcf58:	00000008 	.word	0x00000008

023fcf5c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fcf5c:	b509      	push	{r0, r3, lr}
 23fcf5e:	4804      	ldr	r0, [pc, #16]	; (23fcf70 <system_ctrl_set_app_request_handler+0x14>)
 23fcf60:	6800      	ldr	r0, [r0, #0]
 23fcf62:	4b04      	ldr	r3, [pc, #16]	; (23fcf74 <system_ctrl_set_app_request_handler+0x18>)
 23fcf64:	4403      	add	r3, r0
 23fcf66:	681b      	ldr	r3, [r3, #0]
 23fcf68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fcf6c:	9302      	str	r3, [sp, #8]
 23fcf6e:	bd09      	pop	{r0, r3, pc}
 23fcf70:	1007a448 	.word	0x1007a448
 23fcf74:	00000008 	.word	0x00000008

023fcf78 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fcf78:	b509      	push	{r0, r3, lr}
 23fcf7a:	4804      	ldr	r0, [pc, #16]	; (23fcf8c <system_ctrl_set_result+0x14>)
 23fcf7c:	6800      	ldr	r0, [r0, #0]
 23fcf7e:	4b04      	ldr	r3, [pc, #16]	; (23fcf90 <system_ctrl_set_result+0x18>)
 23fcf80:	4403      	add	r3, r0
 23fcf82:	681b      	ldr	r3, [r3, #0]
 23fcf84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fcf88:	9302      	str	r3, [sp, #8]
 23fcf8a:	bd09      	pop	{r0, r3, pc}
 23fcf8c:	1007a448 	.word	0x1007a448
 23fcf90:	00000008 	.word	0x00000008

023fcf94 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fcf94:	b509      	push	{r0, r3, lr}
 23fcf96:	4804      	ldr	r0, [pc, #16]	; (23fcfa8 <network_connect+0x14>)
 23fcf98:	6800      	ldr	r0, [r0, #0]
 23fcf9a:	4b04      	ldr	r3, [pc, #16]	; (23fcfac <network_connect+0x18>)
 23fcf9c:	4403      	add	r3, r0
 23fcf9e:	681b      	ldr	r3, [r3, #0]
 23fcfa0:	685b      	ldr	r3, [r3, #4]
 23fcfa2:	9302      	str	r3, [sp, #8]
 23fcfa4:	bd09      	pop	{r0, r3, pc}
 23fcfa6:	0000      	.short	0x0000
 23fcfa8:	1007a448 	.word	0x1007a448
 23fcfac:	00000028 	.word	0x00000028

023fcfb0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fcfb0:	b509      	push	{r0, r3, lr}
 23fcfb2:	4804      	ldr	r0, [pc, #16]	; (23fcfc4 <network_connecting+0x14>)
 23fcfb4:	6800      	ldr	r0, [r0, #0]
 23fcfb6:	4b04      	ldr	r3, [pc, #16]	; (23fcfc8 <network_connecting+0x18>)
 23fcfb8:	4403      	add	r3, r0
 23fcfba:	681b      	ldr	r3, [r3, #0]
 23fcfbc:	689b      	ldr	r3, [r3, #8]
 23fcfbe:	9302      	str	r3, [sp, #8]
 23fcfc0:	bd09      	pop	{r0, r3, pc}
 23fcfc2:	0000      	.short	0x0000
 23fcfc4:	1007a448 	.word	0x1007a448
 23fcfc8:	00000028 	.word	0x00000028

023fcfcc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fcfcc:	b509      	push	{r0, r3, lr}
 23fcfce:	4804      	ldr	r0, [pc, #16]	; (23fcfe0 <network_disconnect+0x14>)
 23fcfd0:	6800      	ldr	r0, [r0, #0]
 23fcfd2:	4b04      	ldr	r3, [pc, #16]	; (23fcfe4 <network_disconnect+0x18>)
 23fcfd4:	4403      	add	r3, r0
 23fcfd6:	681b      	ldr	r3, [r3, #0]
 23fcfd8:	68db      	ldr	r3, [r3, #12]
 23fcfda:	9302      	str	r3, [sp, #8]
 23fcfdc:	bd09      	pop	{r0, r3, pc}
 23fcfde:	0000      	.short	0x0000
 23fcfe0:	1007a448 	.word	0x1007a448
 23fcfe4:	00000028 	.word	0x00000028

023fcfe8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fcfe8:	b509      	push	{r0, r3, lr}
 23fcfea:	4804      	ldr	r0, [pc, #16]	; (23fcffc <network_ready+0x14>)
 23fcfec:	6800      	ldr	r0, [r0, #0]
 23fcfee:	4b04      	ldr	r3, [pc, #16]	; (23fd000 <network_ready+0x18>)
 23fcff0:	4403      	add	r3, r0
 23fcff2:	681b      	ldr	r3, [r3, #0]
 23fcff4:	691b      	ldr	r3, [r3, #16]
 23fcff6:	9302      	str	r3, [sp, #8]
 23fcff8:	bd09      	pop	{r0, r3, pc}
 23fcffa:	0000      	.short	0x0000
 23fcffc:	1007a448 	.word	0x1007a448
 23fd000:	00000028 	.word	0x00000028

023fd004 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd004:	b509      	push	{r0, r3, lr}
 23fd006:	4804      	ldr	r0, [pc, #16]	; (23fd018 <network_on+0x14>)
 23fd008:	6800      	ldr	r0, [r0, #0]
 23fd00a:	4b04      	ldr	r3, [pc, #16]	; (23fd01c <network_on+0x18>)
 23fd00c:	4403      	add	r3, r0
 23fd00e:	681b      	ldr	r3, [r3, #0]
 23fd010:	695b      	ldr	r3, [r3, #20]
 23fd012:	9302      	str	r3, [sp, #8]
 23fd014:	bd09      	pop	{r0, r3, pc}
 23fd016:	0000      	.short	0x0000
 23fd018:	1007a448 	.word	0x1007a448
 23fd01c:	00000028 	.word	0x00000028

023fd020 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd020:	b509      	push	{r0, r3, lr}
 23fd022:	4804      	ldr	r0, [pc, #16]	; (23fd034 <network_off+0x14>)
 23fd024:	6800      	ldr	r0, [r0, #0]
 23fd026:	4b04      	ldr	r3, [pc, #16]	; (23fd038 <network_off+0x18>)
 23fd028:	4403      	add	r3, r0
 23fd02a:	681b      	ldr	r3, [r3, #0]
 23fd02c:	699b      	ldr	r3, [r3, #24]
 23fd02e:	9302      	str	r3, [sp, #8]
 23fd030:	bd09      	pop	{r0, r3, pc}
 23fd032:	0000      	.short	0x0000
 23fd034:	1007a448 	.word	0x1007a448
 23fd038:	00000028 	.word	0x00000028

023fd03c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fd03c:	b509      	push	{r0, r3, lr}
 23fd03e:	4804      	ldr	r0, [pc, #16]	; (23fd050 <network_listen+0x14>)
 23fd040:	6800      	ldr	r0, [r0, #0]
 23fd042:	4b04      	ldr	r3, [pc, #16]	; (23fd054 <network_listen+0x18>)
 23fd044:	4403      	add	r3, r0
 23fd046:	681b      	ldr	r3, [r3, #0]
 23fd048:	69db      	ldr	r3, [r3, #28]
 23fd04a:	9302      	str	r3, [sp, #8]
 23fd04c:	bd09      	pop	{r0, r3, pc}
 23fd04e:	0000      	.short	0x0000
 23fd050:	1007a448 	.word	0x1007a448
 23fd054:	00000028 	.word	0x00000028

023fd058 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fd058:	b509      	push	{r0, r3, lr}
 23fd05a:	4804      	ldr	r0, [pc, #16]	; (23fd06c <network_listening+0x14>)
 23fd05c:	6800      	ldr	r0, [r0, #0]
 23fd05e:	4b04      	ldr	r3, [pc, #16]	; (23fd070 <network_listening+0x18>)
 23fd060:	4403      	add	r3, r0
 23fd062:	681b      	ldr	r3, [r3, #0]
 23fd064:	6a1b      	ldr	r3, [r3, #32]
 23fd066:	9302      	str	r3, [sp, #8]
 23fd068:	bd09      	pop	{r0, r3, pc}
 23fd06a:	0000      	.short	0x0000
 23fd06c:	1007a448 	.word	0x1007a448
 23fd070:	00000028 	.word	0x00000028

023fd074 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fd074:	b509      	push	{r0, r3, lr}
 23fd076:	4804      	ldr	r0, [pc, #16]	; (23fd088 <network_set_listen_timeout+0x14>)
 23fd078:	6800      	ldr	r0, [r0, #0]
 23fd07a:	4b04      	ldr	r3, [pc, #16]	; (23fd08c <network_set_listen_timeout+0x18>)
 23fd07c:	4403      	add	r3, r0
 23fd07e:	681b      	ldr	r3, [r3, #0]
 23fd080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd082:	9302      	str	r3, [sp, #8]
 23fd084:	bd09      	pop	{r0, r3, pc}
 23fd086:	0000      	.short	0x0000
 23fd088:	1007a448 	.word	0x1007a448
 23fd08c:	00000028 	.word	0x00000028

023fd090 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fd090:	b509      	push	{r0, r3, lr}
 23fd092:	4804      	ldr	r0, [pc, #16]	; (23fd0a4 <network_get_listen_timeout+0x14>)
 23fd094:	6800      	ldr	r0, [r0, #0]
 23fd096:	4b04      	ldr	r3, [pc, #16]	; (23fd0a8 <network_get_listen_timeout+0x18>)
 23fd098:	4403      	add	r3, r0
 23fd09a:	681b      	ldr	r3, [r3, #0]
 23fd09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd09e:	9302      	str	r3, [sp, #8]
 23fd0a0:	bd09      	pop	{r0, r3, pc}
 23fd0a2:	0000      	.short	0x0000
 23fd0a4:	1007a448 	.word	0x1007a448
 23fd0a8:	00000028 	.word	0x00000028

023fd0ac <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fd0ac:	b509      	push	{r0, r3, lr}
 23fd0ae:	4804      	ldr	r0, [pc, #16]	; (23fd0c0 <network_is_on+0x14>)
 23fd0b0:	6800      	ldr	r0, [r0, #0]
 23fd0b2:	4b04      	ldr	r3, [pc, #16]	; (23fd0c4 <network_is_on+0x18>)
 23fd0b4:	4403      	add	r3, r0
 23fd0b6:	681b      	ldr	r3, [r3, #0]
 23fd0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd0ba:	9302      	str	r3, [sp, #8]
 23fd0bc:	bd09      	pop	{r0, r3, pc}
 23fd0be:	0000      	.short	0x0000
 23fd0c0:	1007a448 	.word	0x1007a448
 23fd0c4:	00000028 	.word	0x00000028

023fd0c8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fd0c8:	b509      	push	{r0, r3, lr}
 23fd0ca:	4804      	ldr	r0, [pc, #16]	; (23fd0dc <network_is_off+0x14>)
 23fd0cc:	6800      	ldr	r0, [r0, #0]
 23fd0ce:	4b04      	ldr	r3, [pc, #16]	; (23fd0e0 <network_is_off+0x18>)
 23fd0d0:	4403      	add	r3, r0
 23fd0d2:	681b      	ldr	r3, [r3, #0]
 23fd0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd0d6:	9302      	str	r3, [sp, #8]
 23fd0d8:	bd09      	pop	{r0, r3, pc}
 23fd0da:	0000      	.short	0x0000
 23fd0dc:	1007a448 	.word	0x1007a448
 23fd0e0:	00000028 	.word	0x00000028

023fd0e4 <network_preferred>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_preferred, network_handle_t(network_handle_t, bool, void*))
 23fd0e4:	b509      	push	{r0, r3, lr}
 23fd0e6:	4804      	ldr	r0, [pc, #16]	; (23fd0f8 <network_preferred+0x14>)
 23fd0e8:	6800      	ldr	r0, [r0, #0]
 23fd0ea:	4b04      	ldr	r3, [pc, #16]	; (23fd0fc <network_preferred+0x18>)
 23fd0ec:	4403      	add	r3, r0
 23fd0ee:	681b      	ldr	r3, [r3, #0]
 23fd0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fd0f2:	9302      	str	r3, [sp, #8]
 23fd0f4:	bd09      	pop	{r0, r3, pc}
 23fd0f6:	0000      	.short	0x0000
 23fd0f8:	1007a448 	.word	0x1007a448
 23fd0fc:	00000028 	.word	0x00000028

023fd100 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23fd100:	b509      	push	{r0, r3, lr}
 23fd102:	4804      	ldr	r0, [pc, #16]	; (23fd114 <network_is_preferred+0x14>)
 23fd104:	6800      	ldr	r0, [r0, #0]
 23fd106:	4b04      	ldr	r3, [pc, #16]	; (23fd118 <network_is_preferred+0x18>)
 23fd108:	4403      	add	r3, r0
 23fd10a:	681b      	ldr	r3, [r3, #0]
 23fd10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fd10e:	9302      	str	r3, [sp, #8]
 23fd110:	bd09      	pop	{r0, r3, pc}
 23fd112:	0000      	.short	0x0000
 23fd114:	1007a448 	.word	0x1007a448
 23fd118:	00000028 	.word	0x00000028

023fd11c <spark_cloud_flag_connect>:
DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 23fd11c:	b509      	push	{r0, r3, lr}
 23fd11e:	4804      	ldr	r0, [pc, #16]	; (23fd130 <spark_cloud_flag_connect+0x14>)
 23fd120:	6800      	ldr	r0, [r0, #0]
 23fd122:	4b04      	ldr	r3, [pc, #16]	; (23fd134 <spark_cloud_flag_connect+0x18>)
 23fd124:	4403      	add	r3, r0
 23fd126:	681b      	ldr	r3, [r3, #0]
 23fd128:	68db      	ldr	r3, [r3, #12]
 23fd12a:	9302      	str	r3, [sp, #8]
 23fd12c:	bd09      	pop	{r0, r3, pc}
 23fd12e:	0000      	.short	0x0000
 23fd130:	1007a448 	.word	0x1007a448
 23fd134:	0000002c 	.word	0x0000002c

023fd138 <spark_set_connection_property>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
 23fd138:	b509      	push	{r0, r3, lr}
 23fd13a:	4804      	ldr	r0, [pc, #16]	; (23fd14c <spark_set_connection_property+0x14>)
 23fd13c:	6800      	ldr	r0, [r0, #0]
 23fd13e:	4b04      	ldr	r3, [pc, #16]	; (23fd150 <spark_set_connection_property+0x18>)
 23fd140:	4403      	add	r3, r0
 23fd142:	681b      	ldr	r3, [r3, #0]
 23fd144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fd146:	9302      	str	r3, [sp, #8]
 23fd148:	bd09      	pop	{r0, r3, pc}
 23fd14a:	0000      	.short	0x0000
 23fd14c:	1007a448 	.word	0x1007a448
 23fd150:	0000002c 	.word	0x0000002c

023fd154 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fd154:	b509      	push	{r0, r3, lr}
 23fd156:	4804      	ldr	r0, [pc, #16]	; (23fd168 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fd158:	6800      	ldr	r0, [r0, #0]
 23fd15a:	4b04      	ldr	r3, [pc, #16]	; (23fd16c <spark_set_random_seed_from_cloud_handler+0x18>)
 23fd15c:	4403      	add	r3, r0
 23fd15e:	681b      	ldr	r3, [r3, #0]
 23fd160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd162:	9302      	str	r3, [sp, #8]
 23fd164:	bd09      	pop	{r0, r3, pc}
 23fd166:	0000      	.short	0x0000
 23fd168:	1007a448 	.word	0x1007a448
 23fd16c:	0000002c 	.word	0x0000002c

023fd170 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fd170:	b509      	push	{r0, r3, lr}
 23fd172:	4804      	ldr	r0, [pc, #16]	; (23fd184 <malloc+0x14>)
 23fd174:	6800      	ldr	r0, [r0, #0]
 23fd176:	4b04      	ldr	r3, [pc, #16]	; (23fd188 <malloc+0x18>)
 23fd178:	4403      	add	r3, r0
 23fd17a:	681b      	ldr	r3, [r3, #0]
 23fd17c:	681b      	ldr	r3, [r3, #0]
 23fd17e:	9302      	str	r3, [sp, #8]
 23fd180:	bd09      	pop	{r0, r3, pc}
 23fd182:	0000      	.short	0x0000
 23fd184:	1007a448 	.word	0x1007a448
 23fd188:	00000004 	.word	0x00000004

023fd18c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fd18c:	b509      	push	{r0, r3, lr}
 23fd18e:	4804      	ldr	r0, [pc, #16]	; (23fd1a0 <free+0x14>)
 23fd190:	6800      	ldr	r0, [r0, #0]
 23fd192:	4b04      	ldr	r3, [pc, #16]	; (23fd1a4 <free+0x18>)
 23fd194:	4403      	add	r3, r0
 23fd196:	681b      	ldr	r3, [r3, #0]
 23fd198:	685b      	ldr	r3, [r3, #4]
 23fd19a:	9302      	str	r3, [sp, #8]
 23fd19c:	bd09      	pop	{r0, r3, pc}
 23fd19e:	0000      	.short	0x0000
 23fd1a0:	1007a448 	.word	0x1007a448
 23fd1a4:	00000004 	.word	0x00000004

023fd1a8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fd1a8:	b509      	push	{r0, r3, lr}
 23fd1aa:	4804      	ldr	r0, [pc, #16]	; (23fd1bc <realloc+0x14>)
 23fd1ac:	6800      	ldr	r0, [r0, #0]
 23fd1ae:	4b04      	ldr	r3, [pc, #16]	; (23fd1c0 <realloc+0x18>)
 23fd1b0:	4403      	add	r3, r0
 23fd1b2:	681b      	ldr	r3, [r3, #0]
 23fd1b4:	689b      	ldr	r3, [r3, #8]
 23fd1b6:	9302      	str	r3, [sp, #8]
 23fd1b8:	bd09      	pop	{r0, r3, pc}
 23fd1ba:	0000      	.short	0x0000
 23fd1bc:	1007a448 	.word	0x1007a448
 23fd1c0:	00000004 	.word	0x00000004

023fd1c4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fd1c4:	b509      	push	{r0, r3, lr}
 23fd1c6:	4804      	ldr	r0, [pc, #16]	; (23fd1d8 <vsnprintf+0x14>)
 23fd1c8:	6800      	ldr	r0, [r0, #0]
 23fd1ca:	4b04      	ldr	r3, [pc, #16]	; (23fd1dc <vsnprintf+0x18>)
 23fd1cc:	4403      	add	r3, r0
 23fd1ce:	681b      	ldr	r3, [r3, #0]
 23fd1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd1d2:	9302      	str	r3, [sp, #8]
 23fd1d4:	bd09      	pop	{r0, r3, pc}
 23fd1d6:	0000      	.short	0x0000
 23fd1d8:	1007a448 	.word	0x1007a448
 23fd1dc:	00000004 	.word	0x00000004

023fd1e0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fd1e0:	b509      	push	{r0, r3, lr}
 23fd1e2:	4804      	ldr	r0, [pc, #16]	; (23fd1f4 <abort+0x14>)
 23fd1e4:	6800      	ldr	r0, [r0, #0]
 23fd1e6:	4b04      	ldr	r3, [pc, #16]	; (23fd1f8 <abort+0x18>)
 23fd1e8:	4403      	add	r3, r0
 23fd1ea:	681b      	ldr	r3, [r3, #0]
 23fd1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd1ee:	9302      	str	r3, [sp, #8]
 23fd1f0:	bd09      	pop	{r0, r3, pc}
 23fd1f2:	0000      	.short	0x0000
 23fd1f4:	1007a448 	.word	0x1007a448
 23fd1f8:	00000004 	.word	0x00000004

023fd1fc <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fd1fc:	b509      	push	{r0, r3, lr}
 23fd1fe:	4804      	ldr	r0, [pc, #16]	; (23fd210 <__errno+0x14>)
 23fd200:	6800      	ldr	r0, [r0, #0]
 23fd202:	4b04      	ldr	r3, [pc, #16]	; (23fd214 <__errno+0x18>)
 23fd204:	4403      	add	r3, r0
 23fd206:	681b      	ldr	r3, [r3, #0]
 23fd208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd20a:	9302      	str	r3, [sp, #8]
 23fd20c:	bd09      	pop	{r0, r3, pc}
 23fd20e:	0000      	.short	0x0000
 23fd210:	1007a448 	.word	0x1007a448
 23fd214:	00000004 	.word	0x00000004

023fd218 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fd218:	b509      	push	{r0, r3, lr}
 23fd21a:	4804      	ldr	r0, [pc, #16]	; (23fd22c <__assert_func+0x14>)
 23fd21c:	6800      	ldr	r0, [r0, #0]
 23fd21e:	4b04      	ldr	r3, [pc, #16]	; (23fd230 <__assert_func+0x18>)
 23fd220:	4403      	add	r3, r0
 23fd222:	681b      	ldr	r3, [r3, #0]
 23fd224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd226:	9302      	str	r3, [sp, #8]
 23fd228:	bd09      	pop	{r0, r3, pc}
 23fd22a:	0000      	.short	0x0000
 23fd22c:	1007a448 	.word	0x1007a448
 23fd230:	00000004 	.word	0x00000004

023fd234 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fd234:	b509      	push	{r0, r3, lr}
 23fd236:	4804      	ldr	r0, [pc, #16]	; (23fd248 <newlib_impure_ptr_callback+0x14>)
 23fd238:	6800      	ldr	r0, [r0, #0]
 23fd23a:	4b04      	ldr	r3, [pc, #16]	; (23fd24c <newlib_impure_ptr_callback+0x18>)
 23fd23c:	4403      	add	r3, r0
 23fd23e:	681b      	ldr	r3, [r3, #0]
 23fd240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd242:	9302      	str	r3, [sp, #8]
 23fd244:	bd09      	pop	{r0, r3, pc}
 23fd246:	0000      	.short	0x0000
 23fd248:	1007a448 	.word	0x1007a448
 23fd24c:	00000004 	.word	0x00000004

023fd250 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd250:	2200      	movs	r2, #0
 23fd252:	6840      	ldr	r0, [r0, #4]
 23fd254:	4611      	mov	r1, r2
 23fd256:	f7ff beff 	b.w	23fd058 <network_listening>

023fd25a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd25a:	2200      	movs	r2, #0
 23fd25c:	6840      	ldr	r0, [r0, #4]
 23fd25e:	4611      	mov	r1, r2
 23fd260:	f7ff bf16 	b.w	23fd090 <network_get_listen_timeout>

023fd264 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd264:	2200      	movs	r2, #0
 23fd266:	6840      	ldr	r0, [r0, #4]
 23fd268:	f7ff bf04 	b.w	23fd074 <network_set_listen_timeout>

023fd26c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd26c:	2200      	movs	r2, #0
 23fd26e:	6840      	ldr	r0, [r0, #4]
 23fd270:	f081 0101 	eor.w	r1, r1, #1
 23fd274:	f7ff bee2 	b.w	23fd03c <network_listen>

023fd278 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd278:	2300      	movs	r3, #0
 23fd27a:	6840      	ldr	r0, [r0, #4]
 23fd27c:	461a      	mov	r2, r3
 23fd27e:	4619      	mov	r1, r3
 23fd280:	f7ff bece 	b.w	23fd020 <network_off>

023fd284 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd284:	2300      	movs	r3, #0
 23fd286:	6840      	ldr	r0, [r0, #4]
 23fd288:	461a      	mov	r2, r3
 23fd28a:	4619      	mov	r1, r3
 23fd28c:	f7ff beba 	b.w	23fd004 <network_on>

023fd290 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd290:	2200      	movs	r2, #0
 23fd292:	6840      	ldr	r0, [r0, #4]
 23fd294:	4611      	mov	r1, r2
 23fd296:	f7ff bea7 	b.w	23fcfe8 <network_ready>

023fd29a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd29a:	2200      	movs	r2, #0
 23fd29c:	6840      	ldr	r0, [r0, #4]
 23fd29e:	4611      	mov	r1, r2
 23fd2a0:	f7ff be86 	b.w	23fcfb0 <network_connecting>

023fd2a4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd2a4:	2200      	movs	r2, #0
 23fd2a6:	2102      	movs	r1, #2
 23fd2a8:	6840      	ldr	r0, [r0, #4]
 23fd2aa:	f7ff be8f 	b.w	23fcfcc <network_disconnect>

023fd2ae <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd2ae:	2300      	movs	r3, #0
 23fd2b0:	6840      	ldr	r0, [r0, #4]
 23fd2b2:	461a      	mov	r2, r3
 23fd2b4:	f7ff be6e 	b.w	23fcf94 <network_connect>

023fd2b8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd2b8:	2203      	movs	r2, #3
 23fd2ba:	4b02      	ldr	r3, [pc, #8]	; (23fd2c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd2bc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd2be:	4a02      	ldr	r2, [pc, #8]	; (23fd2c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd2c0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd2c2:	4770      	bx	lr
 23fd2c4:	1007ae4c 	.word	0x1007ae4c
 23fd2c8:	023ffb88 	.word	0x023ffb88

023fd2cc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fd2cc:	b510      	push	{r4, lr}
 23fd2ce:	4604      	mov	r4, r0
 23fd2d0:	4608      	mov	r0, r1
{
    _spi = spi;
 23fd2d2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fd2d4:	f7ff fd1c 	bl	23fcd10 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd2d8:	2300      	movs	r3, #0
}
 23fd2da:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd2dc:	6063      	str	r3, [r4, #4]
}
 23fd2de:	bd10      	pop	{r4, pc}

023fd2e0 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
 23fd2e0:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
 23fd2e4:	1c53      	adds	r3, r2, #1
 23fd2e6:	d00b      	beq.n	23fd300 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 23fd2e8:	8843      	ldrh	r3, [r0, #2]
 23fd2ea:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 23fd2ec:	428b      	cmp	r3, r1
 23fd2ee:	d803      	bhi.n	23fd2f8 <_ZN5Servo17writeMicrosecondsEt+0x18>
 23fd2f0:	4288      	cmp	r0, r1
 23fd2f2:	4603      	mov	r3, r0
 23fd2f4:	bf28      	it	cs
 23fd2f6:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 23fd2f8:	4619      	mov	r1, r3
 23fd2fa:	b290      	uxth	r0, r2
 23fd2fc:	f7ff bd40 	b.w	23fcd80 <HAL_Servo_Write_Pulse_Width>
}
 23fd300:	4770      	bx	lr

023fd302 <_ZN5Servo5writeEi>:
{
 23fd302:	b513      	push	{r0, r1, r4, lr}
 23fd304:	4604      	mov	r4, r0
 23fd306:	4608      	mov	r0, r1
 23fd308:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 23fd30c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 23fd310:	4288      	cmp	r0, r1
 23fd312:	db10      	blt.n	23fd336 <_ZN5Servo5writeEi+0x34>
 23fd314:	4290      	cmp	r0, r2
 23fd316:	bfa8      	it	ge
 23fd318:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
 23fd31a:	88a3      	ldrh	r3, [r4, #4]
 23fd31c:	9300      	str	r3, [sp, #0]
 23fd31e:	8863      	ldrh	r3, [r4, #2]
 23fd320:	f001 f93c 	bl	23fe59c <_Z3mapiiiii>
 23fd324:	68e1      	ldr	r1, [r4, #12]
 23fd326:	4401      	add	r1, r0
 23fd328:	4620      	mov	r0, r4
 23fd32a:	b289      	uxth	r1, r1
}
 23fd32c:	b002      	add	sp, #8
 23fd32e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
 23fd332:	f7ff bfd5 	b.w	23fd2e0 <_ZN5Servo17writeMicrosecondsEt>
 23fd336:	4608      	mov	r0, r1
 23fd338:	e7ef      	b.n	23fd31a <_ZN5Servo5writeEi+0x18>
	...

023fd33c <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 23fd33c:	f44f 6316 	mov.w	r3, #2400	; 0x960
 23fd340:	4a03      	ldr	r2, [pc, #12]	; (23fd350 <_ZN5Servo11resetFieldsEv+0x14>)
 23fd342:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 23fd346:	23b4      	movs	r3, #180	; 0xb4
 23fd348:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
 23fd34a:	2300      	movs	r3, #0
 23fd34c:	60c3      	str	r3, [r0, #12]
}
 23fd34e:	4770      	bx	lr
 23fd350:	0220ffff 	.word	0x0220ffff

023fd354 <_ZN5ServoC1Ev>:
Servo::Servo()
 23fd354:	b508      	push	{r3, lr}
  this->resetFields();
 23fd356:	f7ff fff1 	bl	23fd33c <_ZN5Servo11resetFieldsEv>
}
 23fd35a:	bd08      	pop	{r3, pc}

023fd35c <_ZN5Servo6detachEv>:
{
 23fd35c:	b510      	push	{r4, lr}
 23fd35e:	4604      	mov	r4, r0
 23fd360:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
 23fd364:	1c43      	adds	r3, r0, #1
 23fd366:	d007      	beq.n	23fd378 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
 23fd368:	b280      	uxth	r0, r0
 23fd36a:	f7ff fcfb 	bl	23fcd64 <HAL_Servo_Detach>
  this->resetFields();
 23fd36e:	4620      	mov	r0, r4
 23fd370:	f7ff ffe4 	bl	23fd33c <_ZN5Servo11resetFieldsEv>
  return true;
 23fd374:	2001      	movs	r0, #1
}
 23fd376:	bd10      	pop	{r4, pc}
    return false;
 23fd378:	2000      	movs	r0, #0
 23fd37a:	e7fc      	b.n	23fd376 <_ZN5Servo6detachEv+0x1a>

023fd37c <_ZN5Servo6attachEtttss>:
{
 23fd37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd380:	460d      	mov	r5, r1
 23fd382:	4604      	mov	r4, r0
  if (hal_pin_validate_function(pin, PF_TIMER)!=PF_TIMER)
 23fd384:	2102      	movs	r1, #2
 23fd386:	4628      	mov	r0, r5
{
 23fd388:	4690      	mov	r8, r2
 23fd38a:	461f      	mov	r7, r3
  if (hal_pin_validate_function(pin, PF_TIMER)!=PF_TIMER)
 23fd38c:	f7ff fb2a 	bl	23fc9e4 <hal_pin_validate_function>
 23fd390:	2802      	cmp	r0, #2
 23fd392:	d003      	beq.n	23fd39c <_ZN5Servo6attachEtttss+0x20>
    return false;
 23fd394:	2600      	movs	r6, #0
}
 23fd396:	4630      	mov	r0, r6
 23fd398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
 23fd39c:	4628      	mov	r0, r5
 23fd39e:	f001 fe45 	bl	23ff02c <pinAvailable>
 23fd3a2:	4606      	mov	r6, r0
 23fd3a4:	2800      	cmp	r0, #0
 23fd3a6:	d0f5      	beq.n	23fd394 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
 23fd3a8:	f9b4 3000 	ldrsh.w	r3, [r4]
 23fd3ac:	3301      	adds	r3, #1
 23fd3ae:	d002      	beq.n	23fd3b6 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
 23fd3b0:	4620      	mov	r0, r4
 23fd3b2:	f7ff ffd3 	bl	23fd35c <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
 23fd3b6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  HAL_Servo_Attach(this->pin);
 23fd3ba:	4628      	mov	r0, r5
  this->minAngle = minAngle;
 23fd3bc:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 23fd3be:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
 23fd3c2:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
 23fd3c4:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 23fd3c8:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
 23fd3ca:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
 23fd3cc:	f7ff fcbc 	bl	23fcd48 <HAL_Servo_Attach>
  return true;
 23fd3d0:	e7e1      	b.n	23fd396 <_ZN5Servo6attachEtttss+0x1a>
	...

023fd3d4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fd3d4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fd3d6:	2000      	movs	r0, #0
 23fd3d8:	4b04      	ldr	r3, [pc, #16]	; (23fd3ec <_GLOBAL__sub_I_System+0x18>)
 23fd3da:	601a      	str	r2, [r3, #0]
 23fd3dc:	4b04      	ldr	r3, [pc, #16]	; (23fd3f0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fd3de:	4a05      	ldr	r2, [pc, #20]	; (23fd3f4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fd3e0:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fd3e4:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fd3e6:	f7ff bd81 	b.w	23fceec <set_system_mode>
 23fd3ea:	bf00      	nop
 23fd3ec:	1007ae60 	.word	0x1007ae60
 23fd3f0:	1007ae54 	.word	0x1007ae54
 23fd3f4:	ffff0000 	.word	0xffff0000

023fd3f8 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fd3f8:	b510      	push	{r4, lr}
 23fd3fa:	4604      	mov	r4, r0
{
    free(buffer);
 23fd3fc:	6800      	ldr	r0, [r0, #0]
 23fd3fe:	f7ff fec5 	bl	23fd18c <free>
}
 23fd402:	4620      	mov	r0, r4
 23fd404:	bd10      	pop	{r4, pc}

023fd406 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fd406:	b510      	push	{r4, lr}
 23fd408:	4604      	mov	r4, r0
    if (buffer) {
 23fd40a:	6800      	ldr	r0, [r0, #0]
 23fd40c:	b108      	cbz	r0, 23fd412 <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fd40e:	f7ff febd 	bl	23fd18c <free>
    }
    buffer = nullptr;
 23fd412:	2300      	movs	r3, #0
    capacity = len = 0;
 23fd414:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fd418:	6023      	str	r3, [r4, #0]
}
 23fd41a:	bd10      	pop	{r4, pc}

023fd41c <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fd41c:	b538      	push	{r3, r4, r5, lr}
 23fd41e:	4604      	mov	r4, r0
 23fd420:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fd422:	6800      	ldr	r0, [r0, #0]
 23fd424:	3101      	adds	r1, #1
 23fd426:	f7ff febf 	bl	23fd1a8 <realloc>
    if (newbuffer) {
 23fd42a:	b110      	cbz	r0, 23fd432 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
 23fd42c:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fd430:	2001      	movs	r0, #1
    }
    return 0;
}
 23fd432:	bd38      	pop	{r3, r4, r5, pc}

023fd434 <_ZN6String7reserveEj>:
{
 23fd434:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
 23fd436:	6803      	ldr	r3, [r0, #0]
{
 23fd438:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
 23fd43a:	b123      	cbz	r3, 23fd446 <_ZN6String7reserveEj+0x12>
 23fd43c:	6843      	ldr	r3, [r0, #4]
 23fd43e:	428b      	cmp	r3, r1
 23fd440:	d301      	bcc.n	23fd446 <_ZN6String7reserveEj+0x12>
 23fd442:	2001      	movs	r0, #1
}
 23fd444:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fd446:	4620      	mov	r0, r4
 23fd448:	f7ff ffe8 	bl	23fd41c <_ZN6String12changeBufferEj>
 23fd44c:	2800      	cmp	r0, #0
 23fd44e:	d0f9      	beq.n	23fd444 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fd450:	68a3      	ldr	r3, [r4, #8]
 23fd452:	2b00      	cmp	r3, #0
 23fd454:	d1f5      	bne.n	23fd442 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fd456:	6822      	ldr	r2, [r4, #0]
 23fd458:	7013      	strb	r3, [r2, #0]
 23fd45a:	e7f2      	b.n	23fd442 <_ZN6String7reserveEj+0xe>

023fd45c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fd45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd45e:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fd460:	4611      	mov	r1, r2
 23fd462:	9201      	str	r2, [sp, #4]
{
 23fd464:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fd466:	f7ff ffe5 	bl	23fd434 <_ZN6String7reserveEj>
 23fd46a:	9a01      	ldr	r2, [sp, #4]
 23fd46c:	b928      	cbnz	r0, 23fd47a <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fd46e:	4620      	mov	r0, r4
 23fd470:	f7ff ffc9 	bl	23fd406 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fd474:	4620      	mov	r0, r4
 23fd476:	b003      	add	sp, #12
 23fd478:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fd47a:	4629      	mov	r1, r5
    len = length;
 23fd47c:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fd47e:	6820      	ldr	r0, [r4, #0]
 23fd480:	f002 f8f0 	bl	23ff664 <memcpy>
    buffer[len] = 0;
 23fd484:	2100      	movs	r1, #0
 23fd486:	6822      	ldr	r2, [r4, #0]
 23fd488:	68a3      	ldr	r3, [r4, #8]
 23fd48a:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fd48c:	e7f2      	b.n	23fd474 <_ZN6String4copyEPKcj+0x18>

023fd48e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fd48e:	b538      	push	{r3, r4, r5, lr}
 23fd490:	4605      	mov	r5, r0
    if (buffer) {
 23fd492:	6800      	ldr	r0, [r0, #0]
{
 23fd494:	460c      	mov	r4, r1
    if (buffer) {
 23fd496:	b170      	cbz	r0, 23fd4b6 <_ZN6String4moveERS_+0x28>
        if (capacity >= rhs.len && rhs.buffer) {
 23fd498:	686a      	ldr	r2, [r5, #4]
 23fd49a:	688b      	ldr	r3, [r1, #8]
 23fd49c:	429a      	cmp	r2, r3
 23fd49e:	d308      	bcc.n	23fd4b2 <_ZN6String4moveERS_+0x24>
 23fd4a0:	6809      	ldr	r1, [r1, #0]
 23fd4a2:	b131      	cbz	r1, 23fd4b2 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
 23fd4a4:	f002 f953 	bl	23ff74e <strcpy>
            len = rhs.len;
 23fd4a8:	68a3      	ldr	r3, [r4, #8]
 23fd4aa:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
 23fd4ac:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity = 0;
    rhs.len = 0;
 23fd4ae:	60a3      	str	r3, [r4, #8]
}
 23fd4b0:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
 23fd4b2:	f7ff fe6b 	bl	23fd18c <free>
    buffer = rhs.buffer;
 23fd4b6:	6823      	ldr	r3, [r4, #0]
 23fd4b8:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
 23fd4ba:	6863      	ldr	r3, [r4, #4]
 23fd4bc:	606b      	str	r3, [r5, #4]
    len = rhs.len;
 23fd4be:	68a3      	ldr	r3, [r4, #8]
 23fd4c0:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
 23fd4c2:	2300      	movs	r3, #0
    rhs.capacity = 0;
 23fd4c4:	e9c4 3300 	strd	r3, r3, [r4]
 23fd4c8:	e7f1      	b.n	23fd4ae <_ZN6String4moveERS_+0x20>

023fd4ca <_ZN6StringC1EOS_>:
    buffer = nullptr;
 23fd4ca:	2300      	movs	r3, #0
String::String(String &&rval)
 23fd4cc:	b510      	push	{r4, lr}
 23fd4ce:	4604      	mov	r4, r0
    capacity = 0;
 23fd4d0:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fd4d4:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fd4d6:	7303      	strb	r3, [r0, #12]
    move(rval);
 23fd4d8:	f7ff ffd9 	bl	23fd48e <_ZN6String4moveERS_>
}
 23fd4dc:	4620      	mov	r0, r4
 23fd4de:	bd10      	pop	{r4, pc}

023fd4e0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23fd4e0:	4288      	cmp	r0, r1
{
 23fd4e2:	b510      	push	{r4, lr}
 23fd4e4:	4604      	mov	r4, r0
    if (this == &rhs) {
 23fd4e6:	d005      	beq.n	23fd4f4 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23fd4e8:	680b      	ldr	r3, [r1, #0]
 23fd4ea:	b12b      	cbz	r3, 23fd4f8 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23fd4ec:	688a      	ldr	r2, [r1, #8]
 23fd4ee:	4619      	mov	r1, r3
 23fd4f0:	f7ff ffb4 	bl	23fd45c <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fd4f4:	4620      	mov	r0, r4
 23fd4f6:	bd10      	pop	{r4, pc}
        invalidate();
 23fd4f8:	f7ff ff85 	bl	23fd406 <_ZN6String10invalidateEv>
 23fd4fc:	e7fa      	b.n	23fd4f4 <_ZN6StringaSERKS_+0x14>

023fd4fe <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23fd4fe:	2300      	movs	r3, #0
String::String(const String &value)
 23fd500:	b510      	push	{r4, lr}
 23fd502:	4604      	mov	r4, r0
    capacity = 0;
 23fd504:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fd508:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fd50a:	7303      	strb	r3, [r0, #12]
    *this = value;
 23fd50c:	f7ff ffe8 	bl	23fd4e0 <_ZN6StringaSERKS_>
}
 23fd510:	4620      	mov	r0, r4
 23fd512:	bd10      	pop	{r4, pc}

023fd514 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 23fd514:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fd516:	6843      	ldr	r3, [r0, #4]
    {
 23fd518:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fd51a:	3b01      	subs	r3, #1
 23fd51c:	6043      	str	r3, [r0, #4]
 23fd51e:	b963      	cbnz	r3, 23fd53a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
 23fd520:	6803      	ldr	r3, [r0, #0]
 23fd522:	689b      	ldr	r3, [r3, #8]
 23fd524:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fd526:	68a3      	ldr	r3, [r4, #8]
 23fd528:	3b01      	subs	r3, #1
 23fd52a:	60a3      	str	r3, [r4, #8]
 23fd52c:	b92b      	cbnz	r3, 23fd53a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fd52e:	6823      	ldr	r3, [r4, #0]
 23fd530:	4620      	mov	r0, r4
        }
    }
 23fd532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fd536:	68db      	ldr	r3, [r3, #12]
 23fd538:	4718      	bx	r3
    }
 23fd53a:	bd10      	pop	{r4, pc}

023fd53c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd53c:	b570      	push	{r4, r5, r6, lr}
 23fd53e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd540:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fd544:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fd548:	42ae      	cmp	r6, r5
 23fd54a:	d004      	beq.n	23fd556 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fd54c:	4628      	mov	r0, r5
 23fd54e:	f7ff ff53 	bl	23fd3f8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fd552:	3510      	adds	r5, #16
 23fd554:	e7f8      	b.n	23fd548 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fd556:	6820      	ldr	r0, [r4, #0]
 23fd558:	f7ff fe18 	bl	23fd18c <free>
    AllocatorT::free(data_);
}
 23fd55c:	4620      	mov	r0, r4
 23fd55e:	bd70      	pop	{r4, r5, r6, pc}

023fd560 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fd560:	b510      	push	{r4, lr}
 23fd562:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
 23fd564:	6800      	ldr	r0, [r0, #0]
 23fd566:	b108      	cbz	r0, 23fd56c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23fd568:	f7ff ffd4 	bl	23fd514 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23fd56c:	4620      	mov	r0, r4
 23fd56e:	bd10      	pop	{r4, pc}

023fd570 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fd570:	2300      	movs	r3, #0
 23fd572:	4802      	ldr	r0, [pc, #8]	; (23fd57c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fd574:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fd576:	f7ff ba97 	b.w	23fcaa8 <os_mutex_recursive_create>
 23fd57a:	bf00      	nop
 23fd57c:	1007ae64 	.word	0x1007ae64

023fd580 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fd580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd582:	4606      	mov	r6, r0
 23fd584:	460d      	mov	r5, r1
  size_t n = 0;
 23fd586:	2400      	movs	r4, #0
 23fd588:	188f      	adds	r7, r1, r2
  while (size--) {
 23fd58a:	42bd      	cmp	r5, r7
 23fd58c:	d00c      	beq.n	23fd5a8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fd58e:	6833      	ldr	r3, [r6, #0]
 23fd590:	4630      	mov	r0, r6
 23fd592:	689b      	ldr	r3, [r3, #8]
 23fd594:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fd598:	4798      	blx	r3
     if (chunk>=0)
 23fd59a:	1e03      	subs	r3, r0, #0
 23fd59c:	db01      	blt.n	23fd5a2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fd59e:	441c      	add	r4, r3
  while (size--) {
 23fd5a0:	e7f3      	b.n	23fd58a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fd5a2:	2c00      	cmp	r4, #0
 23fd5a4:	bf08      	it	eq
 23fd5a6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fd5a8:	4620      	mov	r0, r4
 23fd5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd5ac <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 23fd5ac:	b513      	push	{r0, r1, r4, lr}
 23fd5ae:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
 23fd5b0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fd5b2:	b159      	cbz	r1, 23fd5cc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fd5b4:	9101      	str	r1, [sp, #4]
 23fd5b6:	f7fd fff9 	bl	23fb5ac <strlen>
 23fd5ba:	4602      	mov	r2, r0
 23fd5bc:	4620      	mov	r0, r4
 23fd5be:	6823      	ldr	r3, [r4, #0]
 23fd5c0:	9901      	ldr	r1, [sp, #4]
 23fd5c2:	68db      	ldr	r3, [r3, #12]
    }
 23fd5c4:	b002      	add	sp, #8
 23fd5c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fd5ca:	4718      	bx	r3
    }
 23fd5cc:	b002      	add	sp, #8
 23fd5ce:	bd10      	pop	{r4, pc}

023fd5d0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fd5d0:	6803      	ldr	r3, [r0, #0]
 23fd5d2:	689b      	ldr	r3, [r3, #8]
 23fd5d4:	4718      	bx	r3

023fd5d6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fd5d6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fd5d8:	2a01      	cmp	r2, #1
 23fd5da:	bf98      	it	ls
 23fd5dc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fd5de:	b530      	push	{r4, r5, lr}
 23fd5e0:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fd5e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fd5e6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fd5e8:	460d      	mov	r5, r1
 23fd5ea:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fd5ee:	fb01 5312 	mls	r3, r1, r2, r5
 23fd5f2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd5f6:	2b09      	cmp	r3, #9
 23fd5f8:	bf94      	ite	ls
 23fd5fa:	3330      	addls	r3, #48	; 0x30
 23fd5fc:	3337      	addhi	r3, #55	; 0x37
 23fd5fe:	b2db      	uxtb	r3, r3
  } while(n);
 23fd600:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd602:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fd606:	d9ef      	bls.n	23fd5e8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fd608:	4621      	mov	r1, r4
 23fd60a:	f7ff ffcf 	bl	23fd5ac <_ZN5Print5writeEPKc>
}
 23fd60e:	b00b      	add	sp, #44	; 0x2c
 23fd610:	bd30      	pop	{r4, r5, pc}

023fd612 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fd612:	6880      	ldr	r0, [r0, #8]
 23fd614:	6803      	ldr	r3, [r0, #0]
 23fd616:	68db      	ldr	r3, [r3, #12]
 23fd618:	4718      	bx	r3

023fd61a <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fd61a:	4770      	bx	lr

023fd61c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fd61c:	4608      	mov	r0, r1
 23fd61e:	b111      	cbz	r1, 23fd626 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fd620:	680b      	ldr	r3, [r1, #0]
 23fd622:	685b      	ldr	r3, [r3, #4]
 23fd624:	4718      	bx	r3
}
 23fd626:	4770      	bx	lr

023fd628 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fd628:	4770      	bx	lr

023fd62a <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd62a:	4770      	bx	lr

023fd62c <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fd62c:	4770      	bx	lr

023fd62e <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fd62e:	4770      	bx	lr

023fd630 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fd630:	b538      	push	{r3, r4, r5, lr}
 23fd632:	4604      	mov	r4, r0
 23fd634:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fd636:	6800      	ldr	r0, [r0, #0]
 23fd638:	212e      	movs	r1, #46	; 0x2e
 23fd63a:	f002 f87e 	bl	23ff73a <strchrnul>
    size = s - category;
 23fd63e:	6823      	ldr	r3, [r4, #0]
 23fd640:	1ac3      	subs	r3, r0, r3
 23fd642:	602b      	str	r3, [r5, #0]
    if (size) {
 23fd644:	b123      	cbz	r3, 23fd650 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fd646:	7803      	ldrb	r3, [r0, #0]
 23fd648:	b103      	cbz	r3, 23fd64c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fd64a:	3001      	adds	r0, #1
 23fd64c:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd64e:	6020      	str	r0, [r4, #0]
}
 23fd650:	4618      	mov	r0, r3
 23fd652:	bd38      	pop	{r3, r4, r5, pc}

023fd654 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fd654:	b510      	push	{r4, lr}
 23fd656:	4604      	mov	r4, r0
 23fd658:	210c      	movs	r1, #12
 23fd65a:	f7fd ffd2 	bl	23fb602 <_ZdlPvj>
 23fd65e:	4620      	mov	r0, r4
 23fd660:	bd10      	pop	{r4, pc}

023fd662 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fd662:	b510      	push	{r4, lr}
 23fd664:	4604      	mov	r4, r0
 23fd666:	2104      	movs	r1, #4
 23fd668:	f7fd ffcb 	bl	23fb602 <_ZdlPvj>
 23fd66c:	4620      	mov	r0, r4
 23fd66e:	bd10      	pop	{r4, pc}

023fd670 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd670:	b510      	push	{r4, lr}
 23fd672:	4604      	mov	r4, r0
 23fd674:	2104      	movs	r1, #4
 23fd676:	f7fd ffc4 	bl	23fb602 <_ZdlPvj>
 23fd67a:	4620      	mov	r0, r4
 23fd67c:	bd10      	pop	{r4, pc}

023fd67e <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fd67e:	f7ff ba2f 	b.w	23fcae0 <os_mutex_recursive_lock>

023fd682 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fd682:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fd684:	f7fd ff88 	bl	23fb598 <strcmp>
}
 23fd688:	fab0 f080 	clz	r0, r0
 23fd68c:	0940      	lsrs	r0, r0, #5
 23fd68e:	bd08      	pop	{r3, pc}

023fd690 <__tcf_1>:
 23fd690:	4770      	bx	lr

023fd692 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fd692:	b510      	push	{r4, lr}
 23fd694:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fd696:	f001 f919 	bl	23fe8cc <_Z16_fetch_usbserialv>
 23fd69a:	4284      	cmp	r4, r0
 23fd69c:	d105      	bne.n	23fd6aa <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fd69e:	f001 f915 	bl	23fe8cc <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fd6a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fd6a6:	f001 b905 	b.w	23fe8b4 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fd6aa:	f001 fd57 	bl	23ff15c <_Z22__fetch_global_Serial1v>
 23fd6ae:	4284      	cmp	r4, r0
 23fd6b0:	d105      	bne.n	23fd6be <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fd6b2:	f001 fd53 	bl	23ff15c <_Z22__fetch_global_Serial1v>
}
 23fd6b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fd6ba:	f001 b984 	b.w	23fe9c6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fd6be:	b12c      	cbz	r4, 23fd6cc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fd6c0:	6823      	ldr	r3, [r4, #0]
 23fd6c2:	4620      	mov	r0, r4
}
 23fd6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd6c8:	685b      	ldr	r3, [r3, #4]
 23fd6ca:	4718      	bx	r3
 23fd6cc:	bd10      	pop	{r4, pc}

023fd6ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd6ce:	680b      	ldr	r3, [r1, #0]
 23fd6d0:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fd6d2:	684b      	ldr	r3, [r1, #4]
 23fd6d4:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fd6d6:	b113      	cbz	r3, 23fd6de <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fd6d8:	685a      	ldr	r2, [r3, #4]
 23fd6da:	3201      	adds	r2, #1
 23fd6dc:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd6de:	4770      	bx	lr

023fd6e0 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fd6e0:	b513      	push	{r0, r1, r4, lr}
 23fd6e2:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fd6e4:	4608      	mov	r0, r1
 23fd6e6:	9101      	str	r1, [sp, #4]
 23fd6e8:	f7fd ff60 	bl	23fb5ac <strlen>
 23fd6ec:	4602      	mov	r2, r0
 23fd6ee:	4620      	mov	r0, r4
 23fd6f0:	9901      	ldr	r1, [sp, #4]
}
 23fd6f2:	b002      	add	sp, #8
 23fd6f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fd6f8:	f001 bc88 	b.w	23ff00c <_ZN5spark10JSONWriter5valueEPKcj>

023fd6fc <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fd6fc:	b513      	push	{r0, r1, r4, lr}
 23fd6fe:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fd700:	4608      	mov	r0, r1
 23fd702:	9101      	str	r1, [sp, #4]
 23fd704:	f7fd ff52 	bl	23fb5ac <strlen>
 23fd708:	4602      	mov	r2, r0
 23fd70a:	4620      	mov	r0, r4
 23fd70c:	6823      	ldr	r3, [r4, #0]
 23fd70e:	9901      	ldr	r1, [sp, #4]
 23fd710:	68db      	ldr	r3, [r3, #12]
}
 23fd712:	b002      	add	sp, #8
 23fd714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fd718:	4718      	bx	r3

023fd71a <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fd71a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd71c:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fd71e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fd722:	2201      	movs	r2, #1
 23fd724:	68db      	ldr	r3, [r3, #12]
 23fd726:	f10d 0107 	add.w	r1, sp, #7
 23fd72a:	4798      	blx	r3
}
 23fd72c:	b003      	add	sp, #12
 23fd72e:	f85d fb04 	ldr.w	pc, [sp], #4

023fd732 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fd732:	680a      	ldr	r2, [r1, #0]
 23fd734:	b510      	push	{r4, lr}
 23fd736:	6002      	str	r2, [r0, #0]
 23fd738:	684a      	ldr	r2, [r1, #4]
 23fd73a:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fd73c:	2200      	movs	r2, #0
 23fd73e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fd742:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd744:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd746:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd748:	6084      	str	r4, [r0, #8]
 23fd74a:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd74c:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd74e:	60c4      	str	r4, [r0, #12]
 23fd750:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd752:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd754:	6104      	str	r4, [r0, #16]
 23fd756:	bd10      	pop	{r4, pc}

023fd758 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fd75c:	f04f 0a14 	mov.w	sl, #20
 23fd760:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fd764:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fd766:	4645      	mov	r5, r8
 23fd768:	fb0a f404 	mul.w	r4, sl, r4
 23fd76c:	9300      	str	r3, [sp, #0]
 23fd76e:	4b17      	ldr	r3, [pc, #92]	; (23fd7cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd770:	10a4      	asrs	r4, r4, #2
 23fd772:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fd774:	2c00      	cmp	r4, #0
 23fd776:	dd21      	ble.n	23fd7bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fd778:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fd77a:	fb0a f006 	mul.w	r0, sl, r6
 23fd77e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fd782:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fd786:	463a      	mov	r2, r7
 23fd788:	455f      	cmp	r7, fp
 23fd78a:	bf28      	it	cs
 23fd78c:	465a      	movcs	r2, fp
 23fd78e:	5828      	ldr	r0, [r5, r0]
 23fd790:	9101      	str	r1, [sp, #4]
 23fd792:	f001 ffe4 	bl	23ff75e <strncmp>
                if (cmp == 0) {
 23fd796:	2800      	cmp	r0, #0
 23fd798:	f04f 0301 	mov.w	r3, #1
 23fd79c:	9901      	ldr	r1, [sp, #4]
 23fd79e:	d10b      	bne.n	23fd7b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fd7a0:	455f      	cmp	r7, fp
 23fd7a2:	d103      	bne.n	23fd7ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fd7a4:	9a00      	ldr	r2, [sp, #0]
 23fd7a6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd7a8:	4634      	mov	r4, r6
 23fd7aa:	e7e3      	b.n	23fd774 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fd7ac:	d9fc      	bls.n	23fd7a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fd7ae:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fd7b0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fd7b4:	3e01      	subs	r6, #1
 23fd7b6:	e7f7      	b.n	23fd7a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fd7b8:	dbf9      	blt.n	23fd7ae <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fd7ba:	e7f5      	b.n	23fd7a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fd7bc:	eba5 0508 	sub.w	r5, r5, r8
}
 23fd7c0:	4802      	ldr	r0, [pc, #8]	; (23fd7cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd7c2:	10ad      	asrs	r5, r5, #2
 23fd7c4:	4368      	muls	r0, r5
 23fd7c6:	b003      	add	sp, #12
 23fd7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd7cc:	cccccccd 	.word	0xcccccccd

023fd7d0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd7d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fd7d2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fd7d4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd7d6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fd7d8:	b303      	cbz	r3, 23fd81c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fd7da:	b1f9      	cbz	r1, 23fd81c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fd7dc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fd7de:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fd7e2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fd7e4:	a903      	add	r1, sp, #12
 23fd7e6:	a801      	add	r0, sp, #4
 23fd7e8:	f7ff ff22 	bl	23fd630 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd7ec:	4601      	mov	r1, r0
 23fd7ee:	b1a8      	cbz	r0, 23fd81c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd7f0:	f10d 030b 	add.w	r3, sp, #11
 23fd7f4:	4620      	mov	r0, r4
 23fd7f6:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fd7f8:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd7fc:	f7ff ffac 	bl	23fd758 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fd800:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fd804:	b153      	cbz	r3, 23fd81c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fd806:	6823      	ldr	r3, [r4, #0]
 23fd808:	2414      	movs	r4, #20
 23fd80a:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fd80e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fd812:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fd814:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fd816:	bfa8      	it	ge
 23fd818:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fd81a:	e7e3      	b.n	23fd7e4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fd81c:	4628      	mov	r0, r5
 23fd81e:	b004      	add	sp, #16
 23fd820:	bd70      	pop	{r4, r5, r6, pc}

023fd822 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fd822:	b40e      	push	{r1, r2, r3}
 23fd824:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd826:	b08c      	sub	sp, #48	; 0x30
 23fd828:	af00      	add	r7, sp, #0
 23fd82a:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fd82e:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd832:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd834:	462b      	mov	r3, r5
 23fd836:	2120      	movs	r1, #32
 23fd838:	f107 0010 	add.w	r0, r7, #16
 23fd83c:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd83e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd840:	f7ff fcc0 	bl	23fd1c4 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fd844:	281f      	cmp	r0, #31
 23fd846:	687a      	ldr	r2, [r7, #4]
 23fd848:	d91a      	bls.n	23fd880 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fd84a:	f100 0308 	add.w	r3, r0, #8
 23fd84e:	f023 0307 	bic.w	r3, r3, #7
        }
 23fd852:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fd854:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd858:	1c41      	adds	r1, r0, #1
 23fd85a:	462b      	mov	r3, r5
 23fd85c:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd85e:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd860:	f7ff fcb0 	bl	23fd1c4 <vsnprintf>
        if (n > 0) {
 23fd864:	1e02      	subs	r2, r0, #0
 23fd866:	dd04      	ble.n	23fd872 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fd868:	6823      	ldr	r3, [r4, #0]
 23fd86a:	4669      	mov	r1, sp
 23fd86c:	4620      	mov	r0, r4
 23fd86e:	68db      	ldr	r3, [r3, #12]
 23fd870:	4798      	blx	r3
 23fd872:	46b5      	mov	sp, r6
}
 23fd874:	3730      	adds	r7, #48	; 0x30
 23fd876:	46bd      	mov	sp, r7
 23fd878:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd87c:	b003      	add	sp, #12
 23fd87e:	4770      	bx	lr
    } else if (n > 0) {
 23fd880:	2800      	cmp	r0, #0
 23fd882:	d0f7      	beq.n	23fd874 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fd884:	6823      	ldr	r3, [r4, #0]
 23fd886:	4602      	mov	r2, r0
 23fd888:	68db      	ldr	r3, [r3, #12]
 23fd88a:	4620      	mov	r0, r4
 23fd88c:	f107 0110 	add.w	r1, r7, #16
 23fd890:	4798      	blx	r3
}
 23fd892:	e7ef      	b.n	23fd874 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fd894 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fd894:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fd896:	4c08      	ldr	r4, [pc, #32]	; (23fd8b8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fd898:	e8d4 3f8f 	ldab	r3, [r4]
 23fd89c:	07db      	lsls	r3, r3, #31
 23fd89e:	d409      	bmi.n	23fd8b4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd8a0:	4620      	mov	r0, r4
 23fd8a2:	f7fd febd 	bl	23fb620 <__cxa_guard_acquire>
 23fd8a6:	b128      	cbz	r0, 23fd8b4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd8a8:	4620      	mov	r0, r4
 23fd8aa:	f7fd febe 	bl	23fb62a <__cxa_guard_release>
 23fd8ae:	4803      	ldr	r0, [pc, #12]	; (23fd8bc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fd8b0:	f001 fec9 	bl	23ff646 <atexit>
}
 23fd8b4:	4802      	ldr	r0, [pc, #8]	; (23fd8c0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fd8b6:	bd10      	pop	{r4, pc}
 23fd8b8:	1007ae6c 	.word	0x1007ae6c
 23fd8bc:	023fd629 	.word	0x023fd629
 23fd8c0:	1007a44c 	.word	0x1007a44c

023fd8c4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fd8c4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fd8c6:	4c08      	ldr	r4, [pc, #32]	; (23fd8e8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fd8c8:	e8d4 3f8f 	ldab	r3, [r4]
 23fd8cc:	07db      	lsls	r3, r3, #31
 23fd8ce:	d409      	bmi.n	23fd8e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd8d0:	4620      	mov	r0, r4
 23fd8d2:	f7fd fea5 	bl	23fb620 <__cxa_guard_acquire>
 23fd8d6:	b128      	cbz	r0, 23fd8e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd8d8:	4620      	mov	r0, r4
 23fd8da:	f7fd fea6 	bl	23fb62a <__cxa_guard_release>
 23fd8de:	4803      	ldr	r0, [pc, #12]	; (23fd8ec <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fd8e0:	f001 feb1 	bl	23ff646 <atexit>
    return &factory;
}
 23fd8e4:	4802      	ldr	r0, [pc, #8]	; (23fd8f0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fd8e6:	bd10      	pop	{r4, pc}
 23fd8e8:	1007ae70 	.word	0x1007ae70
 23fd8ec:	023fd691 	.word	0x023fd691
 23fd8f0:	1007a450 	.word	0x1007a450

023fd8f4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fd8f4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fd8f6:	2500      	movs	r5, #0
 23fd8f8:	4604      	mov	r4, r0
 23fd8fa:	e9c0 5500 	strd	r5, r5, [r0]
 23fd8fe:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fd902:	6085      	str	r5, [r0, #8]
 23fd904:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fd906:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fd90a:	f7ff f8cd 	bl	23fcaa8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fd90e:	f7ff ffc1 	bl	23fd894 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fd912:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd914:	f7ff ffd6 	bl	23fd8c4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fd918:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd91a:	6220      	str	r0, [r4, #32]
}
 23fd91c:	4620      	mov	r0, r4
 23fd91e:	bd38      	pop	{r3, r4, r5, pc}

023fd920 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fd920:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fd922:	4c0a      	ldr	r4, [pc, #40]	; (23fd94c <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fd924:	e8d4 3f8f 	ldab	r3, [r4]
 23fd928:	07db      	lsls	r3, r3, #31
 23fd92a:	d40c      	bmi.n	23fd946 <_ZN5spark10LogManager8instanceEv+0x26>
 23fd92c:	4620      	mov	r0, r4
 23fd92e:	f7fd fe77 	bl	23fb620 <__cxa_guard_acquire>
 23fd932:	b140      	cbz	r0, 23fd946 <_ZN5spark10LogManager8instanceEv+0x26>
 23fd934:	4806      	ldr	r0, [pc, #24]	; (23fd950 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd936:	f7ff ffdd 	bl	23fd8f4 <_ZN5spark10LogManagerC1Ev>
 23fd93a:	4620      	mov	r0, r4
 23fd93c:	f7fd fe75 	bl	23fb62a <__cxa_guard_release>
 23fd940:	4804      	ldr	r0, [pc, #16]	; (23fd954 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fd942:	f001 fe80 	bl	23ff646 <atexit>
    return &mgr;
}
 23fd946:	4802      	ldr	r0, [pc, #8]	; (23fd950 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd948:	bd10      	pop	{r4, pc}
 23fd94a:	bf00      	nop
 23fd94c:	1007ae68 	.word	0x1007ae68
 23fd950:	1007ae78 	.word	0x1007ae78
 23fd954:	023fde71 	.word	0x023fde71

023fd958 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fd958:	2300      	movs	r3, #0
 23fd95a:	4a02      	ldr	r2, [pc, #8]	; (23fd964 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fd95c:	4902      	ldr	r1, [pc, #8]	; (23fd968 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fd95e:	4803      	ldr	r0, [pc, #12]	; (23fd96c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fd960:	f7ff bab6 	b.w	23fced0 <log_set_callbacks>
 23fd964:	023fdc59 	.word	0x023fdc59
 23fd968:	023fdbe5 	.word	0x023fdbe5
 23fd96c:	023fdb65 	.word	0x023fdb65

023fd970 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fd970:	2300      	movs	r3, #0
 23fd972:	461a      	mov	r2, r3
 23fd974:	4619      	mov	r1, r3
 23fd976:	4618      	mov	r0, r3
 23fd978:	f7ff baaa 	b.w	23fced0 <log_set_callbacks>

023fd97c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fd97c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd97e:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fd980:	688d      	ldr	r5, [r1, #8]
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fd982:	4668      	mov	r0, sp
 23fd984:	f7ff fea3 	bl	23fd6ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd988:	466a      	mov	r2, sp
 23fd98a:	4629      	mov	r1, r5
 23fd98c:	4620      	mov	r0, r4
 23fd98e:	f001 fa5d 	bl	23fee4c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 23fd992:	a801      	add	r0, sp, #4
 23fd994:	f7ff fde4 	bl	23fd560 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd998:	4620      	mov	r0, r4
 23fd99a:	b003      	add	sp, #12
 23fd99c:	bd30      	pop	{r4, r5, pc}

023fd99e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fd99e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd9a0:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fd9a2:	68cd      	ldr	r5, [r1, #12]
 23fd9a4:	4668      	mov	r0, sp
 23fd9a6:	f7ff fe92 	bl	23fd6ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd9aa:	466a      	mov	r2, sp
 23fd9ac:	4629      	mov	r1, r5
 23fd9ae:	4620      	mov	r0, r4
 23fd9b0:	f001 fa28 	bl	23fee04 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd9b4:	a801      	add	r0, sp, #4
 23fd9b6:	f7ff fdd3 	bl	23fd560 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd9ba:	4620      	mov	r0, r4
 23fd9bc:	b003      	add	sp, #12
 23fd9be:	bd30      	pop	{r4, r5, pc}

023fd9c0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fd9c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd9c2:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fd9c4:	690d      	ldr	r5, [r1, #16]
 23fd9c6:	4668      	mov	r0, sp
 23fd9c8:	f7ff fe81 	bl	23fd6ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd9cc:	466a      	mov	r2, sp
 23fd9ce:	4629      	mov	r1, r5
 23fd9d0:	4620      	mov	r0, r4
 23fd9d2:	f001 f9c0 	bl	23fed56 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd9d6:	a801      	add	r0, sp, #4
 23fd9d8:	f7ff fdc2 	bl	23fd560 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd9dc:	4620      	mov	r0, r4
 23fd9de:	b003      	add	sp, #12
 23fd9e0:	bd30      	pop	{r4, r5, pc}
	...

023fd9e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fd9e4:	b570      	push	{r4, r5, r6, lr}
 23fd9e6:	b08a      	sub	sp, #40	; 0x28
 23fd9e8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fd9ea:	4601      	mov	r1, r0
 23fd9ec:	a804      	add	r0, sp, #16
 23fd9ee:	f7ff ffc5 	bl	23fd97c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fd9f2:	4e14      	ldr	r6, [pc, #80]	; (23fda44 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fd9f4:	a804      	add	r0, sp, #16
 23fd9f6:	f001 fa41 	bl	23fee7c <_ZN5spark18JSONObjectIterator4nextEv>
 23fd9fa:	b1e8      	cbz	r0, 23fda38 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fd9fc:	4668      	mov	r0, sp
 23fd9fe:	a904      	add	r1, sp, #16
 23fda00:	f7ff ffcd 	bl	23fd99e <_ZNK5spark18JSONObjectIterator4nameEv>
 23fda04:	4631      	mov	r1, r6
 23fda06:	9802      	ldr	r0, [sp, #8]
 23fda08:	f7ff fe3b 	bl	23fd682 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fda0c:	4604      	mov	r4, r0
 23fda0e:	b110      	cbz	r0, 23fda16 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fda10:	1e2c      	subs	r4, r5, #0
 23fda12:	bf18      	it	ne
 23fda14:	2401      	movne	r4, #1
 23fda16:	a801      	add	r0, sp, #4
 23fda18:	f7ff fda2 	bl	23fd560 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fda1c:	2c00      	cmp	r4, #0
 23fda1e:	d0e9      	beq.n	23fd9f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fda20:	4668      	mov	r0, sp
 23fda22:	a904      	add	r1, sp, #16
 23fda24:	f7ff ffcc 	bl	23fd9c0 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fda28:	4668      	mov	r0, sp
 23fda2a:	f001 f9ca 	bl	23fedc2 <_ZNK5spark9JSONValue5toIntEv>
 23fda2e:	6028      	str	r0, [r5, #0]
 23fda30:	a801      	add	r0, sp, #4
 23fda32:	f7ff fd95 	bl	23fd560 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fda36:	e7dd      	b.n	23fd9f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fda38:	a805      	add	r0, sp, #20
 23fda3a:	f7ff fd91 	bl	23fd560 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fda3e:	b00a      	add	sp, #40	; 0x28
 23fda40:	bd70      	pop	{r4, r5, r6, pc}
 23fda42:	bf00      	nop
 23fda44:	023ffbc4 	.word	0x023ffbc4

023fda48 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fda48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fda4a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fda4c:	4913      	ldr	r1, [pc, #76]	; (23fda9c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fda4e:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fda50:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fda52:	f7fd fda1 	bl	23fb598 <strcmp>
 23fda56:	b950      	cbnz	r0, 23fda6e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fda58:	f000 ff38 	bl	23fe8cc <_Z16_fetch_usbserialv>
 23fda5c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fda60:	f000 ff24 	bl	23fe8ac <_ZN9USBSerial5beginEl>
}
 23fda64:	b003      	add	sp, #12
 23fda66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fda6a:	f000 bf2f 	b.w	23fe8cc <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fda6e:	4620      	mov	r0, r4
 23fda70:	490b      	ldr	r1, [pc, #44]	; (23fdaa0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fda72:	f7fd fd91 	bl	23fb598 <strcmp>
 23fda76:	b978      	cbnz	r0, 23fda98 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fda78:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fda7c:	a901      	add	r1, sp, #4
 23fda7e:	4628      	mov	r0, r5
        int baud = 9600;
 23fda80:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fda82:	f7ff ffaf 	bl	23fd9e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fda86:	f001 fb69 	bl	23ff15c <_Z22__fetch_global_Serial1v>
 23fda8a:	9901      	ldr	r1, [sp, #4]
 23fda8c:	f000 ff98 	bl	23fe9c0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fda90:	f001 fb64 	bl	23ff15c <_Z22__fetch_global_Serial1v>
}
 23fda94:	b003      	add	sp, #12
 23fda96:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fda98:	2000      	movs	r0, #0
 23fda9a:	e7fb      	b.n	23fda94 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fda9c:	023ffbc9 	.word	0x023ffbc9
 23fdaa0:	023ffbd0 	.word	0x023ffbd0

023fdaa4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fdaa4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fdaa6:	2614      	movs	r6, #20
 23fdaa8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fdaac:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fdaae:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fdab2:	42ae      	cmp	r6, r5
 23fdab4:	d005      	beq.n	23fdac2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fdab6:	f105 0008 	add.w	r0, r5, #8
 23fdaba:	f7ff fff3 	bl	23fdaa4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fdabe:	3514      	adds	r5, #20
 23fdac0:	e7f7      	b.n	23fdab2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fdac2:	6820      	ldr	r0, [r4, #0]
 23fdac4:	f7ff fb62 	bl	23fd18c <free>
}
 23fdac8:	4620      	mov	r0, r4
 23fdaca:	bd70      	pop	{r4, r5, r6, pc}

023fdacc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fdacc:	b510      	push	{r4, lr}
 23fdace:	4604      	mov	r4, r0
 23fdad0:	300c      	adds	r0, #12
 23fdad2:	f7ff ffe7 	bl	23fdaa4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fdad6:	4620      	mov	r0, r4
 23fdad8:	f7ff fd30 	bl	23fd53c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fdadc:	4620      	mov	r0, r4
 23fdade:	bd10      	pop	{r4, pc}

023fdae0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fdae0:	b510      	push	{r4, lr}
 23fdae2:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fdae4:	4b03      	ldr	r3, [pc, #12]	; (23fdaf4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fdae6:	f840 3b04 	str.w	r3, [r0], #4
 23fdaea:	f7ff ffef 	bl	23fdacc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fdaee:	4620      	mov	r0, r4
 23fdaf0:	bd10      	pop	{r4, pc}
 23fdaf2:	bf00      	nop
 23fdaf4:	023ffa40 	.word	0x023ffa40

023fdaf8 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fdaf8:	b510      	push	{r4, lr}
 23fdafa:	4604      	mov	r4, r0
 23fdafc:	f7ff fff0 	bl	23fdae0 <_ZN5spark16StreamLogHandlerD1Ev>
 23fdb00:	4620      	mov	r0, r4
 23fdb02:	2124      	movs	r1, #36	; 0x24
 23fdb04:	f7fd fd7d 	bl	23fb602 <_ZdlPvj>
 23fdb08:	4620      	mov	r0, r4
 23fdb0a:	bd10      	pop	{r4, pc}

023fdb0c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fdb0c:	b510      	push	{r4, lr}
 23fdb0e:	4604      	mov	r4, r0
 23fdb10:	4b02      	ldr	r3, [pc, #8]	; (23fdb1c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fdb12:	6003      	str	r3, [r0, #0]
 23fdb14:	f7ff ffe4 	bl	23fdae0 <_ZN5spark16StreamLogHandlerD1Ev>
 23fdb18:	4620      	mov	r0, r4
 23fdb1a:	bd10      	pop	{r4, pc}
 23fdb1c:	023ffc70 	.word	0x023ffc70

023fdb20 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fdb20:	b510      	push	{r4, lr}
 23fdb22:	4604      	mov	r4, r0
 23fdb24:	f7ff fff2 	bl	23fdb0c <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fdb28:	4620      	mov	r0, r4
 23fdb2a:	2124      	movs	r1, #36	; 0x24
 23fdb2c:	f7fd fd69 	bl	23fb602 <_ZdlPvj>
 23fdb30:	4620      	mov	r0, r4
 23fdb32:	bd10      	pop	{r4, pc}

023fdb34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fdb34:	2200      	movs	r2, #0
 23fdb36:	e9c0 2200 	strd	r2, r2, [r0]
 23fdb3a:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fdb3c:	b510      	push	{r4, lr}
 23fdb3e:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdb40:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fdb42:	6004      	str	r4, [r0, #0]
 23fdb44:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdb46:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fdb48:	6044      	str	r4, [r0, #4]
 23fdb4a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdb4c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fdb4e:	6084      	str	r4, [r0, #8]
}
 23fdb50:	bd10      	pop	{r4, pc}

023fdb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fdb52:	b510      	push	{r4, lr}
 23fdb54:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fdb56:	6803      	ldr	r3, [r0, #0]
 23fdb58:	6818      	ldr	r0, [r3, #0]
 23fdb5a:	f7fe ffcf 	bl	23fcafc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fdb5e:	4620      	mov	r0, r4
 23fdb60:	bd10      	pop	{r4, pc}
	...

023fdb64 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fdb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdb68:	b087      	sub	sp, #28
 23fdb6a:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fdb6c:	4b1c      	ldr	r3, [pc, #112]	; (23fdbe0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fdb6e:	4680      	mov	r8, r0
 23fdb70:	685b      	ldr	r3, [r3, #4]
 23fdb72:	4689      	mov	r9, r1
 23fdb74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fdb78:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fdb7a:	b96b      	cbnz	r3, 23fdb98 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fdb7c:	f7ff fed0 	bl	23fd920 <_ZN5spark10LogManager8instanceEv>
 23fdb80:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdb82:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fdb86:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdb88:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fdb8a:	f7ff fd78 	bl	23fd67e <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fdb8e:	7b23      	ldrb	r3, [r4, #12]
 23fdb90:	b12b      	cbz	r3, 23fdb9e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fdb92:	a805      	add	r0, sp, #20
 23fdb94:	f7ff ffdd 	bl	23fdb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fdb98:	b007      	add	sp, #28
 23fdb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fdb9e:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fdba0:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fdba4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fdba6:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fdbaa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdbae:	45aa      	cmp	sl, r5
 23fdbb0:	d012      	beq.n	23fdbd8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fdbb2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fdbb6:	4631      	mov	r1, r6
 23fdbb8:	1d38      	adds	r0, r7, #4
 23fdbba:	f7ff fe09 	bl	23fd7d0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fdbbe:	4581      	cmp	r9, r0
 23fdbc0:	d3f5      	bcc.n	23fdbae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fdbc2:	9a03      	ldr	r2, [sp, #12]
 23fdbc4:	683b      	ldr	r3, [r7, #0]
 23fdbc6:	9200      	str	r2, [sp, #0]
 23fdbc8:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fdbcc:	464a      	mov	r2, r9
 23fdbce:	4633      	mov	r3, r6
 23fdbd0:	4641      	mov	r1, r8
 23fdbd2:	4638      	mov	r0, r7
 23fdbd4:	47d8      	blx	fp
 23fdbd6:	e7ea      	b.n	23fdbae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fdbd8:	2300      	movs	r3, #0
 23fdbda:	7323      	strb	r3, [r4, #12]
 23fdbdc:	e7d9      	b.n	23fdb92 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fdbde:	bf00      	nop
 23fdbe0:	e000ed00 	.word	0xe000ed00

023fdbe4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fdbe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdbe8:	469b      	mov	fp, r3
 23fdbea:	4b1a      	ldr	r3, [pc, #104]	; (23fdc54 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fdbec:	4680      	mov	r8, r0
 23fdbee:	685b      	ldr	r3, [r3, #4]
 23fdbf0:	4689      	mov	r9, r1
 23fdbf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fdbf6:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fdbf8:	b96b      	cbnz	r3, 23fdc16 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fdbfa:	f7ff fe91 	bl	23fd920 <_ZN5spark10LogManager8instanceEv>
 23fdbfe:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdc00:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdc04:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdc06:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdc08:	f7ff fd39 	bl	23fd67e <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fdc0c:	7b23      	ldrb	r3, [r4, #12]
 23fdc0e:	b12b      	cbz	r3, 23fdc1c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fdc10:	a801      	add	r0, sp, #4
 23fdc12:	f7ff ff9e 	bl	23fdb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fdc16:	b003      	add	sp, #12
 23fdc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fdc1c:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fdc1e:	b2f6      	uxtb	r6, r6
 23fdc20:	7323      	strb	r3, [r4, #12]
 23fdc22:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fdc26:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdc2a:	4555      	cmp	r5, sl
 23fdc2c:	d00e      	beq.n	23fdc4c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fdc2e:	f855 7b04 	ldr.w	r7, [r5], #4
 23fdc32:	4659      	mov	r1, fp
 23fdc34:	1d38      	adds	r0, r7, #4
 23fdc36:	f7ff fdcb 	bl	23fd7d0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fdc3a:	4286      	cmp	r6, r0
 23fdc3c:	d3f5      	bcc.n	23fdc2a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fdc3e:	683b      	ldr	r3, [r7, #0]
 23fdc40:	464a      	mov	r2, r9
 23fdc42:	4641      	mov	r1, r8
 23fdc44:	4638      	mov	r0, r7
 23fdc46:	68db      	ldr	r3, [r3, #12]
 23fdc48:	4798      	blx	r3
 23fdc4a:	e7ee      	b.n	23fdc2a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fdc4c:	2300      	movs	r3, #0
 23fdc4e:	7323      	strb	r3, [r4, #12]
 23fdc50:	e7de      	b.n	23fdc10 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fdc52:	bf00      	nop
 23fdc54:	e000ed00 	.word	0xe000ed00

023fdc58 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fdc58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fdc5c:	4b16      	ldr	r3, [pc, #88]	; (23fdcb8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fdc5e:	4605      	mov	r5, r0
 23fdc60:	685b      	ldr	r3, [r3, #4]
 23fdc62:	460f      	mov	r7, r1
 23fdc64:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fdc68:	bb1b      	cbnz	r3, 23fdcb2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fdc6a:	f7ff fe59 	bl	23fd920 <_ZN5spark10LogManager8instanceEv>
 23fdc6e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdc70:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdc74:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdc76:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdc78:	f7ff fd01 	bl	23fd67e <_ZN14RecursiveMutex4lockEv.isra.0>
 23fdc7c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fdc80:	2446      	movs	r4, #70	; 0x46
 23fdc82:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdc86:	45b0      	cmp	r8, r6
 23fdc88:	d109      	bne.n	23fdc9e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fdc8a:	a801      	add	r0, sp, #4
 23fdc8c:	f7ff ff61 	bl	23fdb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fdc90:	42a5      	cmp	r5, r4
 23fdc92:	bfb4      	ite	lt
 23fdc94:	2000      	movlt	r0, #0
 23fdc96:	2001      	movge	r0, #1
}
 23fdc98:	b002      	add	sp, #8
 23fdc9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fdc9e:	f856 0b04 	ldr.w	r0, [r6], #4
 23fdca2:	4639      	mov	r1, r7
 23fdca4:	3004      	adds	r0, #4
 23fdca6:	f7ff fd93 	bl	23fd7d0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fdcaa:	4284      	cmp	r4, r0
 23fdcac:	bfa8      	it	ge
 23fdcae:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fdcb0:	e7e9      	b.n	23fdc86 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fdcb2:	2000      	movs	r0, #0
 23fdcb4:	e7f0      	b.n	23fdc98 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fdcb6:	bf00      	nop
 23fdcb8:	e000ed00 	.word	0xe000ed00

023fdcbc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fdcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdcbe:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fdcc2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fdcc4:	4604      	mov	r4, r0
 23fdcc6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdcc8:	db0d      	blt.n	23fdce6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fdcca:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fdccc:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fdcce:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fdcd0:	dd04      	ble.n	23fdcdc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fdcd2:	00b9      	lsls	r1, r7, #2
 23fdcd4:	f7ff fa68 	bl	23fd1a8 <realloc>
            if (!d) {
 23fdcd8:	b918      	cbnz	r0, 23fdce2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fdcda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fdcdc:	f7ff fa56 	bl	23fd18c <free>
        T* d = nullptr;
 23fdce0:	2000      	movs	r0, #0
        data_ = d;
 23fdce2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fdce4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fdce6:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fdce8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fdcea:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fdcee:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdcf0:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fdcf4:	1d08      	adds	r0, r1, #4
 23fdcf6:	f001 fcc2 	bl	23ff67e <memmove>
    new(p) T(std::move(value));
 23fdcfa:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fdcfe:	6863      	ldr	r3, [r4, #4]
    return true;
 23fdd00:	2001      	movs	r0, #1
    ++size_;
 23fdd02:	3301      	adds	r3, #1
 23fdd04:	6063      	str	r3, [r4, #4]
    return true;
 23fdd06:	e7e8      	b.n	23fdcda <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fdd08 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fdd08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdd0a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fdd0c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdd10:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdd12:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fdd14:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fdd16:	f7ff fcb2 	bl	23fd67e <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fdd1a:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fdd1e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fdd22:	4293      	cmp	r3, r2
 23fdd24:	4619      	mov	r1, r3
 23fdd26:	d00a      	beq.n	23fdd3e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fdd28:	6809      	ldr	r1, [r1, #0]
 23fdd2a:	3304      	adds	r3, #4
 23fdd2c:	42a9      	cmp	r1, r5
 23fdd2e:	d1f8      	bne.n	23fdd22 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fdd30:	a801      	add	r0, sp, #4
 23fdd32:	f7ff ff0e 	bl	23fdb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fdd36:	2500      	movs	r5, #0
}
 23fdd38:	4628      	mov	r0, r5
 23fdd3a:	b003      	add	sp, #12
 23fdd3c:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fdd3e:	4629      	mov	r1, r5
 23fdd40:	4620      	mov	r0, r4
 23fdd42:	f7ff ffbb 	bl	23fdcbc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fdd46:	4605      	mov	r5, r0
 23fdd48:	2800      	cmp	r0, #0
 23fdd4a:	d0f1      	beq.n	23fdd30 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fdd4c:	6863      	ldr	r3, [r4, #4]
 23fdd4e:	2b01      	cmp	r3, #1
 23fdd50:	d101      	bne.n	23fdd56 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fdd52:	f7ff fe01 	bl	23fd958 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdd56:	a801      	add	r0, sp, #4
 23fdd58:	f7ff fefb 	bl	23fdb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fdd5c:	e7ec      	b.n	23fdd38 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fdd5e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fdd5e:	460b      	mov	r3, r1
 23fdd60:	b570      	push	{r4, r5, r6, lr}
 23fdd62:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fdd64:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fdd68:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fdd6c:	4282      	cmp	r2, r0
 23fdd6e:	d00f      	beq.n	23fdd90 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fdd70:	4601      	mov	r1, r0
            if (*p == value) {
 23fdd72:	681d      	ldr	r5, [r3, #0]
 23fdd74:	f851 6b04 	ldr.w	r6, [r1], #4
 23fdd78:	42ae      	cmp	r6, r5
 23fdd7a:	d107      	bne.n	23fdd8c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdd7c:	1a52      	subs	r2, r2, r1
 23fdd7e:	f001 fc7e 	bl	23ff67e <memmove>
    return true;
 23fdd82:	2001      	movs	r0, #1
    --size_;
 23fdd84:	6863      	ldr	r3, [r4, #4]
 23fdd86:	3b01      	subs	r3, #1
 23fdd88:	6063      	str	r3, [r4, #4]
}
 23fdd8a:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fdd8c:	4608      	mov	r0, r1
 23fdd8e:	e7ed      	b.n	23fdd6c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fdd90:	2000      	movs	r0, #0
 23fdd92:	e7fa      	b.n	23fdd8a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fdd94 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fdd94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fdd96:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fdd98:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdd9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fdd9e:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdda0:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fdda2:	f7ff fc6c 	bl	23fd67e <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fdda6:	4620      	mov	r0, r4
 23fdda8:	a901      	add	r1, sp, #4
 23fddaa:	f7ff ffd8 	bl	23fdd5e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fddae:	b118      	cbz	r0, 23fddb8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fddb0:	6863      	ldr	r3, [r4, #4]
 23fddb2:	b90b      	cbnz	r3, 23fddb8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fddb4:	f7ff fddc 	bl	23fd970 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fddb8:	a803      	add	r0, sp, #12
 23fddba:	f7ff feca 	bl	23fdb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fddbe:	b004      	add	sp, #16
 23fddc0:	bd10      	pop	{r4, pc}

023fddc2 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fddc2:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fddc4:	b570      	push	{r4, r5, r6, lr}
 23fddc6:	4604      	mov	r4, r0
 23fddc8:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fddcc:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fddd0:	42ae      	cmp	r6, r5
 23fddd2:	d015      	beq.n	23fde00 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fddd4:	4620      	mov	r0, r4
 23fddd6:	f105 0110 	add.w	r1, r5, #16
 23fddda:	f7ff ffc0 	bl	23fdd5e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fddde:	6863      	ldr	r3, [r4, #4]
 23fdde0:	b90b      	cbnz	r3, 23fdde6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fdde2:	f7ff fdc5 	bl	23fd970 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fdde6:	69e0      	ldr	r0, [r4, #28]
 23fdde8:	6929      	ldr	r1, [r5, #16]
 23fddea:	6803      	ldr	r3, [r0, #0]
 23fddec:	68db      	ldr	r3, [r3, #12]
 23fddee:	4798      	blx	r3
        if (h.stream) {
 23fddf0:	6969      	ldr	r1, [r5, #20]
 23fddf2:	b119      	cbz	r1, 23fddfc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fddf4:	6a20      	ldr	r0, [r4, #32]
 23fddf6:	6803      	ldr	r3, [r0, #0]
 23fddf8:	68db      	ldr	r3, [r3, #12]
 23fddfa:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fddfc:	3518      	adds	r5, #24
 23fddfe:	e7e7      	b.n	23fddd0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fde00:	2618      	movs	r6, #24
 23fde02:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fde06:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fde0a:	42ae      	cmp	r6, r5
 23fde0c:	d004      	beq.n	23fde18 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fde0e:	4628      	mov	r0, r5
 23fde10:	f7ff faf2 	bl	23fd3f8 <_ZN6StringD1Ev>
 23fde14:	3518      	adds	r5, #24
 23fde16:	e7f8      	b.n	23fde0a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fde18:	2300      	movs	r3, #0
 23fde1a:	6163      	str	r3, [r4, #20]
}
 23fde1c:	bd70      	pop	{r4, r5, r6, pc}

023fde1e <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fde1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fde20:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fde22:	f7ff fda5 	bl	23fd970 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fde26:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fde2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fde2c:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fde2e:	f7ff fc26 	bl	23fd67e <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fde32:	4620      	mov	r0, r4
 23fde34:	f7ff ffc5 	bl	23fddc2 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fde38:	a801      	add	r0, sp, #4
 23fde3a:	f7ff fe8a 	bl	23fdb52 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fde3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fde40:	b108      	cbz	r0, 23fde46 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fde42:	f7fe fe3f 	bl	23fcac4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fde46:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fde4a:	2618      	movs	r6, #24
 23fde4c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fde50:	42ae      	cmp	r6, r5
 23fde52:	d004      	beq.n	23fde5e <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fde54:	4628      	mov	r0, r5
 23fde56:	f7ff facf 	bl	23fd3f8 <_ZN6StringD1Ev>
 23fde5a:	3518      	adds	r5, #24
 23fde5c:	e7f8      	b.n	23fde50 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fde5e:	6920      	ldr	r0, [r4, #16]
 23fde60:	f7ff f994 	bl	23fd18c <free>
 23fde64:	6820      	ldr	r0, [r4, #0]
 23fde66:	f7ff f991 	bl	23fd18c <free>
}
 23fde6a:	4620      	mov	r0, r4
 23fde6c:	b002      	add	sp, #8
 23fde6e:	bd70      	pop	{r4, r5, r6, pc}

023fde70 <__tcf_2>:
    static LogManager mgr;
 23fde70:	4801      	ldr	r0, [pc, #4]	; (23fde78 <__tcf_2+0x8>)
 23fde72:	f7ff bfd4 	b.w	23fde1e <_ZN5spark10LogManagerD1Ev>
 23fde76:	bf00      	nop
 23fde78:	1007ae78 	.word	0x1007ae78

023fde7c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fde7c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fde7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fde80:	4604      	mov	r4, r0
 23fde82:	460d      	mov	r5, r1
 23fde84:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fde86:	d915      	bls.n	23fdeb4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fde88:	4290      	cmp	r0, r2
 23fde8a:	d214      	bcs.n	23fdeb6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fde8c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fde90:	1a75      	subs	r5, r6, r1
 23fde92:	f1a1 0714 	sub.w	r7, r1, #20
 23fde96:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fde98:	42b7      	cmp	r7, r6
 23fde9a:	d01a      	beq.n	23fded2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fde9c:	b11c      	cbz	r4, 23fdea6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fde9e:	4631      	mov	r1, r6
 23fdea0:	4620      	mov	r0, r4
 23fdea2:	f7ff fc46 	bl	23fd732 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fdea6:	f106 0008 	add.w	r0, r6, #8
 23fdeaa:	f7ff fdfb 	bl	23fdaa4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fdeae:	3e14      	subs	r6, #20
 23fdeb0:	3c14      	subs	r4, #20
 23fdeb2:	e7f1      	b.n	23fde98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fdeb4:	d00d      	beq.n	23fded2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fdeb6:	42b5      	cmp	r5, r6
 23fdeb8:	d00b      	beq.n	23fded2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fdeba:	b11c      	cbz	r4, 23fdec4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fdebc:	4629      	mov	r1, r5
 23fdebe:	4620      	mov	r0, r4
 23fdec0:	f7ff fc37 	bl	23fd732 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fdec4:	f105 0008 	add.w	r0, r5, #8
 23fdec8:	f7ff fdec 	bl	23fdaa4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fdecc:	3514      	adds	r5, #20
 23fdece:	3414      	adds	r4, #20
 23fded0:	e7f1      	b.n	23fdeb6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fded2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fded4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fded4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fded6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fded8:	4604      	mov	r4, r0
 23fdeda:	460d      	mov	r5, r1
 23fdedc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fdede:	d914      	bls.n	23fdf0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fdee0:	4290      	cmp	r0, r2
 23fdee2:	d213      	bcs.n	23fdf0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fdee4:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fdee8:	1a75      	subs	r5, r6, r1
 23fdeea:	f1a1 0710 	sub.w	r7, r1, #16
 23fdeee:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fdef0:	42b7      	cmp	r7, r6
 23fdef2:	d018      	beq.n	23fdf26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fdef4:	b11c      	cbz	r4, 23fdefe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fdef6:	4631      	mov	r1, r6
 23fdef8:	4620      	mov	r0, r4
 23fdefa:	f7ff fae6 	bl	23fd4ca <_ZN6StringC1EOS_>
                end->~T();
 23fdefe:	4630      	mov	r0, r6
 23fdf00:	f7ff fa7a 	bl	23fd3f8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fdf04:	3e10      	subs	r6, #16
 23fdf06:	3c10      	subs	r4, #16
 23fdf08:	e7f2      	b.n	23fdef0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fdf0a:	d00c      	beq.n	23fdf26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fdf0c:	42b5      	cmp	r5, r6
 23fdf0e:	d00a      	beq.n	23fdf26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fdf10:	b11c      	cbz	r4, 23fdf1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fdf12:	4629      	mov	r1, r5
 23fdf14:	4620      	mov	r0, r4
 23fdf16:	f7ff fad8 	bl	23fd4ca <_ZN6StringC1EOS_>
                p->~T();
 23fdf1a:	4628      	mov	r0, r5
 23fdf1c:	f7ff fa6c 	bl	23fd3f8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fdf20:	3510      	adds	r5, #16
 23fdf22:	3410      	adds	r4, #16
 23fdf24:	e7f2      	b.n	23fdf0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fdf26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fdf28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fdf28:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fdf2a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fdf2c:	4605      	mov	r5, r0
        if (n > 0) {
 23fdf2e:	dd11      	ble.n	23fdf54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fdf30:	0130      	lsls	r0, r6, #4
 23fdf32:	f7ff f91d 	bl	23fd170 <malloc>
            if (!d) {
 23fdf36:	4604      	mov	r4, r0
 23fdf38:	b158      	cbz	r0, 23fdf52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fdf3a:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fdf3e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fdf42:	f7ff ffc7 	bl	23fded4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fdf46:	6828      	ldr	r0, [r5, #0]
 23fdf48:	f7ff f920 	bl	23fd18c <free>
        return true;
 23fdf4c:	2001      	movs	r0, #1
        data_ = d;
 23fdf4e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fdf50:	60ae      	str	r6, [r5, #8]
    }
 23fdf52:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fdf54:	2400      	movs	r4, #0
 23fdf56:	e7f6      	b.n	23fdf46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fdf58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fdf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdf5c:	4690      	mov	r8, r2
        capacity_(0) {
 23fdf5e:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fdf60:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fdf62:	b095      	sub	sp, #84	; 0x54
 23fdf64:	9103      	str	r1, [sp, #12]
    return size_;
 23fdf66:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fdf6a:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fdf6c:	4299      	cmp	r1, r3
        capacity_(0) {
 23fdf6e:	e9c0 3300 	strd	r3, r3, [r0]
 23fdf72:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fdf76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fdf7a:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fdf7e:	7602      	strb	r2, [r0, #24]
 23fdf80:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fdf82:	dc23      	bgt.n	23fdfcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fdf84:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fdf88:	2314      	movs	r3, #20
 23fdf8a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fdf8e:	42af      	cmp	r7, r5
 23fdf90:	d03b      	beq.n	23fe00a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fdf92:	4629      	mov	r1, r5
 23fdf94:	a80b      	add	r0, sp, #44	; 0x2c
 23fdf96:	f7ff fa98 	bl	23fd4ca <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fdf9a:	a90b      	add	r1, sp, #44	; 0x2c
 23fdf9c:	a80f      	add	r0, sp, #60	; 0x3c
 23fdf9e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fdfa0:	f7ff fa93 	bl	23fd4ca <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdfa4:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fdfa8:	4299      	cmp	r1, r3
 23fdfaa:	da1b      	bge.n	23fdfe4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fdfac:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fdfae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fdfb0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fdfb4:	4631      	mov	r1, r6
 23fdfb6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fdfba:	f106 0010 	add.w	r0, r6, #16
 23fdfbe:	f7ff ff89 	bl	23fded4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fdfc2:	b9ee      	cbnz	r6, 23fe000 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fdfc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fdfc6:	3301      	adds	r3, #1
 23fdfc8:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fdfca:	e011      	b.n	23fdff0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fdfcc:	a808      	add	r0, sp, #32
 23fdfce:	f7ff ffab 	bl	23fdf28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fdfd2:	2800      	cmp	r0, #0
 23fdfd4:	d1d6      	bne.n	23fdf84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fdfd6:	a808      	add	r0, sp, #32
 23fdfd8:	f7ff fab0 	bl	23fd53c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fdfdc:	4620      	mov	r0, r4
 23fdfde:	b015      	add	sp, #84	; 0x54
 23fdfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdfe4:	3101      	adds	r1, #1
 23fdfe6:	a808      	add	r0, sp, #32
 23fdfe8:	f7ff ff9e 	bl	23fdf28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fdfec:	2800      	cmp	r0, #0
 23fdfee:	d1dd      	bne.n	23fdfac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fdff0:	a80f      	add	r0, sp, #60	; 0x3c
 23fdff2:	f7ff fa01 	bl	23fd3f8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fdff6:	a80b      	add	r0, sp, #44	; 0x2c
 23fdff8:	f7ff f9fe 	bl	23fd3f8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fdffc:	3514      	adds	r5, #20
 23fdffe:	e7c6      	b.n	23fdf8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fe000:	4630      	mov	r0, r6
 23fe002:	a90f      	add	r1, sp, #60	; 0x3c
 23fe004:	f7ff fa61 	bl	23fd4ca <_ZN6StringC1EOS_>
 23fe008:	e7dc      	b.n	23fdfc4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fe00a:	2600      	movs	r6, #0
 23fe00c:	f04f 0914 	mov.w	r9, #20
 23fe010:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fe014:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fe016:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fe01a:	429e      	cmp	r6, r3
 23fe01c:	da7c      	bge.n	23fe118 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23fe01e:	0133      	lsls	r3, r6, #4
 23fe020:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fe022:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fe024:	b90b      	cbnz	r3, 23fe02a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fe026:	3601      	adds	r6, #1
 23fe028:	e7f5      	b.n	23fe016 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fe02a:	2300      	movs	r3, #0
 23fe02c:	9307      	str	r3, [sp, #28]
 23fe02e:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fe032:	ad0b      	add	r5, sp, #44	; 0x2c
 23fe034:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fe036:	a907      	add	r1, sp, #28
 23fe038:	a806      	add	r0, sp, #24
 23fe03a:	f7ff faf9 	bl	23fd630 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fe03e:	4682      	mov	sl, r0
 23fe040:	2800      	cmp	r0, #0
 23fe042:	d0f0      	beq.n	23fe026 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fe044:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe048:	4601      	mov	r1, r0
            bool found = false;
 23fe04a:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe04e:	4628      	mov	r0, r5
 23fe050:	9a07      	ldr	r2, [sp, #28]
 23fe052:	f10d 0317 	add.w	r3, sp, #23
 23fe056:	f7ff fb7f 	bl	23fd758 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe05a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe05e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe060:	2f00      	cmp	r7, #0
 23fe062:	d14a      	bne.n	23fe0fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fe064:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fe068:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fe06c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fe070:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fe074:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fe078:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fe07c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe07e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fe082:	4293      	cmp	r3, r2
 23fe084:	db17      	blt.n	23fe0b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fe086:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fe08a:	f1ba 0f00 	cmp.w	sl, #0
 23fe08e:	dd30      	ble.n	23fe0f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fe090:	fb09 f00a 	mul.w	r0, r9, sl
 23fe094:	f7ff f86c 	bl	23fd170 <malloc>
            if (!d) {
 23fe098:	4683      	mov	fp, r0
 23fe09a:	b360      	cbz	r0, 23fe0f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fe09c:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe0a0:	fb09 1202 	mla	r2, r9, r2, r1
 23fe0a4:	f7ff feea 	bl	23fde7c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fe0a8:	6828      	ldr	r0, [r5, #0]
 23fe0aa:	f7ff f86f 	bl	23fd18c <free>
        data_ = d;
 23fe0ae:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fe0b2:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fe0b6:	682b      	ldr	r3, [r5, #0]
 23fe0b8:	9a01      	ldr	r2, [sp, #4]
 23fe0ba:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fe0be:	686a      	ldr	r2, [r5, #4]
 23fe0c0:	4651      	mov	r1, sl
 23fe0c2:	fb09 3202 	mla	r2, r9, r2, r3
 23fe0c6:	f10a 0014 	add.w	r0, sl, #20
 23fe0ca:	f7ff fed7 	bl	23fde7c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fe0ce:	f1ba 0f00 	cmp.w	sl, #0
 23fe0d2:	d003      	beq.n	23fe0dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fe0d4:	4650      	mov	r0, sl
 23fe0d6:	a90f      	add	r1, sp, #60	; 0x3c
 23fe0d8:	f7ff fb2b 	bl	23fd732 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fe0dc:	686b      	ldr	r3, [r5, #4]
 23fe0de:	3301      	adds	r3, #1
 23fe0e0:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fe0e2:	a811      	add	r0, sp, #68	; 0x44
 23fe0e4:	f7ff fcde 	bl	23fdaa4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe0e8:	b13f      	cbz	r7, 23fe0fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fe0ea:	a80b      	add	r0, sp, #44	; 0x2c
 23fe0ec:	f7ff fcda 	bl	23fdaa4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe0f0:	e771      	b.n	23fdfd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fe0f2:	46bb      	mov	fp, r7
 23fe0f4:	e7d8      	b.n	23fe0a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe0f6:	2701      	movs	r7, #1
 23fe0f8:	e7f3      	b.n	23fe0e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fe0fa:	9b01      	ldr	r3, [sp, #4]
 23fe0fc:	682d      	ldr	r5, [r5, #0]
 23fe0fe:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fe102:	9b06      	ldr	r3, [sp, #24]
 23fe104:	781b      	ldrb	r3, [r3, #0]
 23fe106:	b92b      	cbnz	r3, 23fe114 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fe108:	f8d8 3000 	ldr.w	r3, [r8]
 23fe10c:	9a02      	ldr	r2, [sp, #8]
 23fe10e:	4413      	add	r3, r2
 23fe110:	7c1b      	ldrb	r3, [r3, #16]
 23fe112:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fe114:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fe116:	e78e      	b.n	23fe036 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe118:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe11a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe11c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe11e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe120:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe122:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fe124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fe126:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe128:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe12a:	60a2      	str	r2, [r4, #8]
 23fe12c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fe12e:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe130:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe132:	60e2      	str	r2, [r4, #12]
 23fe134:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fe136:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe138:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe13a:	6122      	str	r2, [r4, #16]
 23fe13c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fe13e:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fe140:	9b03      	ldr	r3, [sp, #12]
 23fe142:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fe144:	6162      	str	r2, [r4, #20]
 23fe146:	7623      	strb	r3, [r4, #24]
 23fe148:	e7cf      	b.n	23fe0ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fe14c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe14e:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fe150:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe152:	4617      	mov	r7, r2
 23fe154:	b087      	sub	sp, #28
 23fe156:	460d      	mov	r5, r1
        stream_(&stream) {
 23fe158:	4668      	mov	r0, sp
 23fe15a:	4619      	mov	r1, r3
 23fe15c:	f7fe f8ba 	bl	23fc2d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fe160:	4b0b      	ldr	r3, [pc, #44]	; (23fe190 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fe162:	4669      	mov	r1, sp
 23fe164:	f846 3b04 	str.w	r3, [r6], #4
 23fe168:	a803      	add	r0, sp, #12
 23fe16a:	f7fe f8b3 	bl	23fc2d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fe16e:	4639      	mov	r1, r7
 23fe170:	aa03      	add	r2, sp, #12
 23fe172:	4630      	mov	r0, r6
 23fe174:	f7ff fef0 	bl	23fdf58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe178:	a803      	add	r0, sp, #12
 23fe17a:	f7fd ff24 	bl	23fbfc6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fe17e:	4668      	mov	r0, sp
 23fe180:	f7fd ff21 	bl	23fbfc6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fe184:	4620      	mov	r0, r4
        stream_(&stream) {
 23fe186:	4b03      	ldr	r3, [pc, #12]	; (23fe194 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fe188:	6225      	str	r5, [r4, #32]
 23fe18a:	6023      	str	r3, [r4, #0]
}
 23fe18c:	b007      	add	sp, #28
 23fe18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fe190:	023ffa40 	.word	0x023ffa40
 23fe194:	023ffc58 	.word	0x023ffc58

023fe198 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fe198:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe19a:	460f      	mov	r7, r1
 23fe19c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe19e:	4638      	mov	r0, r7
 23fe1a0:	491c      	ldr	r1, [pc, #112]	; (23fe214 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fe1a2:	4616      	mov	r6, r2
 23fe1a4:	461d      	mov	r5, r3
 23fe1a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe1a8:	f7fd f9f6 	bl	23fb598 <strcmp>
 23fe1ac:	b9c0      	cbnz	r0, 23fe1e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fe1ae:	b1a4      	cbz	r4, 23fe1da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fe1b0:	4629      	mov	r1, r5
 23fe1b2:	a801      	add	r0, sp, #4
 23fe1b4:	f7ff fcbe 	bl	23fdb34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe1b8:	2024      	movs	r0, #36	; 0x24
 23fe1ba:	4917      	ldr	r1, [pc, #92]	; (23fe218 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe1bc:	f001 fa3c 	bl	23ff638 <_ZnwjRKSt9nothrow_t>
 23fe1c0:	4605      	mov	r5, r0
 23fe1c2:	b130      	cbz	r0, 23fe1d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fe1c4:	ab01      	add	r3, sp, #4
 23fe1c6:	4632      	mov	r2, r6
 23fe1c8:	4621      	mov	r1, r4
 23fe1ca:	f7ff ffbf 	bl	23fe14c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe1ce:	4b13      	ldr	r3, [pc, #76]	; (23fe21c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fe1d0:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe1d2:	a801      	add	r0, sp, #4
 23fe1d4:	f7fd fef7 	bl	23fbfc6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fe1d8:	462c      	mov	r4, r5
}
 23fe1da:	4620      	mov	r0, r4
 23fe1dc:	b005      	add	sp, #20
 23fe1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fe1e0:	4638      	mov	r0, r7
 23fe1e2:	490f      	ldr	r1, [pc, #60]	; (23fe220 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fe1e4:	f7fd f9d8 	bl	23fb598 <strcmp>
 23fe1e8:	b990      	cbnz	r0, 23fe210 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fe1ea:	2c00      	cmp	r4, #0
 23fe1ec:	d0f5      	beq.n	23fe1da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe1ee:	4629      	mov	r1, r5
 23fe1f0:	a801      	add	r0, sp, #4
 23fe1f2:	f7ff fc9f 	bl	23fdb34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe1f6:	2024      	movs	r0, #36	; 0x24
 23fe1f8:	4907      	ldr	r1, [pc, #28]	; (23fe218 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe1fa:	f001 fa1d 	bl	23ff638 <_ZnwjRKSt9nothrow_t>
 23fe1fe:	4605      	mov	r5, r0
 23fe200:	2800      	cmp	r0, #0
 23fe202:	d0e6      	beq.n	23fe1d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fe204:	4632      	mov	r2, r6
 23fe206:	4621      	mov	r1, r4
 23fe208:	ab01      	add	r3, sp, #4
 23fe20a:	f7ff ff9f 	bl	23fe14c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe20e:	e7e0      	b.n	23fe1d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fe210:	2400      	movs	r4, #0
 23fe212:	e7e2      	b.n	23fe1da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fe214:	023ffbd8 	.word	0x023ffbd8
 23fe218:	023ffe37 	.word	0x023ffe37
 23fe21c:	023ffc70 	.word	0x023ffc70
 23fe220:	023ffbdc 	.word	0x023ffbdc

023fe224 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fe224:	4b01      	ldr	r3, [pc, #4]	; (23fe22c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fe226:	4a02      	ldr	r2, [pc, #8]	; (23fe230 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fe228:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fe22a:	4770      	bx	lr
 23fe22c:	1007ae74 	.word	0x1007ae74
 23fe230:	023ffbed 	.word	0x023ffbed

023fe234 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe238:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fe23a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe23e:	4604      	mov	r4, r0
 23fe240:	460e      	mov	r6, r1
 23fe242:	4617      	mov	r7, r2
 23fe244:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fe246:	f000 fb41 	bl	23fe8cc <_Z16_fetch_usbserialv>
 23fe24a:	4581      	cmp	r9, r0
 23fe24c:	d04d      	beq.n	23fe2ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fe24e:	792b      	ldrb	r3, [r5, #4]
 23fe250:	0719      	lsls	r1, r3, #28
 23fe252:	d504      	bpl.n	23fe25e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fe254:	4620      	mov	r0, r4
 23fe256:	696a      	ldr	r2, [r5, #20]
 23fe258:	4954      	ldr	r1, [pc, #336]	; (23fe3ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fe25a:	f7ff fae2 	bl	23fd822 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fe25e:	f1b8 0f00 	cmp.w	r8, #0
 23fe262:	d00d      	beq.n	23fe280 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fe264:	215b      	movs	r1, #91	; 0x5b
 23fe266:	4620      	mov	r0, r4
 23fe268:	f7ff fa57 	bl	23fd71a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fe26c:	4641      	mov	r1, r8
 23fe26e:	4620      	mov	r0, r4
 23fe270:	f7ff fa44 	bl	23fd6fc <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fe274:	6823      	ldr	r3, [r4, #0]
 23fe276:	2202      	movs	r2, #2
 23fe278:	4620      	mov	r0, r4
 23fe27a:	68db      	ldr	r3, [r3, #12]
 23fe27c:	494c      	ldr	r1, [pc, #304]	; (23fe3b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fe27e:	4798      	blx	r3
    if (attr.has_file) {
 23fe280:	792b      	ldrb	r3, [r5, #4]
 23fe282:	07da      	lsls	r2, r3, #31
 23fe284:	d524      	bpl.n	23fe2d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fe286:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fe28a:	212f      	movs	r1, #47	; 0x2f
 23fe28c:	4640      	mov	r0, r8
 23fe28e:	f001 fa7a 	bl	23ff786 <strrchr>
    if (s1) {
 23fe292:	b108      	cbz	r0, 23fe298 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fe294:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fe298:	4641      	mov	r1, r8
 23fe29a:	4620      	mov	r0, r4
 23fe29c:	f7ff fa2e 	bl	23fd6fc <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fe2a0:	792b      	ldrb	r3, [r5, #4]
 23fe2a2:	079b      	lsls	r3, r3, #30
 23fe2a4:	d508      	bpl.n	23fe2b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fe2a6:	213a      	movs	r1, #58	; 0x3a
 23fe2a8:	4620      	mov	r0, r4
 23fe2aa:	f7ff fa36 	bl	23fd71a <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fe2ae:	4620      	mov	r0, r4
 23fe2b0:	68ea      	ldr	r2, [r5, #12]
 23fe2b2:	4940      	ldr	r1, [pc, #256]	; (23fe3b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fe2b4:	f7ff fab5 	bl	23fd822 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fe2b8:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fe2ba:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fe2bc:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fe2c0:	4620      	mov	r0, r4
            write(", ", 2);
 23fe2c2:	f04f 0202 	mov.w	r2, #2
 23fe2c6:	68db      	ldr	r3, [r3, #12]
 23fe2c8:	bf14      	ite	ne
 23fe2ca:	493b      	ldrne	r1, [pc, #236]	; (23fe3b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fe2cc:	493b      	ldreq	r1, [pc, #236]	; (23fe3bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe2ce:	4798      	blx	r3
    if (attr.has_function) {
 23fe2d0:	792b      	ldrb	r3, [r5, #4]
 23fe2d2:	0758      	lsls	r0, r3, #29
 23fe2d4:	d51d      	bpl.n	23fe312 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe2d6:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe2d8:	460b      	mov	r3, r1
 23fe2da:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fe2dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe2e0:	b160      	cbz	r0, 23fe2fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fe2e2:	2820      	cmp	r0, #32
 23fe2e4:	d108      	bne.n	23fe2f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fe2e6:	4619      	mov	r1, r3
 23fe2e8:	e7f7      	b.n	23fe2da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fe2ea:	4835      	ldr	r0, [pc, #212]	; (23fe3c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fe2ec:	f000 fc31 	bl	23feb52 <_ZN5spark12NetworkClass9listeningEv>
 23fe2f0:	2800      	cmp	r0, #0
 23fe2f2:	d0ac      	beq.n	23fe24e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fe2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fe2f8:	2828      	cmp	r0, #40	; 0x28
 23fe2fa:	d1ee      	bne.n	23fe2da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fe2fc:	6823      	ldr	r3, [r4, #0]
 23fe2fe:	1a52      	subs	r2, r2, r1
 23fe300:	4620      	mov	r0, r4
 23fe302:	68db      	ldr	r3, [r3, #12]
 23fe304:	4798      	blx	r3
        write("(): ", 4);
 23fe306:	6823      	ldr	r3, [r4, #0]
 23fe308:	2204      	movs	r2, #4
 23fe30a:	4620      	mov	r0, r4
 23fe30c:	68db      	ldr	r3, [r3, #12]
 23fe30e:	492d      	ldr	r1, [pc, #180]	; (23fe3c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fe310:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fe312:	2100      	movs	r1, #0
 23fe314:	4638      	mov	r0, r7
 23fe316:	f7fe fdcd 	bl	23fceb4 <log_level_name>
 23fe31a:	4601      	mov	r1, r0
    write(s);
 23fe31c:	4620      	mov	r0, r4
 23fe31e:	f7ff f9ed 	bl	23fd6fc <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fe322:	6823      	ldr	r3, [r4, #0]
 23fe324:	2202      	movs	r2, #2
 23fe326:	4620      	mov	r0, r4
 23fe328:	68db      	ldr	r3, [r3, #12]
 23fe32a:	4924      	ldr	r1, [pc, #144]	; (23fe3bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe32c:	4798      	blx	r3
    if (msg) {
 23fe32e:	b11e      	cbz	r6, 23fe338 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fe330:	4631      	mov	r1, r6
 23fe332:	4620      	mov	r0, r4
 23fe334:	f7ff f9e2 	bl	23fd6fc <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fe338:	792b      	ldrb	r3, [r5, #4]
 23fe33a:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fe33e:	d02c      	beq.n	23fe39a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fe340:	6823      	ldr	r3, [r4, #0]
 23fe342:	4921      	ldr	r1, [pc, #132]	; (23fe3c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fe344:	68db      	ldr	r3, [r3, #12]
 23fe346:	2202      	movs	r2, #2
 23fe348:	4620      	mov	r0, r4
 23fe34a:	4798      	blx	r3
        if (attr.has_code) {
 23fe34c:	792b      	ldrb	r3, [r5, #4]
 23fe34e:	06d9      	lsls	r1, r3, #27
 23fe350:	d50a      	bpl.n	23fe368 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fe352:	6823      	ldr	r3, [r4, #0]
 23fe354:	2207      	movs	r2, #7
 23fe356:	4620      	mov	r0, r4
 23fe358:	491c      	ldr	r1, [pc, #112]	; (23fe3cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fe35a:	68db      	ldr	r3, [r3, #12]
 23fe35c:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fe35e:	4620      	mov	r0, r4
 23fe360:	69aa      	ldr	r2, [r5, #24]
 23fe362:	491b      	ldr	r1, [pc, #108]	; (23fe3d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fe364:	f7ff fa5d 	bl	23fd822 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fe368:	792b      	ldrb	r3, [r5, #4]
 23fe36a:	069a      	lsls	r2, r3, #26
 23fe36c:	d511      	bpl.n	23fe392 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fe36e:	06db      	lsls	r3, r3, #27
 23fe370:	d505      	bpl.n	23fe37e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fe372:	6823      	ldr	r3, [r4, #0]
 23fe374:	2202      	movs	r2, #2
 23fe376:	4620      	mov	r0, r4
 23fe378:	68db      	ldr	r3, [r3, #12]
 23fe37a:	490f      	ldr	r1, [pc, #60]	; (23fe3b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fe37c:	4798      	blx	r3
            write("details = ", 10);
 23fe37e:	6823      	ldr	r3, [r4, #0]
 23fe380:	4620      	mov	r0, r4
 23fe382:	4914      	ldr	r1, [pc, #80]	; (23fe3d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fe384:	220a      	movs	r2, #10
 23fe386:	68db      	ldr	r3, [r3, #12]
 23fe388:	4798      	blx	r3
            write(attr.details);
 23fe38a:	4620      	mov	r0, r4
 23fe38c:	69e9      	ldr	r1, [r5, #28]
 23fe38e:	f7ff f9b5 	bl	23fd6fc <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fe392:	215d      	movs	r1, #93	; 0x5d
 23fe394:	4620      	mov	r0, r4
 23fe396:	f7ff f9c0 	bl	23fd71a <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fe39a:	6823      	ldr	r3, [r4, #0]
 23fe39c:	4620      	mov	r0, r4
}
 23fe39e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fe3a2:	2202      	movs	r2, #2
 23fe3a4:	68db      	ldr	r3, [r3, #12]
 23fe3a6:	490c      	ldr	r1, [pc, #48]	; (23fe3d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fe3a8:	4718      	bx	r3
 23fe3aa:	bf00      	nop
 23fe3ac:	023ffbf1 	.word	0x023ffbf1
 23fe3b0:	023ffbf8 	.word	0x023ffbf8
 23fe3b4:	023ffa03 	.word	0x023ffa03
 23fe3b8:	023ffbfb 	.word	0x023ffbfb
 23fe3bc:	023ffc00 	.word	0x023ffc00
 23fe3c0:	1007aedc 	.word	0x1007aedc
 23fe3c4:	023ffbfe 	.word	0x023ffbfe
 23fe3c8:	023ffc03 	.word	0x023ffc03
 23fe3cc:	023ffc06 	.word	0x023ffc06
 23fe3d0:	023ffc0e 	.word	0x023ffc0e
 23fe3d4:	023ffc11 	.word	0x023ffc11
 23fe3d8:	023ffc1c 	.word	0x023ffc1c

023fe3dc <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe3e0:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fe3e2:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe3e4:	460d      	mov	r5, r1
 23fe3e6:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fe3e8:	f000 fa70 	bl	23fe8cc <_Z16_fetch_usbserialv>
 23fe3ec:	4287      	cmp	r7, r0
 23fe3ee:	d007      	beq.n	23fe400 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fe3f0:	6a20      	ldr	r0, [r4, #32]
 23fe3f2:	4632      	mov	r2, r6
 23fe3f4:	6803      	ldr	r3, [r0, #0]
 23fe3f6:	4629      	mov	r1, r5
}
 23fe3f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fe3fc:	68db      	ldr	r3, [r3, #12]
 23fe3fe:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fe400:	4803      	ldr	r0, [pc, #12]	; (23fe410 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fe402:	f000 fba6 	bl	23feb52 <_ZN5spark12NetworkClass9listeningEv>
 23fe406:	2800      	cmp	r0, #0
 23fe408:	d0f2      	beq.n	23fe3f0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fe40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe40e:	bf00      	nop
 23fe410:	1007aedc 	.word	0x1007aedc

023fe414 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe418:	b085      	sub	sp, #20
    return stream_;
 23fe41a:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fe41e:	4605      	mov	r5, r0
 23fe420:	460f      	mov	r7, r1
 23fe422:	4690      	mov	r8, r2
 23fe424:	461e      	mov	r6, r3
 23fe426:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fe428:	f000 fa50 	bl	23fe8cc <_Z16_fetch_usbserialv>
 23fe42c:	4581      	cmp	r9, r0
 23fe42e:	d105      	bne.n	23fe43c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fe430:	4849      	ldr	r0, [pc, #292]	; (23fe558 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fe432:	f000 fb8e 	bl	23feb52 <_ZN5spark12NetworkClass9listeningEv>
 23fe436:	2800      	cmp	r0, #0
 23fe438:	f040 808a 	bne.w	23fe550 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fe43c:	f04f 0900 	mov.w	r9, #0
 23fe440:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fe442:	4a46      	ldr	r2, [pc, #280]	; (23fe55c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fe444:	a801      	add	r0, sp, #4
 23fe446:	9201      	str	r2, [sp, #4]
 23fe448:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fe44a:	f88d 9008 	strb.w	r9, [sp, #8]
 23fe44e:	f000 fd3e 	bl	23feece <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fe452:	4649      	mov	r1, r9
 23fe454:	4640      	mov	r0, r8
 23fe456:	f7fe fd2d 	bl	23fceb4 <log_level_name>
 23fe45a:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fe45c:	4940      	ldr	r1, [pc, #256]	; (23fe560 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fe45e:	2201      	movs	r2, #1
 23fe460:	a801      	add	r0, sp, #4
 23fe462:	f000 fdc3 	bl	23fefec <_ZN5spark10JSONWriter4nameEPKcj>
 23fe466:	4641      	mov	r1, r8
 23fe468:	f7ff f93a 	bl	23fd6e0 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fe46c:	b13f      	cbz	r7, 23fe47e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fe46e:	493d      	ldr	r1, [pc, #244]	; (23fe564 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fe470:	2201      	movs	r2, #1
 23fe472:	a801      	add	r0, sp, #4
 23fe474:	f000 fdba 	bl	23fefec <_ZN5spark10JSONWriter4nameEPKcj>
 23fe478:	4639      	mov	r1, r7
 23fe47a:	f7ff f931 	bl	23fd6e0 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fe47e:	b13e      	cbz	r6, 23fe490 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fe480:	4939      	ldr	r1, [pc, #228]	; (23fe568 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fe482:	2201      	movs	r2, #1
 23fe484:	a801      	add	r0, sp, #4
 23fe486:	f000 fdb1 	bl	23fefec <_ZN5spark10JSONWriter4nameEPKcj>
 23fe48a:	4631      	mov	r1, r6
 23fe48c:	f7ff f928 	bl	23fd6e0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fe490:	7923      	ldrb	r3, [r4, #4]
 23fe492:	07df      	lsls	r7, r3, #31
 23fe494:	d50e      	bpl.n	23fe4b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fe496:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fe498:	212f      	movs	r1, #47	; 0x2f
 23fe49a:	4630      	mov	r0, r6
 23fe49c:	f001 f973 	bl	23ff786 <strrchr>
    if (s1) {
 23fe4a0:	b100      	cbz	r0, 23fe4a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fe4a2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fe4a4:	4931      	ldr	r1, [pc, #196]	; (23fe56c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fe4a6:	2201      	movs	r2, #1
 23fe4a8:	a801      	add	r0, sp, #4
 23fe4aa:	f000 fd9f 	bl	23fefec <_ZN5spark10JSONWriter4nameEPKcj>
 23fe4ae:	4631      	mov	r1, r6
 23fe4b0:	f7ff f916 	bl	23fd6e0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fe4b4:	7923      	ldrb	r3, [r4, #4]
 23fe4b6:	079e      	lsls	r6, r3, #30
 23fe4b8:	d507      	bpl.n	23fe4ca <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fe4ba:	492d      	ldr	r1, [pc, #180]	; (23fe570 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fe4bc:	2202      	movs	r2, #2
 23fe4be:	a801      	add	r0, sp, #4
 23fe4c0:	f000 fd94 	bl	23fefec <_ZN5spark10JSONWriter4nameEPKcj>
 23fe4c4:	68e1      	ldr	r1, [r4, #12]
 23fe4c6:	f000 fd0f 	bl	23feee8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fe4ca:	7923      	ldrb	r3, [r4, #4]
 23fe4cc:	0758      	lsls	r0, r3, #29
 23fe4ce:	d514      	bpl.n	23fe4fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe4d0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe4d2:	4633      	mov	r3, r6
 23fe4d4:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fe4d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe4da:	b12a      	cbz	r2, 23fe4e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fe4dc:	2a20      	cmp	r2, #32
 23fe4de:	d101      	bne.n	23fe4e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fe4e0:	461e      	mov	r6, r3
 23fe4e2:	e7f7      	b.n	23fe4d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fe4e4:	2a28      	cmp	r2, #40	; 0x28
 23fe4e6:	d1f5      	bne.n	23fe4d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fe4e8:	2202      	movs	r2, #2
 23fe4ea:	4922      	ldr	r1, [pc, #136]	; (23fe574 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fe4ec:	a801      	add	r0, sp, #4
 23fe4ee:	f000 fd7d 	bl	23fefec <_ZN5spark10JSONWriter4nameEPKcj>
 23fe4f2:	4631      	mov	r1, r6
 23fe4f4:	1bba      	subs	r2, r7, r6
 23fe4f6:	f000 fd89 	bl	23ff00c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fe4fa:	7923      	ldrb	r3, [r4, #4]
 23fe4fc:	0719      	lsls	r1, r3, #28
 23fe4fe:	d507      	bpl.n	23fe510 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fe500:	491d      	ldr	r1, [pc, #116]	; (23fe578 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fe502:	2201      	movs	r2, #1
 23fe504:	a801      	add	r0, sp, #4
 23fe506:	f000 fd71 	bl	23fefec <_ZN5spark10JSONWriter4nameEPKcj>
 23fe50a:	6961      	ldr	r1, [r4, #20]
 23fe50c:	f000 fcfe 	bl	23fef0c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fe510:	7923      	ldrb	r3, [r4, #4]
 23fe512:	06da      	lsls	r2, r3, #27
 23fe514:	d508      	bpl.n	23fe528 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fe516:	2204      	movs	r2, #4
 23fe518:	4918      	ldr	r1, [pc, #96]	; (23fe57c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fe51a:	eb0d 0002 	add.w	r0, sp, r2
 23fe51e:	f000 fd65 	bl	23fefec <_ZN5spark10JSONWriter4nameEPKcj>
 23fe522:	69a1      	ldr	r1, [r4, #24]
 23fe524:	f000 fce0 	bl	23feee8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fe528:	7923      	ldrb	r3, [r4, #4]
 23fe52a:	069b      	lsls	r3, r3, #26
 23fe52c:	d507      	bpl.n	23fe53e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fe52e:	4914      	ldr	r1, [pc, #80]	; (23fe580 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fe530:	2206      	movs	r2, #6
 23fe532:	a801      	add	r0, sp, #4
 23fe534:	f000 fd5a 	bl	23fefec <_ZN5spark10JSONWriter4nameEPKcj>
 23fe538:	69e1      	ldr	r1, [r4, #28]
 23fe53a:	f7ff f8d1 	bl	23fd6e0 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fe53e:	a801      	add	r0, sp, #4
 23fe540:	f000 fcaf 	bl	23feea2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fe544:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fe546:	2202      	movs	r2, #2
 23fe548:	6803      	ldr	r3, [r0, #0]
 23fe54a:	490e      	ldr	r1, [pc, #56]	; (23fe584 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fe54c:	68db      	ldr	r3, [r3, #12]
 23fe54e:	4798      	blx	r3
}
 23fe550:	b005      	add	sp, #20
 23fe552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fe556:	bf00      	nop
 23fe558:	1007aedc 	.word	0x1007aedc
 23fe55c:	023ffc40 	.word	0x023ffc40
 23fe560:	023ffbce 	.word	0x023ffbce
 23fe564:	023ffc1f 	.word	0x023ffc1f
 23fe568:	023ffeca 	.word	0x023ffeca
 23fe56c:	023ffc21 	.word	0x023ffc21
 23fe570:	023ffc23 	.word	0x023ffc23
 23fe574:	023ffc26 	.word	0x023ffc26
 23fe578:	023ffc29 	.word	0x023ffc29
 23fe57c:	023ffc2b 	.word	0x023ffc2b
 23fe580:	023ffc30 	.word	0x023ffc30
 23fe584:	023ffc1c 	.word	0x023ffc1c

023fe588 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fe588:	4b02      	ldr	r3, [pc, #8]	; (23fe594 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fe58a:	681a      	ldr	r2, [r3, #0]
 23fe58c:	4b02      	ldr	r3, [pc, #8]	; (23fe598 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fe58e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fe590:	4770      	bx	lr
 23fe592:	bf00      	nop
 23fe594:	1007a454 	.word	0x1007a454
 23fe598:	1007aea0 	.word	0x1007aea0

023fe59c <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 23fe59c:	428a      	cmp	r2, r1
{
 23fe59e:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
 23fe5a0:	d007      	beq.n	23fe5b2 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 23fe5a2:	1a44      	subs	r4, r0, r1
 23fe5a4:	9802      	ldr	r0, [sp, #8]
 23fe5a6:	1ac0      	subs	r0, r0, r3
 23fe5a8:	4344      	muls	r4, r0
 23fe5aa:	1a50      	subs	r0, r2, r1
 23fe5ac:	fb94 f0f0 	sdiv	r0, r4, r0
 23fe5b0:	4418      	add	r0, r3
}
 23fe5b2:	bd10      	pop	{r4, pc}

023fe5b4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fe5b4:	2100      	movs	r1, #0
 23fe5b6:	f7fe bca7 	b.w	23fcf08 <system_delay_ms>
	...

023fe5bc <_GLOBAL__sub_I_RGB>:
 23fe5bc:	2200      	movs	r2, #0
 23fe5be:	4b01      	ldr	r3, [pc, #4]	; (23fe5c4 <_GLOBAL__sub_I_RGB+0x8>)
 23fe5c0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fe5c2:	4770      	bx	lr
 23fe5c4:	1007aea4 	.word	0x1007aea4

023fe5c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fe5c8:	4b01      	ldr	r3, [pc, #4]	; (23fe5d0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fe5ca:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fe5cc:	4770      	bx	lr
 23fe5ce:	bf00      	nop
 23fe5d0:	1007a458 	.word	0x1007a458

023fe5d4 <serialEventRun>:
{
 23fe5d4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fe5d6:	4b0f      	ldr	r3, [pc, #60]	; (23fe614 <serialEventRun+0x40>)
 23fe5d8:	b143      	cbz	r3, 23fe5ec <serialEventRun+0x18>
 23fe5da:	f000 f977 	bl	23fe8cc <_Z16_fetch_usbserialv>
 23fe5de:	6803      	ldr	r3, [r0, #0]
 23fe5e0:	691b      	ldr	r3, [r3, #16]
 23fe5e2:	4798      	blx	r3
 23fe5e4:	2800      	cmp	r0, #0
 23fe5e6:	dd01      	ble.n	23fe5ec <serialEventRun+0x18>
        serialEvent();
 23fe5e8:	e000      	b.n	23fe5ec <serialEventRun+0x18>
 23fe5ea:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fe5ec:	4b0a      	ldr	r3, [pc, #40]	; (23fe618 <serialEventRun+0x44>)
 23fe5ee:	b143      	cbz	r3, 23fe602 <serialEventRun+0x2e>
 23fe5f0:	f000 fdb4 	bl	23ff15c <_Z22__fetch_global_Serial1v>
 23fe5f4:	6803      	ldr	r3, [r0, #0]
 23fe5f6:	691b      	ldr	r3, [r3, #16]
 23fe5f8:	4798      	blx	r3
 23fe5fa:	2800      	cmp	r0, #0
 23fe5fc:	dd01      	ble.n	23fe602 <serialEventRun+0x2e>
        serialEvent1();
 23fe5fe:	e000      	b.n	23fe602 <serialEventRun+0x2e>
 23fe600:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fe602:	4b06      	ldr	r3, [pc, #24]	; (23fe61c <serialEventRun+0x48>)
 23fe604:	b10b      	cbz	r3, 23fe60a <serialEventRun+0x36>
 23fe606:	f000 fdef 	bl	23ff1e8 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fe60a:	4b05      	ldr	r3, [pc, #20]	; (23fe620 <serialEventRun+0x4c>)
 23fe60c:	b10b      	cbz	r3, 23fe612 <serialEventRun+0x3e>
 23fe60e:	f000 fe21 	bl	23ff254 <_Z15serialEventRun3v>
}
 23fe612:	bd08      	pop	{r3, pc}
	...

023fe624 <_post_loop>:
{
 23fe624:	b508      	push	{r3, lr}
	serialEventRun();
 23fe626:	f7ff ffd5 	bl	23fe5d4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fe62a:	f7fe fa2f 	bl	23fca8c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fe62e:	4b01      	ldr	r3, [pc, #4]	; (23fe634 <_post_loop+0x10>)
 23fe630:	6018      	str	r0, [r3, #0]
}
 23fe632:	bd08      	pop	{r3, pc}
 23fe634:	1007af38 	.word	0x1007af38

023fe638 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fe638:	4805      	ldr	r0, [pc, #20]	; (23fe650 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fe63a:	4a06      	ldr	r2, [pc, #24]	; (23fe654 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fe63c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fe63e:	1a12      	subs	r2, r2, r0
 23fe640:	4905      	ldr	r1, [pc, #20]	; (23fe658 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fe642:	f001 f80f 	bl	23ff664 <memcpy>
    __backup_sram_signature = signature;
 23fe646:	4b05      	ldr	r3, [pc, #20]	; (23fe65c <_Z33system_initialize_user_backup_ramv+0x24>)
 23fe648:	4a05      	ldr	r2, [pc, #20]	; (23fe660 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fe64a:	601a      	str	r2, [r3, #0]
}
 23fe64c:	bd08      	pop	{r3, pc}
 23fe64e:	bf00      	nop
 23fe650:	1007b400 	.word	0x1007b400
 23fe654:	1007b404 	.word	0x1007b404
 23fe658:	085ff384 	.word	0x085ff384
 23fe65c:	1007b400 	.word	0x1007b400
 23fe660:	9a271c1e 	.word	0x9a271c1e

023fe664 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe664:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fe666:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe668:	461a      	mov	r2, r3
 23fe66a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fe66e:	9300      	str	r3, [sp, #0]
 23fe670:	f7fe fc82 	bl	23fcf78 <system_ctrl_set_result>
}
 23fe674:	b003      	add	sp, #12
 23fe676:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fe67c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fe67c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fe67e:	8843      	ldrh	r3, [r0, #2]
 23fe680:	2b0a      	cmp	r3, #10
 23fe682:	d008      	beq.n	23fe696 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fe684:	2b50      	cmp	r3, #80	; 0x50
 23fe686:	d10b      	bne.n	23fe6a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fe688:	4b09      	ldr	r3, [pc, #36]	; (23fe6b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fe68a:	681b      	ldr	r3, [r3, #0]
 23fe68c:	b14b      	cbz	r3, 23fe6a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fe68e:	b003      	add	sp, #12
 23fe690:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fe694:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fe696:	f7ff ffe5 	bl	23fe664 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fe69a:	b003      	add	sp, #12
 23fe69c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe6a0:	2300      	movs	r3, #0
 23fe6a2:	461a      	mov	r2, r3
 23fe6a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fe6a8:	9300      	str	r3, [sp, #0]
 23fe6aa:	f7fe fc65 	bl	23fcf78 <system_ctrl_set_result>
}
 23fe6ae:	e7f4      	b.n	23fe69a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fe6b0:	1007aeb8 	.word	0x1007aeb8

023fe6b4 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fe6b4:	2100      	movs	r1, #0
{
 23fe6b6:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fe6b8:	4811      	ldr	r0, [pc, #68]	; (23fe700 <module_user_init_hook+0x4c>)
 23fe6ba:	f7fe fdbb 	bl	23fd234 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fe6be:	4b11      	ldr	r3, [pc, #68]	; (23fe704 <module_user_init_hook+0x50>)
 23fe6c0:	681a      	ldr	r2, [r3, #0]
 23fe6c2:	4b11      	ldr	r3, [pc, #68]	; (23fe708 <module_user_init_hook+0x54>)
 23fe6c4:	429a      	cmp	r2, r3
 23fe6c6:	bf0c      	ite	eq
 23fe6c8:	2201      	moveq	r2, #1
 23fe6ca:	2200      	movne	r2, #0
 23fe6cc:	4b0f      	ldr	r3, [pc, #60]	; (23fe70c <module_user_init_hook+0x58>)
 23fe6ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fe6d0:	d001      	beq.n	23fe6d6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fe6d2:	f7ff ffb1 	bl	23fe638 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fe6d6:	f7fe f9bd 	bl	23fca54 <HAL_RNG_GetRandomNumber>
 23fe6da:	4604      	mov	r4, r0
    srand(seed);
 23fe6dc:	f000 fff2 	bl	23ff6c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fe6e0:	4b0b      	ldr	r3, [pc, #44]	; (23fe710 <module_user_init_hook+0x5c>)
 23fe6e2:	b113      	cbz	r3, 23fe6ea <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fe6e4:	4620      	mov	r0, r4
 23fe6e6:	e000      	b.n	23fe6ea <module_user_init_hook+0x36>
 23fe6e8:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fe6ea:	2100      	movs	r1, #0
 23fe6ec:	4808      	ldr	r0, [pc, #32]	; (23fe710 <module_user_init_hook+0x5c>)
 23fe6ee:	f7fe fd31 	bl	23fd154 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fe6f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fe6f6:	2100      	movs	r1, #0
 23fe6f8:	4806      	ldr	r0, [pc, #24]	; (23fe714 <module_user_init_hook+0x60>)
 23fe6fa:	f7fe bc2f 	b.w	23fcf5c <system_ctrl_set_app_request_handler>
 23fe6fe:	bf00      	nop
 23fe700:	023fe5c9 	.word	0x023fe5c9
 23fe704:	1007b400 	.word	0x1007b400
 23fe708:	9a271c1e 	.word	0x9a271c1e
 23fe70c:	1007aeb4 	.word	0x1007aeb4
 23fe710:	00000000 	.word	0x00000000
 23fe714:	023fe67d 	.word	0x023fe67d

023fe718 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fe718:	4770      	bx	lr

023fe71a <_ZN9IPAddressD0Ev>:
 23fe71a:	b510      	push	{r4, lr}
 23fe71c:	4604      	mov	r4, r0
 23fe71e:	2118      	movs	r1, #24
 23fe720:	f7fc ff6f 	bl	23fb602 <_ZdlPvj>
 23fe724:	4620      	mov	r0, r4
 23fe726:	bd10      	pop	{r4, pc}

023fe728 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fe728:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fe72a:	7d03      	ldrb	r3, [r0, #20]
{
 23fe72c:	460e      	mov	r6, r1
	if (address.v==6) {
 23fe72e:	2b06      	cmp	r3, #6
 23fe730:	f04f 0400 	mov.w	r4, #0
{
 23fe734:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe736:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fe73a:	d012      	beq.n	23fe762 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fe73c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fe740:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fe744:	220a      	movs	r2, #10
 23fe746:	4630      	mov	r0, r6
 23fe748:	f7fe ff45 	bl	23fd5d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fe74c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fe74e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fe750:	d019      	beq.n	23fe786 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fe752:	2c00      	cmp	r4, #0
 23fe754:	d0f4      	beq.n	23fe740 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fe756:	212e      	movs	r1, #46	; 0x2e
 23fe758:	4630      	mov	r0, r6
 23fe75a:	f7fe ff39 	bl	23fd5d0 <_ZN5Print5printEc>
 23fe75e:	4404      	add	r4, r0
 23fe760:	e7ee      	b.n	23fe740 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe762:	232f      	movs	r3, #47	; 0x2f
 23fe764:	466a      	mov	r2, sp
 23fe766:	4639      	mov	r1, r7
 23fe768:	200a      	movs	r0, #10
		buf[0] = 0;
 23fe76a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe76e:	f7fe f9d3 	bl	23fcb18 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fe772:	4668      	mov	r0, sp
 23fe774:	f7fc ff1a 	bl	23fb5ac <strlen>
 23fe778:	6833      	ldr	r3, [r6, #0]
 23fe77a:	4602      	mov	r2, r0
 23fe77c:	4669      	mov	r1, sp
 23fe77e:	4630      	mov	r0, r6
 23fe780:	68db      	ldr	r3, [r3, #12]
 23fe782:	4798      	blx	r3
 23fe784:	4604      	mov	r4, r0
    }
    return n;
}
 23fe786:	4620      	mov	r0, r4
 23fe788:	b00d      	add	sp, #52	; 0x34
 23fe78a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fe78c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fe78c:	b510      	push	{r4, lr}
 23fe78e:	4604      	mov	r4, r0
 23fe790:	4b04      	ldr	r3, [pc, #16]	; (23fe7a4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fe792:	2211      	movs	r2, #17
 23fe794:	2100      	movs	r1, #0
 23fe796:	f840 3b04 	str.w	r3, [r0], #4
 23fe79a:	f000 ff8a 	bl	23ff6b2 <memset>
}
 23fe79e:	4620      	mov	r0, r4
 23fe7a0:	bd10      	pop	{r4, pc}
 23fe7a2:	bf00      	nop
 23fe7a4:	023ffcd4 	.word	0x023ffcd4

023fe7a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fe7a8:	4603      	mov	r3, r0
 23fe7aa:	4a07      	ldr	r2, [pc, #28]	; (23fe7c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fe7ac:	b510      	push	{r4, lr}
 23fe7ae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fe7b2:	f101 0210 	add.w	r2, r1, #16
 23fe7b6:	f851 4b04 	ldr.w	r4, [r1], #4
 23fe7ba:	4291      	cmp	r1, r2
 23fe7bc:	f843 4b04 	str.w	r4, [r3], #4
 23fe7c0:	d1f9      	bne.n	23fe7b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fe7c2:	780a      	ldrb	r2, [r1, #0]
 23fe7c4:	701a      	strb	r2, [r3, #0]
}
 23fe7c6:	bd10      	pop	{r4, pc}
 23fe7c8:	023ffcd4 	.word	0x023ffcd4

023fe7cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fe7cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fe7ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fe7d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fe7d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fe7da:	2304      	movs	r3, #4
 23fe7dc:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fe7e0:	6041      	str	r1, [r0, #4]
 23fe7e2:	7503      	strb	r3, [r0, #20]
}
 23fe7e4:	bd10      	pop	{r4, pc}
	...

023fe7e8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fe7e8:	b507      	push	{r0, r1, r2, lr}
 23fe7ea:	4b06      	ldr	r3, [pc, #24]	; (23fe804 <_ZN9IPAddressC1EPKh+0x1c>)
 23fe7ec:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fe7ee:	78cb      	ldrb	r3, [r1, #3]
 23fe7f0:	9300      	str	r3, [sp, #0]
 23fe7f2:	788b      	ldrb	r3, [r1, #2]
 23fe7f4:	784a      	ldrb	r2, [r1, #1]
 23fe7f6:	7809      	ldrb	r1, [r1, #0]
 23fe7f8:	f7ff ffe8 	bl	23fe7cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fe7fc:	b003      	add	sp, #12
 23fe7fe:	f85d fb04 	ldr.w	pc, [sp], #4
 23fe802:	bf00      	nop
 23fe804:	023ffcd4 	.word	0x023ffcd4

023fe808 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe808:	7441      	strb	r1, [r0, #17]
}
 23fe80a:	4770      	bx	lr

023fe80c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe80c:	4770      	bx	lr

023fe80e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fe80e:	4770      	bx	lr

023fe810 <_ZN9USBSerial4readEv>:
{
 23fe810:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fe812:	2100      	movs	r1, #0
 23fe814:	7c00      	ldrb	r0, [r0, #16]
 23fe816:	f7fe fb07 	bl	23fce28 <HAL_USB_USART_Receive_Data>
}
 23fe81a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe81e:	bd08      	pop	{r3, pc}

023fe820 <_ZN9USBSerial4peekEv>:
{
 23fe820:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fe822:	2101      	movs	r1, #1
 23fe824:	7c00      	ldrb	r0, [r0, #16]
 23fe826:	f7fe faff 	bl	23fce28 <HAL_USB_USART_Receive_Data>
}
 23fe82a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe82e:	bd08      	pop	{r3, pc}

023fe830 <_ZN9USBSerial17availableForWriteEv>:
{
 23fe830:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fe832:	7c00      	ldrb	r0, [r0, #16]
 23fe834:	f7fe faea 	bl	23fce0c <HAL_USB_USART_Available_Data_For_Write>
}
 23fe838:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe83c:	bd08      	pop	{r3, pc}

023fe83e <_ZN9USBSerial9availableEv>:
{
 23fe83e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fe840:	7c00      	ldrb	r0, [r0, #16]
 23fe842:	f7fe fad5 	bl	23fcdf0 <HAL_USB_USART_Available_Data>
}
 23fe846:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe84a:	bd08      	pop	{r3, pc}

023fe84c <_ZN9USBSerial5writeEh>:
{
 23fe84c:	b513      	push	{r0, r1, r4, lr}
 23fe84e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe850:	7c00      	ldrb	r0, [r0, #16]
{
 23fe852:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe854:	f7fe fada 	bl	23fce0c <HAL_USB_USART_Available_Data_For_Write>
 23fe858:	2800      	cmp	r0, #0
 23fe85a:	9901      	ldr	r1, [sp, #4]
 23fe85c:	dc01      	bgt.n	23fe862 <_ZN9USBSerial5writeEh+0x16>
 23fe85e:	7c60      	ldrb	r0, [r4, #17]
 23fe860:	b120      	cbz	r0, 23fe86c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fe862:	7c20      	ldrb	r0, [r4, #16]
 23fe864:	f7fe faee 	bl	23fce44 <HAL_USB_USART_Send_Data>
 23fe868:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fe86c:	b002      	add	sp, #8
 23fe86e:	bd10      	pop	{r4, pc}

023fe870 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fe870:	7c00      	ldrb	r0, [r0, #16]
 23fe872:	f7fe baf5 	b.w	23fce60 <HAL_USB_USART_Flush_Data>

023fe876 <_ZN9USBSerialD0Ev>:
 23fe876:	b510      	push	{r4, lr}
 23fe878:	4604      	mov	r4, r0
 23fe87a:	2114      	movs	r1, #20
 23fe87c:	f7fc fec1 	bl	23fb602 <_ZdlPvj>
 23fe880:	4620      	mov	r0, r4
 23fe882:	bd10      	pop	{r4, pc}

023fe884 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe884:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fe886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe88a:	4604      	mov	r4, r0
 23fe88c:	4608      	mov	r0, r1
 23fe88e:	2100      	movs	r1, #0
 23fe890:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fe894:	4b04      	ldr	r3, [pc, #16]	; (23fe8a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fe896:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe898:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe89a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fe89c:	4611      	mov	r1, r2
  _blocking = true;
 23fe89e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fe8a0:	f7fe fa7c 	bl	23fcd9c <HAL_USB_USART_Init>
}
 23fe8a4:	4620      	mov	r0, r4
 23fe8a6:	bd10      	pop	{r4, pc}
 23fe8a8:	023ffce8 	.word	0x023ffce8

023fe8ac <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fe8ac:	2200      	movs	r2, #0
 23fe8ae:	7c00      	ldrb	r0, [r0, #16]
 23fe8b0:	f7fe ba82 	b.w	23fcdb8 <HAL_USB_USART_Begin>

023fe8b4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fe8b4:	7c00      	ldrb	r0, [r0, #16]
 23fe8b6:	f7fe ba8d 	b.w	23fcdd4 <HAL_USB_USART_End>

023fe8ba <_Z19acquireSerialBufferv>:
{
 23fe8ba:	b510      	push	{r4, lr}
 23fe8bc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fe8be:	2214      	movs	r2, #20
 23fe8c0:	2100      	movs	r1, #0
 23fe8c2:	f000 fef6 	bl	23ff6b2 <memset>
}
 23fe8c6:	4620      	mov	r0, r4
 23fe8c8:	bd10      	pop	{r4, pc}
	...

023fe8cc <_Z16_fetch_usbserialv>:
{
 23fe8cc:	b510      	push	{r4, lr}
 23fe8ce:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fe8d0:	a803      	add	r0, sp, #12
 23fe8d2:	f7ff fff2 	bl	23fe8ba <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe8d6:	4c0c      	ldr	r4, [pc, #48]	; (23fe908 <_Z16_fetch_usbserialv+0x3c>)
 23fe8d8:	e8d4 1f8f 	ldab	r1, [r4]
 23fe8dc:	f011 0101 	ands.w	r1, r1, #1
 23fe8e0:	d10f      	bne.n	23fe902 <_Z16_fetch_usbserialv+0x36>
 23fe8e2:	4620      	mov	r0, r4
 23fe8e4:	9101      	str	r1, [sp, #4]
 23fe8e6:	f7fc fe9b 	bl	23fb620 <__cxa_guard_acquire>
 23fe8ea:	9901      	ldr	r1, [sp, #4]
 23fe8ec:	b148      	cbz	r0, 23fe902 <_Z16_fetch_usbserialv+0x36>
 23fe8ee:	aa03      	add	r2, sp, #12
 23fe8f0:	4806      	ldr	r0, [pc, #24]	; (23fe90c <_Z16_fetch_usbserialv+0x40>)
 23fe8f2:	f7ff ffc7 	bl	23fe884 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fe8f6:	4620      	mov	r0, r4
 23fe8f8:	f7fc fe97 	bl	23fb62a <__cxa_guard_release>
 23fe8fc:	4804      	ldr	r0, [pc, #16]	; (23fe910 <_Z16_fetch_usbserialv+0x44>)
 23fe8fe:	f000 fea2 	bl	23ff646 <atexit>
	return _usbserial;
}
 23fe902:	4802      	ldr	r0, [pc, #8]	; (23fe90c <_Z16_fetch_usbserialv+0x40>)
 23fe904:	b008      	add	sp, #32
 23fe906:	bd10      	pop	{r4, pc}
 23fe908:	1007aebc 	.word	0x1007aebc
 23fe90c:	1007aec0 	.word	0x1007aec0
 23fe910:	023fe80d 	.word	0x023fe80d

023fe914 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fe914:	4770      	bx	lr

023fe916 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe916:	7441      	strb	r1, [r0, #17]
}
 23fe918:	4770      	bx	lr

023fe91a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fe91a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fe91c:	7c00      	ldrb	r0, [r0, #16]
 23fe91e:	f7fe f96b 	bl	23fcbf8 <hal_usart_available_data_for_write>
}
 23fe922:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe926:	bd08      	pop	{r3, pc}

023fe928 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fe928:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fe92a:	7c00      	ldrb	r0, [r0, #16]
 23fe92c:	f7fe f91e 	bl	23fcb6c <hal_usart_available>
}
 23fe930:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe934:	bd08      	pop	{r3, pc}

023fe936 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fe936:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fe938:	7c00      	ldrb	r0, [r0, #16]
 23fe93a:	f7fe f933 	bl	23fcba4 <hal_usart_peek>
}
 23fe93e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe942:	bd08      	pop	{r3, pc}

023fe944 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fe944:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fe946:	7c00      	ldrb	r0, [r0, #16]
 23fe948:	f7fe f91e 	bl	23fcb88 <hal_usart_read>
}
 23fe94c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe950:	bd08      	pop	{r3, pc}

023fe952 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fe952:	7c00      	ldrb	r0, [r0, #16]
 23fe954:	f7fe b934 	b.w	23fcbc0 <hal_usart_flush>

023fe958 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fe958:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe95a:	7c45      	ldrb	r5, [r0, #17]
{
 23fe95c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe95e:	b12d      	cbz	r5, 23fe96c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fe960:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fe962:	b003      	add	sp, #12
 23fe964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fe968:	f7fe b8f2 	b.w	23fcb50 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe96c:	7c00      	ldrb	r0, [r0, #16]
 23fe96e:	9101      	str	r1, [sp, #4]
 23fe970:	f7fe f942 	bl	23fcbf8 <hal_usart_available_data_for_write>
 23fe974:	2800      	cmp	r0, #0
 23fe976:	9901      	ldr	r1, [sp, #4]
 23fe978:	dcf2      	bgt.n	23fe960 <_ZN11USARTSerial5writeEh+0x8>
}
 23fe97a:	4628      	mov	r0, r5
 23fe97c:	b003      	add	sp, #12
 23fe97e:	bd30      	pop	{r4, r5, pc}

023fe980 <_ZN11USARTSerialD0Ev>:
 23fe980:	b510      	push	{r4, lr}
 23fe982:	4604      	mov	r4, r0
 23fe984:	2114      	movs	r1, #20
 23fe986:	f7fc fe3c 	bl	23fb602 <_ZdlPvj>
 23fe98a:	4620      	mov	r0, r4
 23fe98c:	bd10      	pop	{r4, pc}
	...

023fe990 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe990:	b510      	push	{r4, lr}
 23fe992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe996:	4604      	mov	r4, r0
 23fe998:	4608      	mov	r0, r1
 23fe99a:	4611      	mov	r1, r2
 23fe99c:	2200      	movs	r2, #0
 23fe99e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe9a2:	4b04      	ldr	r3, [pc, #16]	; (23fe9b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fe9a4:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe9a6:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe9a8:	2301      	movs	r3, #1
 23fe9aa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fe9ac:	f7fe f940 	bl	23fcc30 <hal_usart_init_ex>
}
 23fe9b0:	4620      	mov	r0, r4
 23fe9b2:	bd10      	pop	{r4, pc}
 23fe9b4:	023ffd18 	.word	0x023ffd18

023fe9b8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fe9b8:	2300      	movs	r3, #0
 23fe9ba:	7c00      	ldrb	r0, [r0, #16]
 23fe9bc:	f7fe b92a 	b.w	23fcc14 <hal_usart_begin_config>

023fe9c0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fe9c0:	2200      	movs	r2, #0
 23fe9c2:	f7ff bff9 	b.w	23fe9b8 <_ZN11USARTSerial5beginEmm>

023fe9c6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fe9c6:	7c00      	ldrb	r0, [r0, #16]
 23fe9c8:	f7fe b8b4 	b.w	23fcb34 <hal_usart_end>

023fe9cc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fe9cc:	7c00      	ldrb	r0, [r0, #16]
 23fe9ce:	f7fe b905 	b.w	23fcbdc <hal_usart_is_enabled>

023fe9d2 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fe9d2:	4770      	bx	lr

023fe9d4 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fe9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe9d6:	4606      	mov	r6, r0
 23fe9d8:	4615      	mov	r5, r2
 23fe9da:	460c      	mov	r4, r1
 23fe9dc:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fe9de:	42bc      	cmp	r4, r7
 23fe9e0:	d006      	beq.n	23fe9f0 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fe9e2:	6833      	ldr	r3, [r6, #0]
 23fe9e4:	4630      	mov	r0, r6
 23fe9e6:	689b      	ldr	r3, [r3, #8]
 23fe9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fe9ec:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fe9ee:	e7f6      	b.n	23fe9de <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fe9f0:	4628      	mov	r0, r5
 23fe9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe9f4 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fe9f4:	2200      	movs	r2, #0
 23fe9f6:	7c00      	ldrb	r0, [r0, #16]
 23fe9f8:	f7fe b928 	b.w	23fcc4c <hal_i2c_write>

023fe9fc <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fe9fc:	2100      	movs	r1, #0
 23fe9fe:	7c00      	ldrb	r0, [r0, #16]
 23fea00:	f7fe b932 	b.w	23fcc68 <hal_i2c_available>

023fea04 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fea04:	2100      	movs	r1, #0
 23fea06:	7c00      	ldrb	r0, [r0, #16]
 23fea08:	f7fe b93c 	b.w	23fcc84 <hal_i2c_read>

023fea0c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fea0c:	2100      	movs	r1, #0
 23fea0e:	7c00      	ldrb	r0, [r0, #16]
 23fea10:	f7fe b946 	b.w	23fcca0 <hal_i2c_peek>

023fea14 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fea14:	2100      	movs	r1, #0
 23fea16:	7c00      	ldrb	r0, [r0, #16]
 23fea18:	f7fe b950 	b.w	23fccbc <hal_i2c_flush>

023fea1c <_ZN7TwoWireD0Ev>:
 23fea1c:	b510      	push	{r4, lr}
 23fea1e:	4604      	mov	r4, r0
 23fea20:	2114      	movs	r1, #20
 23fea22:	f7fc fdee 	bl	23fb602 <_ZdlPvj>
 23fea26:	4620      	mov	r0, r4
 23fea28:	bd10      	pop	{r4, pc}
	...

023fea2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fea2c:	b538      	push	{r3, r4, r5, lr}
 23fea2e:	4604      	mov	r4, r0
 23fea30:	4615      	mov	r5, r2
 23fea32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fea36:	2200      	movs	r2, #0
 23fea38:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fea3c:	4b09      	ldr	r3, [pc, #36]	; (23fea64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fea3e:	4608      	mov	r0, r1
  _i2c = i2c;
 23fea40:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fea42:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fea44:	4629      	mov	r1, r5
 23fea46:	f7fe f955 	bl	23fccf4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fea4a:	30bf      	adds	r0, #191	; 0xbf
 23fea4c:	d108      	bne.n	23fea60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fea4e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fea50:	07db      	lsls	r3, r3, #31
 23fea52:	d505      	bpl.n	23fea60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fea54:	6868      	ldr	r0, [r5, #4]
 23fea56:	f7fe fb99 	bl	23fd18c <free>
    free(conf.tx_buffer);
 23fea5a:	68e8      	ldr	r0, [r5, #12]
 23fea5c:	f7fe fb96 	bl	23fd18c <free>
}
 23fea60:	4620      	mov	r0, r4
 23fea62:	bd38      	pop	{r3, r4, r5, pc}
 23fea64:	023ffd48 	.word	0x023ffd48

023fea68 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fea68:	2200      	movs	r2, #0
 23fea6a:	6840      	ldr	r0, [r0, #4]
 23fea6c:	4611      	mov	r1, r2
 23fea6e:	f7fe babb 	b.w	23fcfe8 <network_ready>

023fea72 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fea72:	2200      	movs	r2, #0
 23fea74:	6840      	ldr	r0, [r0, #4]
 23fea76:	4611      	mov	r1, r2
 23fea78:	f7fe baee 	b.w	23fd058 <network_listening>

023fea7c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fea7c:	2200      	movs	r2, #0
 23fea7e:	6840      	ldr	r0, [r0, #4]
 23fea80:	4611      	mov	r1, r2
 23fea82:	f7fe bb05 	b.w	23fd090 <network_get_listen_timeout>

023fea86 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fea86:	2200      	movs	r2, #0
 23fea88:	6840      	ldr	r0, [r0, #4]
 23fea8a:	f7fe baf3 	b.w	23fd074 <network_set_listen_timeout>

023fea8e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fea8e:	2200      	movs	r2, #0
 23fea90:	6840      	ldr	r0, [r0, #4]
 23fea92:	f081 0101 	eor.w	r1, r1, #1
 23fea96:	f7fe bad1 	b.w	23fd03c <network_listen>

023fea9a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fea9a:	2300      	movs	r3, #0
 23fea9c:	6840      	ldr	r0, [r0, #4]
 23fea9e:	461a      	mov	r2, r3
 23feaa0:	4619      	mov	r1, r3
 23feaa2:	f7fe babd 	b.w	23fd020 <network_off>

023feaa6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23feaa6:	2300      	movs	r3, #0
 23feaa8:	6840      	ldr	r0, [r0, #4]
 23feaaa:	461a      	mov	r2, r3
 23feaac:	4619      	mov	r1, r3
 23feaae:	f7fe baa9 	b.w	23fd004 <network_on>

023feab2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23feab2:	2200      	movs	r2, #0
 23feab4:	6840      	ldr	r0, [r0, #4]
 23feab6:	4611      	mov	r1, r2
 23feab8:	f7fe ba7a 	b.w	23fcfb0 <network_connecting>

023feabc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23feabc:	2200      	movs	r2, #0
 23feabe:	2102      	movs	r1, #2
 23feac0:	6840      	ldr	r0, [r0, #4]
 23feac2:	f7fe ba83 	b.w	23fcfcc <network_disconnect>

023feac6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23feac6:	2300      	movs	r3, #0
 23feac8:	6840      	ldr	r0, [r0, #4]
 23feaca:	461a      	mov	r2, r3
 23feacc:	f7fe ba62 	b.w	23fcf94 <network_connect>

023fead0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fead0:	2204      	movs	r2, #4
 23fead2:	4b02      	ldr	r3, [pc, #8]	; (23feadc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fead4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fead6:	4a02      	ldr	r2, [pc, #8]	; (23feae0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fead8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23feada:	4770      	bx	lr
 23feadc:	1007aed4 	.word	0x1007aed4
 23feae0:	023ffd70 	.word	0x023ffd70

023feae4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23feae4:	2300      	movs	r3, #0
 23feae6:	6840      	ldr	r0, [r0, #4]
 23feae8:	461a      	mov	r2, r3
 23feaea:	f7fe ba53 	b.w	23fcf94 <network_connect>

023feaee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23feaee:	2200      	movs	r2, #0
 23feaf0:	2102      	movs	r1, #2
 23feaf2:	6840      	ldr	r0, [r0, #4]
 23feaf4:	f7fe ba6a 	b.w	23fcfcc <network_disconnect>

023feaf8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23feaf8:	2200      	movs	r2, #0
 23feafa:	6840      	ldr	r0, [r0, #4]
 23feafc:	4611      	mov	r1, r2
 23feafe:	f7fe ba57 	b.w	23fcfb0 <network_connecting>

023feb02 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23feb02:	2200      	movs	r2, #0
 23feb04:	6840      	ldr	r0, [r0, #4]
 23feb06:	4611      	mov	r1, r2
 23feb08:	f7fe ba6e 	b.w	23fcfe8 <network_ready>

023feb0c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23feb0c:	2300      	movs	r3, #0
 23feb0e:	6840      	ldr	r0, [r0, #4]
 23feb10:	461a      	mov	r2, r3
 23feb12:	4619      	mov	r1, r3
 23feb14:	f7fe ba76 	b.w	23fd004 <network_on>

023feb18 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23feb18:	2300      	movs	r3, #0
 23feb1a:	6840      	ldr	r0, [r0, #4]
 23feb1c:	461a      	mov	r2, r3
 23feb1e:	4619      	mov	r1, r3
 23feb20:	f7fe ba7e 	b.w	23fd020 <network_off>

023feb24 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23feb24:	2100      	movs	r1, #0
 23feb26:	6840      	ldr	r0, [r0, #4]
 23feb28:	f7fe bac0 	b.w	23fd0ac <network_is_on>

023feb2c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23feb2c:	2100      	movs	r1, #0
 23feb2e:	6840      	ldr	r0, [r0, #4]
 23feb30:	f7fe baca 	b.w	23fd0c8 <network_is_off>

023feb34 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23feb34:	2200      	movs	r2, #0
 23feb36:	6840      	ldr	r0, [r0, #4]
 23feb38:	f081 0101 	eor.w	r1, r1, #1
 23feb3c:	f7fe ba7e 	b.w	23fd03c <network_listen>

023feb40 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23feb40:	2200      	movs	r2, #0
 23feb42:	6840      	ldr	r0, [r0, #4]
 23feb44:	f7fe ba96 	b.w	23fd074 <network_set_listen_timeout>

023feb48 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23feb48:	2200      	movs	r2, #0
 23feb4a:	6840      	ldr	r0, [r0, #4]
 23feb4c:	4611      	mov	r1, r2
 23feb4e:	f7fe ba9f 	b.w	23fd090 <network_get_listen_timeout>

023feb52 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23feb52:	2200      	movs	r2, #0
 23feb54:	6840      	ldr	r0, [r0, #4]
 23feb56:	4611      	mov	r1, r2
 23feb58:	f7fe ba7e 	b.w	23fd058 <network_listening>

023feb5c <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_preferred(*this, preferred, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23feb5c:	2100      	movs	r1, #0
 23feb5e:	6840      	ldr	r0, [r0, #4]
 23feb60:	f7fe bace 	b.w	23fd100 <network_is_preferred>

023feb64 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23feb64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23feb68:	b095      	sub	sp, #84	; 0x54
 23feb6a:	4614      	mov	r4, r2
 23feb6c:	460d      	mov	r5, r1
 23feb6e:	4607      	mov	r7, r0
    IPAddress addr;
 23feb70:	f7ff fe0c 	bl	23fe78c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23feb74:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23feb76:	221c      	movs	r2, #28
 23feb78:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23feb7a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23feb7c:	f000 fd99 	bl	23ff6b2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23feb80:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23feb82:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23feb84:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23feb86:	2100      	movs	r1, #0
 23feb88:	466b      	mov	r3, sp
 23feb8a:	aa0c      	add	r2, sp, #48	; 0x30
 23feb8c:	f7fd ff1c 	bl	23fc9c8 <netdb_getaddrinfo>
    if (!r) {
 23feb90:	4604      	mov	r4, r0
 23feb92:	2800      	cmp	r0, #0
 23feb94:	d14b      	bne.n	23fec2e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23feb96:	4602      	mov	r2, r0
 23feb98:	2101      	movs	r1, #1
 23feb9a:	6868      	ldr	r0, [r5, #4]
 23feb9c:	f7fe fa24 	bl	23fcfe8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23feba0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23feba2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23feba4:	4622      	mov	r2, r4
 23feba6:	6868      	ldr	r0, [r5, #4]
 23feba8:	f7fe fa1e 	bl	23fcfe8 <network_ready>
        bool ok = false;
 23febac:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23febae:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23febb0:	9e00      	ldr	r6, [sp, #0]
 23febb2:	2e00      	cmp	r6, #0
 23febb4:	d03b      	beq.n	23fec2e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23febb6:	2900      	cmp	r1, #0
 23febb8:	d139      	bne.n	23fec2e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23febba:	6873      	ldr	r3, [r6, #4]
 23febbc:	2b02      	cmp	r3, #2
 23febbe:	d003      	beq.n	23febc8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23febc0:	2b0a      	cmp	r3, #10
 23febc2:	d011      	beq.n	23febe8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23febc4:	69f6      	ldr	r6, [r6, #28]
 23febc6:	e7f4      	b.n	23febb2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23febc8:	f1b8 0f00 	cmp.w	r8, #0
 23febcc:	d0fa      	beq.n	23febc4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23febce:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23febd0:	a806      	add	r0, sp, #24
 23febd2:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23febd4:	1d3c      	adds	r4, r7, #4
 23febd6:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23febd8:	f7ff fe06 	bl	23fe7e8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23febdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23febde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23febe0:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23febe2:	4641      	mov	r1, r8
 23febe4:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23febe6:	e7ed      	b.n	23febc4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23febe8:	f1b9 0f00 	cmp.w	r9, #0
 23febec:	d0ea      	beq.n	23febc4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23febee:	2210      	movs	r2, #16
 23febf0:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23febf2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23febf4:	f000 fd5d 	bl	23ff6b2 <memset>
                    a.v = 6;
 23febf8:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23febfa:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23febfc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fec00:	f104 0308 	add.w	r3, r4, #8
 23fec04:	3418      	adds	r4, #24
 23fec06:	462a      	mov	r2, r5
 23fec08:	6818      	ldr	r0, [r3, #0]
 23fec0a:	6859      	ldr	r1, [r3, #4]
 23fec0c:	3308      	adds	r3, #8
 23fec0e:	c203      	stmia	r2!, {r0, r1}
 23fec10:	42a3      	cmp	r3, r4
 23fec12:	4615      	mov	r5, r2
 23fec14:	d1f7      	bne.n	23fec06 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fec16:	a901      	add	r1, sp, #4
 23fec18:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fec1a:	1d3c      	adds	r4, r7, #4
 23fec1c:	ad07      	add	r5, sp, #28
 23fec1e:	f7ff fdc3 	bl	23fe7a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fec22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fec24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fec26:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fec28:	4649      	mov	r1, r9
 23fec2a:	7023      	strb	r3, [r4, #0]
                    break;
 23fec2c:	e7ca      	b.n	23febc4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fec2e:	9800      	ldr	r0, [sp, #0]
 23fec30:	f7fd febc 	bl	23fc9ac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fec34:	4638      	mov	r0, r7
 23fec36:	b015      	add	sp, #84	; 0x54
 23fec38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fec3c <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23fec3c:	3803      	subs	r0, #3
 23fec3e:	2802      	cmp	r0, #2
 23fec40:	bf9a      	itte	ls
 23fec42:	4b02      	ldrls	r3, [pc, #8]	; (23fec4c <_ZN5spark12NetworkClass4fromEm+0x10>)
 23fec44:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23fec48:	4801      	ldrhi	r0, [pc, #4]	; (23fec50 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23fec4a:	4770      	bx	lr
 23fec4c:	023ffdac 	.word	0x023ffdac
 23fec50:	1007aedc 	.word	0x1007aedc

023fec54 <_ZN5spark12NetworkClass9preferredEb>:
NetworkClass& NetworkClass::preferred(bool preferred) {
 23fec54:	b508      	push	{r3, lr}
    network_handle_t network = network_preferred(*this, preferred, nullptr);
 23fec56:	2200      	movs	r2, #0
 23fec58:	6840      	ldr	r0, [r0, #4]
 23fec5a:	f7fe fa43 	bl	23fd0e4 <network_preferred>
}
 23fec5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23fec62:	f7ff bfeb 	b.w	23fec3c <_ZN5spark12NetworkClass4fromEm>
	...

023fec68 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fec68:	4b02      	ldr	r3, [pc, #8]	; (23fec74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fec6a:	4a03      	ldr	r2, [pc, #12]	; (23fec78 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fec6c:	601a      	str	r2, [r3, #0]
 23fec6e:	2200      	movs	r2, #0
 23fec70:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fec72:	4770      	bx	lr
 23fec74:	1007aedc 	.word	0x1007aedc
 23fec78:	023ffdc0 	.word	0x023ffdc0

023fec7c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fec7c:	2201      	movs	r2, #1
 23fec7e:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fec82:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fec86:	4618      	mov	r0, r3
 23fec88:	2901      	cmp	r1, #1
 23fec8a:	d108      	bne.n	23fec9e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fec8c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fec90:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fec94:	3a01      	subs	r2, #1
 23fec96:	f103 0310 	add.w	r3, r3, #16
 23fec9a:	d1f2      	bne.n	23fec82 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fec9c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fec9e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23feca0:	bf04      	itt	eq
 23feca2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23feca6:	1852      	addeq	r2, r2, r1
 23feca8:	e7f4      	b.n	23fec94 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fecaa <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fecaa:	b40e      	push	{r1, r2, r3}
 23fecac:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fecae:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fecb0:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fecb2:	af00      	add	r7, sp, #0
 23fecb4:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fecb8:	f855 2b04 	ldr.w	r2, [r5], #4
 23fecbc:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fecbe:	462b      	mov	r3, r5
 23fecc0:	1878      	adds	r0, r7, r1
 23fecc2:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fecc4:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fecc6:	f7fe fa7d 	bl	23fd1c4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fecca:	280f      	cmp	r0, #15
 23feccc:	687a      	ldr	r2, [r7, #4]
 23fecce:	d91a      	bls.n	23fed06 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fecd0:	f100 0308 	add.w	r3, r0, #8
 23fecd4:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fecd8:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fecda:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fecde:	1c41      	adds	r1, r0, #1
 23fece0:	462b      	mov	r3, r5
 23fece2:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fece4:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fece6:	f7fe fa6d 	bl	23fd1c4 <vsnprintf>
        if (n > 0) {
 23fecea:	1e02      	subs	r2, r0, #0
 23fecec:	dd04      	ble.n	23fecf8 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fecee:	6823      	ldr	r3, [r4, #0]
 23fecf0:	4669      	mov	r1, sp
 23fecf2:	4620      	mov	r0, r4
 23fecf4:	689b      	ldr	r3, [r3, #8]
 23fecf6:	4798      	blx	r3
 23fecf8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fecfa:	3720      	adds	r7, #32
 23fecfc:	46bd      	mov	sp, r7
 23fecfe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fed02:	b003      	add	sp, #12
 23fed04:	4770      	bx	lr
    } else if (n > 0) {
 23fed06:	2800      	cmp	r0, #0
 23fed08:	d0f7      	beq.n	23fecfa <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fed0a:	6823      	ldr	r3, [r4, #0]
 23fed0c:	4602      	mov	r2, r0
 23fed0e:	689b      	ldr	r3, [r3, #8]
 23fed10:	4620      	mov	r0, r4
 23fed12:	f107 0110 	add.w	r1, r7, #16
 23fed16:	4798      	blx	r3
}
 23fed18:	e7ef      	b.n	23fecfa <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fed1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fed1a:	b538      	push	{r3, r4, r5, lr}
 23fed1c:	680b      	ldr	r3, [r1, #0]
 23fed1e:	4604      	mov	r4, r0
 23fed20:	6003      	str	r3, [r0, #0]
 23fed22:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fed24:	6843      	ldr	r3, [r0, #4]
 23fed26:	429d      	cmp	r5, r3
 23fed28:	d008      	beq.n	23fed3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fed2a:	b115      	cbz	r5, 23fed32 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fed2c:	686b      	ldr	r3, [r5, #4]
 23fed2e:	3301      	adds	r3, #1
 23fed30:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fed32:	6860      	ldr	r0, [r4, #4]
 23fed34:	b108      	cbz	r0, 23fed3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fed36:	f7fe fbed 	bl	23fd514 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fed3a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fed3c:	bd38      	pop	{r3, r4, r5, pc}

023fed3e <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 23fed3e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fed40:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fed42:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fed46:	2201      	movs	r2, #1
 23fed48:	689b      	ldr	r3, [r3, #8]
 23fed4a:	f10d 0107 	add.w	r1, sp, #7
 23fed4e:	4798      	blx	r3
}
 23fed50:	b003      	add	sp, #12
 23fed52:	f85d fb04 	ldr.w	pc, [sp], #4

023fed56 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fed56:	460b      	mov	r3, r1
 23fed58:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fed5a:	2200      	movs	r2, #0
 23fed5c:	b510      	push	{r4, lr}
 23fed5e:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fed60:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fed64:	6083      	str	r3, [r0, #8]
    if (t) {
 23fed66:	b90b      	cbnz	r3, 23fed6c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fed68:	4620      	mov	r0, r4
 23fed6a:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fed6c:	f7ff ffd5 	bl	23fed1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fed70:	e7fa      	b.n	23fed68 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fed72 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fed72:	6883      	ldr	r3, [r0, #8]
 23fed74:	b1eb      	cbz	r3, 23fedb2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fed76:	781a      	ldrb	r2, [r3, #0]
 23fed78:	2a03      	cmp	r2, #3
 23fed7a:	d81a      	bhi.n	23fedb2 <_ZNK5spark9JSONValue4typeEv+0x40>
 23fed7c:	e8df f002 	tbb	[pc, r2]
 23fed80:	1b021704 	.word	0x1b021704
 23fed84:	2005      	movs	r0, #5
 23fed86:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fed88:	6802      	ldr	r2, [r0, #0]
 23fed8a:	685b      	ldr	r3, [r3, #4]
 23fed8c:	6852      	ldr	r2, [r2, #4]
 23fed8e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fed90:	282d      	cmp	r0, #45	; 0x2d
 23fed92:	d012      	beq.n	23fedba <_ZNK5spark9JSONValue4typeEv+0x48>
 23fed94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fed98:	2b09      	cmp	r3, #9
 23fed9a:	d90e      	bls.n	23fedba <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fed9c:	2874      	cmp	r0, #116	; 0x74
 23fed9e:	d00e      	beq.n	23fedbe <_ZNK5spark9JSONValue4typeEv+0x4c>
 23feda0:	2866      	cmp	r0, #102	; 0x66
 23feda2:	d00c      	beq.n	23fedbe <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23feda4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23feda8:	4258      	negs	r0, r3
 23fedaa:	4158      	adcs	r0, r3
 23fedac:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fedae:	2006      	movs	r0, #6
 23fedb0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fedb2:	2000      	movs	r0, #0
 23fedb4:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fedb6:	2004      	movs	r0, #4
 23fedb8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fedba:	2003      	movs	r0, #3
 23fedbc:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fedbe:	2002      	movs	r0, #2
}
 23fedc0:	4770      	bx	lr

023fedc2 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fedc2:	b510      	push	{r4, lr}
 23fedc4:	4604      	mov	r4, r0
    switch (type()) {
 23fedc6:	f7ff ffd4 	bl	23fed72 <_ZNK5spark9JSONValue4typeEv>
 23fedca:	2802      	cmp	r0, #2
 23fedcc:	d00e      	beq.n	23fedec <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fedce:	1ec3      	subs	r3, r0, #3
 23fedd0:	b2db      	uxtb	r3, r3
 23fedd2:	2b01      	cmp	r3, #1
 23fedd4:	d814      	bhi.n	23fee00 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fedd6:	6822      	ldr	r2, [r4, #0]
 23fedd8:	68a3      	ldr	r3, [r4, #8]
 23fedda:	6850      	ldr	r0, [r2, #4]
 23feddc:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fedde:	220a      	movs	r2, #10
}
 23fede0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fede4:	2100      	movs	r1, #0
 23fede6:	4418      	add	r0, r3
 23fede8:	f000 bd64 	b.w	23ff8b4 <strtol>
        const char* const s = d_->json + t_->start;
 23fedec:	6822      	ldr	r2, [r4, #0]
 23fedee:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fedf0:	6852      	ldr	r2, [r2, #4]
 23fedf2:	685b      	ldr	r3, [r3, #4]
 23fedf4:	5cd0      	ldrb	r0, [r2, r3]
 23fedf6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fedfa:	4258      	negs	r0, r3
 23fedfc:	4158      	adcs	r0, r3
}
 23fedfe:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fee00:	2000      	movs	r0, #0
 23fee02:	e7fc      	b.n	23fedfe <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fee04 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fee04:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fee06:	2300      	movs	r3, #0
 23fee08:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fee0a:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fee0e:	480e      	ldr	r0, [pc, #56]	; (23fee48 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fee10:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fee14:	b1a9      	cbz	r1, 23fee42 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fee16:	780b      	ldrb	r3, [r1, #0]
 23fee18:	2b03      	cmp	r3, #3
 23fee1a:	d006      	beq.n	23fee2a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fee1c:	b98b      	cbnz	r3, 23fee42 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fee1e:	6813      	ldr	r3, [r2, #0]
 23fee20:	6858      	ldr	r0, [r3, #4]
 23fee22:	684b      	ldr	r3, [r1, #4]
 23fee24:	5cc3      	ldrb	r3, [r0, r3]
 23fee26:	2b6e      	cmp	r3, #110	; 0x6e
 23fee28:	d007      	beq.n	23fee3a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fee2a:	6813      	ldr	r3, [r2, #0]
 23fee2c:	684d      	ldr	r5, [r1, #4]
 23fee2e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fee30:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fee32:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fee34:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fee36:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fee38:	60e3      	str	r3, [r4, #12]
 23fee3a:	4611      	mov	r1, r2
 23fee3c:	4620      	mov	r0, r4
 23fee3e:	f7ff ff6c 	bl	23fed1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fee42:	4620      	mov	r0, r4
 23fee44:	bd38      	pop	{r3, r4, r5, pc}
 23fee46:	bf00      	nop
 23fee48:	023ffc1e 	.word	0x023ffc1e

023fee4c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fee4c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fee4e:	2500      	movs	r5, #0
 23fee50:	460b      	mov	r3, r1
 23fee52:	4604      	mov	r4, r0
 23fee54:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fee56:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fee5a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fee5e:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fee62:	b14b      	cbz	r3, 23fee78 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fee64:	781a      	ldrb	r2, [r3, #0]
 23fee66:	2a01      	cmp	r2, #1
 23fee68:	d106      	bne.n	23fee78 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fee6a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fee6e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fee70:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fee72:	6143      	str	r3, [r0, #20]
 23fee74:	f7ff ff51 	bl	23fed1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fee78:	4620      	mov	r0, r4
 23fee7a:	bd38      	pop	{r3, r4, r5, pc}

023fee7c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fee7c:	b510      	push	{r4, lr}
    if (!n_) {
 23fee7e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fee80:	4604      	mov	r4, r0
    if (!n_) {
 23fee82:	b163      	cbz	r3, 23fee9e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fee84:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fee86:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fee88:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fee8a:	3010      	adds	r0, #16
 23fee8c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fee8e:	6120      	str	r0, [r4, #16]
    --n_;
 23fee90:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fee92:	b113      	cbz	r3, 23fee9a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fee94:	f7ff fef2 	bl	23fec7c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fee98:	60a0      	str	r0, [r4, #8]
    return true;
 23fee9a:	2001      	movs	r0, #1
 23fee9c:	e000      	b.n	23feea0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fee9e:	4618      	mov	r0, r3
}
 23feea0:	bd10      	pop	{r4, pc}

023feea2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23feea2:	b510      	push	{r4, lr}
    write('}');
 23feea4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23feea6:	4604      	mov	r4, r0
    write('}');
 23feea8:	f7ff ff49 	bl	23fed3e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23feeac:	2301      	movs	r3, #1
}
 23feeae:	4620      	mov	r0, r4
    state_ = NEXT;
 23feeb0:	7123      	strb	r3, [r4, #4]
}
 23feeb2:	bd10      	pop	{r4, pc}

023feeb4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23feeb4:	b508      	push	{r3, lr}
    switch (state_) {
 23feeb6:	7903      	ldrb	r3, [r0, #4]
 23feeb8:	2b01      	cmp	r3, #1
 23feeba:	d002      	beq.n	23feec2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23feebc:	2b02      	cmp	r3, #2
 23feebe:	d004      	beq.n	23feeca <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23feec0:	bd08      	pop	{r3, pc}
        write(',');
 23feec2:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23feec4:	f7ff ff3b 	bl	23fed3e <_ZN5spark10JSONWriter5writeEc>
}
 23feec8:	e7fa      	b.n	23feec0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23feeca:	213a      	movs	r1, #58	; 0x3a
 23feecc:	e7fa      	b.n	23feec4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023feece <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23feece:	b510      	push	{r4, lr}
 23feed0:	4604      	mov	r4, r0
    writeSeparator();
 23feed2:	f7ff ffef 	bl	23feeb4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23feed6:	4620      	mov	r0, r4
 23feed8:	217b      	movs	r1, #123	; 0x7b
 23feeda:	f7ff ff30 	bl	23fed3e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23feede:	2300      	movs	r3, #0
}
 23feee0:	4620      	mov	r0, r4
    state_ = BEGIN;
 23feee2:	7123      	strb	r3, [r4, #4]
}
 23feee4:	bd10      	pop	{r4, pc}
	...

023feee8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23feee8:	b513      	push	{r0, r1, r4, lr}
 23feeea:	4604      	mov	r4, r0
 23feeec:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23feeee:	f7ff ffe1 	bl	23feeb4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23feef2:	6823      	ldr	r3, [r4, #0]
 23feef4:	4620      	mov	r0, r4
 23feef6:	68db      	ldr	r3, [r3, #12]
 23feef8:	9a01      	ldr	r2, [sp, #4]
 23feefa:	4903      	ldr	r1, [pc, #12]	; (23fef08 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23feefc:	4798      	blx	r3
    state_ = NEXT;
 23feefe:	2301      	movs	r3, #1
}
 23fef00:	4620      	mov	r0, r4
    state_ = NEXT;
 23fef02:	7123      	strb	r3, [r4, #4]
}
 23fef04:	b002      	add	sp, #8
 23fef06:	bd10      	pop	{r4, pc}
 23fef08:	023ffa03 	.word	0x023ffa03

023fef0c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fef0c:	b513      	push	{r0, r1, r4, lr}
 23fef0e:	4604      	mov	r4, r0
 23fef10:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fef12:	f7ff ffcf 	bl	23feeb4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fef16:	6823      	ldr	r3, [r4, #0]
 23fef18:	4620      	mov	r0, r4
 23fef1a:	68db      	ldr	r3, [r3, #12]
 23fef1c:	9a01      	ldr	r2, [sp, #4]
 23fef1e:	4903      	ldr	r1, [pc, #12]	; (23fef2c <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fef20:	4798      	blx	r3
    state_ = NEXT;
 23fef22:	2301      	movs	r3, #1
}
 23fef24:	4620      	mov	r0, r4
    state_ = NEXT;
 23fef26:	7123      	strb	r3, [r4, #4]
}
 23fef28:	b002      	add	sp, #8
 23fef2a:	bd10      	pop	{r4, pc}
 23fef2c:	023ffdfc 	.word	0x023ffdfc

023fef30 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fef30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fef34:	460d      	mov	r5, r1
 23fef36:	4690      	mov	r8, r2
    write('"');
 23fef38:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fef3a:	4604      	mov	r4, r0
 23fef3c:	462f      	mov	r7, r5
    write('"');
 23fef3e:	f7ff fefe 	bl	23fed3e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fef42:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fefe8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fef46:	44a8      	add	r8, r5
    while (s != end) {
 23fef48:	4547      	cmp	r7, r8
 23fef4a:	46ba      	mov	sl, r7
 23fef4c:	d03d      	beq.n	23fefca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fef4e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fef52:	2e22      	cmp	r6, #34	; 0x22
 23fef54:	d006      	beq.n	23fef64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fef56:	2e5c      	cmp	r6, #92	; 0x5c
 23fef58:	d004      	beq.n	23fef64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fef5a:	4630      	mov	r0, r6
 23fef5c:	f000 fb7a 	bl	23ff654 <isprint>
 23fef60:	2800      	cmp	r0, #0
 23fef62:	d1f1      	bne.n	23fef48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fef64:	6823      	ldr	r3, [r4, #0]
 23fef66:	4629      	mov	r1, r5
 23fef68:	4620      	mov	r0, r4
 23fef6a:	689b      	ldr	r3, [r3, #8]
 23fef6c:	ebaa 0205 	sub.w	r2, sl, r5
 23fef70:	4798      	blx	r3
            write('\\');
 23fef72:	215c      	movs	r1, #92	; 0x5c
 23fef74:	4620      	mov	r0, r4
 23fef76:	f7ff fee2 	bl	23fed3e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fef7a:	2e0d      	cmp	r6, #13
 23fef7c:	d80a      	bhi.n	23fef94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fef7e:	2e07      	cmp	r6, #7
 23fef80:	d91c      	bls.n	23fefbc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fef82:	f1a6 0308 	sub.w	r3, r6, #8
 23fef86:	2b05      	cmp	r3, #5
 23fef88:	d818      	bhi.n	23fefbc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fef8a:	e8df f003 	tbb	[pc, r3]
 23fef8e:	0f0d      	.short	0x0f0d
 23fef90:	15131711 	.word	0x15131711
 23fef94:	2e22      	cmp	r6, #34	; 0x22
 23fef96:	d001      	beq.n	23fef9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fef98:	2e5c      	cmp	r6, #92	; 0x5c
 23fef9a:	d10f      	bne.n	23fefbc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fef9c:	4631      	mov	r1, r6
                write('b');
 23fef9e:	4620      	mov	r0, r4
 23fefa0:	f7ff fecd 	bl	23fed3e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fefa4:	463d      	mov	r5, r7
    while (s != end) {
 23fefa6:	e7cf      	b.n	23fef48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fefa8:	2162      	movs	r1, #98	; 0x62
 23fefaa:	e7f8      	b.n	23fef9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fefac:	2174      	movs	r1, #116	; 0x74
 23fefae:	e7f6      	b.n	23fef9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fefb0:	216e      	movs	r1, #110	; 0x6e
 23fefb2:	e7f4      	b.n	23fef9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fefb4:	2166      	movs	r1, #102	; 0x66
 23fefb6:	e7f2      	b.n	23fef9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fefb8:	2172      	movs	r1, #114	; 0x72
 23fefba:	e7f0      	b.n	23fef9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fefbc:	6823      	ldr	r3, [r4, #0]
 23fefbe:	4632      	mov	r2, r6
 23fefc0:	4649      	mov	r1, r9
 23fefc2:	4620      	mov	r0, r4
 23fefc4:	68db      	ldr	r3, [r3, #12]
 23fefc6:	4798      	blx	r3
                break;
 23fefc8:	e7ec      	b.n	23fefa4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fefca:	42bd      	cmp	r5, r7
 23fefcc:	d005      	beq.n	23fefda <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fefce:	6823      	ldr	r3, [r4, #0]
 23fefd0:	4629      	mov	r1, r5
 23fefd2:	4620      	mov	r0, r4
 23fefd4:	689b      	ldr	r3, [r3, #8]
 23fefd6:	1b7a      	subs	r2, r7, r5
 23fefd8:	4798      	blx	r3
    }
    write('"');
 23fefda:	2122      	movs	r1, #34	; 0x22
 23fefdc:	4620      	mov	r0, r4
 23fefde:	f7ff feae 	bl	23fed3e <_ZN5spark10JSONWriter5writeEc>
}
 23fefe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fefe6:	bf00      	nop
 23fefe8:	023ffdff 	.word	0x023ffdff

023fefec <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fefec:	b513      	push	{r0, r1, r4, lr}
 23fefee:	4604      	mov	r4, r0
 23feff0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23feff4:	f7ff ff5e 	bl	23feeb4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23feff8:	e9dd 2100 	ldrd	r2, r1, [sp]
 23feffc:	4620      	mov	r0, r4
 23feffe:	f7ff ff97 	bl	23fef30 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23ff002:	2302      	movs	r3, #2
}
 23ff004:	4620      	mov	r0, r4
    state_ = VALUE;
 23ff006:	7123      	strb	r3, [r4, #4]
}
 23ff008:	b002      	add	sp, #8
 23ff00a:	bd10      	pop	{r4, pc}

023ff00c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23ff00c:	b513      	push	{r0, r1, r4, lr}
 23ff00e:	4604      	mov	r4, r0
 23ff010:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23ff014:	f7ff ff4e 	bl	23feeb4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23ff018:	e9dd 2100 	ldrd	r2, r1, [sp]
 23ff01c:	4620      	mov	r0, r4
 23ff01e:	f7ff ff87 	bl	23fef30 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23ff022:	2301      	movs	r3, #1
}
 23ff024:	4620      	mov	r0, r4
    state_ = NEXT;
 23ff026:	7123      	strb	r3, [r4, #4]
}
 23ff028:	b002      	add	sp, #8
 23ff02a:	bd10      	pop	{r4, pc}

023ff02c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff02c:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff02e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff030:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff032:	d902      	bls.n	23ff03a <pinAvailable+0xe>
    return false;
 23ff034:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff036:	b003      	add	sp, #12
 23ff038:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff03a:	f1a0 030f 	sub.w	r3, r0, #15
 23ff03e:	2b02      	cmp	r3, #2
 23ff040:	d90b      	bls.n	23ff05a <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff042:	2801      	cmp	r0, #1
 23ff044:	d821      	bhi.n	23ff08a <pinAvailable+0x5e>
 23ff046:	f000 f935 	bl	23ff2b4 <_Z19__fetch_global_Wirev>
 23ff04a:	2100      	movs	r1, #0
 23ff04c:	7c00      	ldrb	r0, [r0, #16]
 23ff04e:	f7fd fe43 	bl	23fccd8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff052:	f080 0001 	eor.w	r0, r0, #1
 23ff056:	b2c0      	uxtb	r0, r0
 23ff058:	e7ed      	b.n	23ff036 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff05a:	4d11      	ldr	r5, [pc, #68]	; (23ff0a0 <pinAvailable+0x74>)
 23ff05c:	e8d5 1f8f 	ldab	r1, [r5]
 23ff060:	f011 0101 	ands.w	r1, r1, #1
 23ff064:	d10b      	bne.n	23ff07e <pinAvailable+0x52>
 23ff066:	4628      	mov	r0, r5
 23ff068:	9101      	str	r1, [sp, #4]
 23ff06a:	f7fc fad9 	bl	23fb620 <__cxa_guard_acquire>
 23ff06e:	9901      	ldr	r1, [sp, #4]
 23ff070:	b128      	cbz	r0, 23ff07e <pinAvailable+0x52>
 23ff072:	480c      	ldr	r0, [pc, #48]	; (23ff0a4 <pinAvailable+0x78>)
 23ff074:	f7fe f92a 	bl	23fd2cc <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff078:	4628      	mov	r0, r5
 23ff07a:	f7fc fad6 	bl	23fb62a <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff07e:	4b09      	ldr	r3, [pc, #36]	; (23ff0a4 <pinAvailable+0x78>)
 23ff080:	7818      	ldrb	r0, [r3, #0]
 23ff082:	f7fd fe53 	bl	23fcd2c <hal_spi_is_enabled>
 23ff086:	2800      	cmp	r0, #0
 23ff088:	d1d4      	bne.n	23ff034 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff08a:	3c08      	subs	r4, #8
 23ff08c:	2c01      	cmp	r4, #1
 23ff08e:	d805      	bhi.n	23ff09c <pinAvailable+0x70>
 23ff090:	f000 f864 	bl	23ff15c <_Z22__fetch_global_Serial1v>
 23ff094:	7c00      	ldrb	r0, [r0, #16]
 23ff096:	f7fd fda1 	bl	23fcbdc <hal_usart_is_enabled>
 23ff09a:	e7da      	b.n	23ff052 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff09c:	2001      	movs	r0, #1
 23ff09e:	e7ca      	b.n	23ff036 <pinAvailable+0xa>
 23ff0a0:	1007aee4 	.word	0x1007aee4
 23ff0a4:	1007aee8 	.word	0x1007aee8

023ff0a8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff0a8:	281b      	cmp	r0, #27
{
 23ff0aa:	b538      	push	{r3, r4, r5, lr}
 23ff0ac:	4604      	mov	r4, r0
 23ff0ae:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff0b0:	d80a      	bhi.n	23ff0c8 <pinMode+0x20>
 23ff0b2:	29ff      	cmp	r1, #255	; 0xff
 23ff0b4:	d008      	beq.n	23ff0c8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff0b6:	f7ff ffb9 	bl	23ff02c <pinAvailable>
 23ff0ba:	b128      	cbz	r0, 23ff0c8 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff0bc:	4629      	mov	r1, r5
 23ff0be:	4620      	mov	r0, r4
}
 23ff0c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff0c4:	f7fd bc9c 	b.w	23fca00 <hal_gpio_mode>
}
 23ff0c8:	bd38      	pop	{r3, r4, r5, pc}

023ff0ca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff0ca:	b538      	push	{r3, r4, r5, lr}
 23ff0cc:	4604      	mov	r4, r0
 23ff0ce:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff0d0:	f7fd fca4 	bl	23fca1c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff0d4:	28ff      	cmp	r0, #255	; 0xff
 23ff0d6:	d010      	beq.n	23ff0fa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff0d8:	2806      	cmp	r0, #6
 23ff0da:	d804      	bhi.n	23ff0e6 <digitalWrite+0x1c>
 23ff0dc:	234d      	movs	r3, #77	; 0x4d
 23ff0de:	fa23 f000 	lsr.w	r0, r3, r0
 23ff0e2:	07c3      	lsls	r3, r0, #31
 23ff0e4:	d409      	bmi.n	23ff0fa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff0e6:	4620      	mov	r0, r4
 23ff0e8:	f7ff ffa0 	bl	23ff02c <pinAvailable>
 23ff0ec:	b128      	cbz	r0, 23ff0fa <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff0ee:	4629      	mov	r1, r5
 23ff0f0:	4620      	mov	r0, r4
}
 23ff0f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff0f6:	f7fd bc9f 	b.w	23fca38 <hal_gpio_write>
}
 23ff0fa:	bd38      	pop	{r3, r4, r5, pc}

023ff0fc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff0fc:	4770      	bx	lr
	...

023ff100 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff100:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff102:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff104:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff106:	462a      	mov	r2, r5
 23ff108:	2100      	movs	r1, #0
 23ff10a:	f000 fad2 	bl	23ff6b2 <memset>
 23ff10e:	8025      	strh	r5, [r4, #0]
 23ff110:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff112:	4907      	ldr	r1, [pc, #28]	; (23ff130 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff114:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff116:	8125      	strh	r5, [r4, #8]
 23ff118:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff11a:	f000 fa8f 	bl	23ff63c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff11e:	4904      	ldr	r1, [pc, #16]	; (23ff130 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff120:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff122:	4628      	mov	r0, r5
 23ff124:	f000 fa8a 	bl	23ff63c <_ZnajRKSt9nothrow_t>
    };
 23ff128:	60e0      	str	r0, [r4, #12]
}
 23ff12a:	4620      	mov	r0, r4
 23ff12c:	bd38      	pop	{r3, r4, r5, pc}
 23ff12e:	bf00      	nop
 23ff130:	023ffe37 	.word	0x023ffe37

023ff134 <__tcf_2>:
 23ff134:	4770      	bx	lr

023ff136 <__tcf_1>:
 23ff136:	4770      	bx	lr

023ff138 <_Z20acquireSerial1Bufferv>:
{
 23ff138:	b510      	push	{r4, lr}
 23ff13a:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff13c:	f7ff ffe0 	bl	23ff100 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff140:	4620      	mov	r0, r4
 23ff142:	bd10      	pop	{r4, pc}

023ff144 <_Z20acquireSerial2Bufferv>:
 23ff144:	b510      	push	{r4, lr}
 23ff146:	4604      	mov	r4, r0
 23ff148:	f7ff ffda 	bl	23ff100 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff14c:	4620      	mov	r0, r4
 23ff14e:	bd10      	pop	{r4, pc}

023ff150 <_Z20acquireSerial3Bufferv>:
 23ff150:	b510      	push	{r4, lr}
 23ff152:	4604      	mov	r4, r0
 23ff154:	f7ff ffd4 	bl	23ff100 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff158:	4620      	mov	r0, r4
 23ff15a:	bd10      	pop	{r4, pc}

023ff15c <_Z22__fetch_global_Serial1v>:
{
 23ff15c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff15e:	4d0e      	ldr	r5, [pc, #56]	; (23ff198 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff160:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff162:	e8d5 1f8f 	ldab	r1, [r5]
 23ff166:	f011 0401 	ands.w	r4, r1, #1
 23ff16a:	d111      	bne.n	23ff190 <_Z22__fetch_global_Serial1v+0x34>
 23ff16c:	4628      	mov	r0, r5
 23ff16e:	f7fc fa57 	bl	23fb620 <__cxa_guard_acquire>
 23ff172:	b168      	cbz	r0, 23ff190 <_Z22__fetch_global_Serial1v+0x34>
 23ff174:	a801      	add	r0, sp, #4
 23ff176:	f7ff ffdf 	bl	23ff138 <_Z20acquireSerial1Bufferv>
 23ff17a:	4621      	mov	r1, r4
 23ff17c:	aa01      	add	r2, sp, #4
 23ff17e:	4807      	ldr	r0, [pc, #28]	; (23ff19c <_Z22__fetch_global_Serial1v+0x40>)
 23ff180:	f7ff fc06 	bl	23fe990 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff184:	4628      	mov	r0, r5
 23ff186:	f7fc fa50 	bl	23fb62a <__cxa_guard_release>
 23ff18a:	4805      	ldr	r0, [pc, #20]	; (23ff1a0 <_Z22__fetch_global_Serial1v+0x44>)
 23ff18c:	f000 fa5b 	bl	23ff646 <atexit>
    return serial1;
}
 23ff190:	4802      	ldr	r0, [pc, #8]	; (23ff19c <_Z22__fetch_global_Serial1v+0x40>)
 23ff192:	b007      	add	sp, #28
 23ff194:	bd30      	pop	{r4, r5, pc}
 23ff196:	bf00      	nop
 23ff198:	1007aef0 	.word	0x1007aef0
 23ff19c:	1007aefc 	.word	0x1007aefc
 23ff1a0:	023ff0fd 	.word	0x023ff0fd

023ff1a4 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff1a4:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff1a6:	4c0d      	ldr	r4, [pc, #52]	; (23ff1dc <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff1a8:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff1aa:	e8d4 3f8f 	ldab	r3, [r4]
 23ff1ae:	07db      	lsls	r3, r3, #31
 23ff1b0:	d411      	bmi.n	23ff1d6 <_Z22__fetch_global_Serial2v+0x32>
 23ff1b2:	4620      	mov	r0, r4
 23ff1b4:	f7fc fa34 	bl	23fb620 <__cxa_guard_acquire>
 23ff1b8:	b168      	cbz	r0, 23ff1d6 <_Z22__fetch_global_Serial2v+0x32>
 23ff1ba:	a801      	add	r0, sp, #4
 23ff1bc:	f7ff ffc2 	bl	23ff144 <_Z20acquireSerial2Bufferv>
 23ff1c0:	2101      	movs	r1, #1
 23ff1c2:	aa01      	add	r2, sp, #4
 23ff1c4:	4806      	ldr	r0, [pc, #24]	; (23ff1e0 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff1c6:	f7ff fbe3 	bl	23fe990 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff1ca:	4620      	mov	r0, r4
 23ff1cc:	f7fc fa2d 	bl	23fb62a <__cxa_guard_release>
 23ff1d0:	4804      	ldr	r0, [pc, #16]	; (23ff1e4 <_Z22__fetch_global_Serial2v+0x40>)
 23ff1d2:	f000 fa38 	bl	23ff646 <atexit>
	return serial2;
}
 23ff1d6:	4802      	ldr	r0, [pc, #8]	; (23ff1e0 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff1d8:	b006      	add	sp, #24
 23ff1da:	bd10      	pop	{r4, pc}
 23ff1dc:	1007aef4 	.word	0x1007aef4
 23ff1e0:	1007af10 	.word	0x1007af10
 23ff1e4:	023ff137 	.word	0x023ff137

023ff1e8 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff1e8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff1ea:	f7ff ffdb 	bl	23ff1a4 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff1ee:	4b07      	ldr	r3, [pc, #28]	; (23ff20c <_Z15serialEventRun2v+0x24>)
 23ff1f0:	4604      	mov	r4, r0
 23ff1f2:	b153      	cbz	r3, 23ff20a <_Z15serialEventRun2v+0x22>
 23ff1f4:	f7ff fbea 	bl	23fe9cc <_ZN11USARTSerial9isEnabledEv>
 23ff1f8:	b138      	cbz	r0, 23ff20a <_Z15serialEventRun2v+0x22>
 23ff1fa:	6823      	ldr	r3, [r4, #0]
 23ff1fc:	4620      	mov	r0, r4
 23ff1fe:	691b      	ldr	r3, [r3, #16]
 23ff200:	4798      	blx	r3
 23ff202:	2800      	cmp	r0, #0
 23ff204:	dd01      	ble.n	23ff20a <_Z15serialEventRun2v+0x22>
        handler();
 23ff206:	e000      	b.n	23ff20a <_Z15serialEventRun2v+0x22>
 23ff208:	bf00      	nop
}
 23ff20a:	bd10      	pop	{r4, pc}
 23ff20c:	00000000 	.word	0x00000000

023ff210 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff210:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff212:	4c0d      	ldr	r4, [pc, #52]	; (23ff248 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff214:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff216:	e8d4 3f8f 	ldab	r3, [r4]
 23ff21a:	07db      	lsls	r3, r3, #31
 23ff21c:	d411      	bmi.n	23ff242 <_Z22__fetch_global_Serial3v+0x32>
 23ff21e:	4620      	mov	r0, r4
 23ff220:	f7fc f9fe 	bl	23fb620 <__cxa_guard_acquire>
 23ff224:	b168      	cbz	r0, 23ff242 <_Z22__fetch_global_Serial3v+0x32>
 23ff226:	a801      	add	r0, sp, #4
 23ff228:	f7ff ff92 	bl	23ff150 <_Z20acquireSerial3Bufferv>
 23ff22c:	2102      	movs	r1, #2
 23ff22e:	aa01      	add	r2, sp, #4
 23ff230:	4806      	ldr	r0, [pc, #24]	; (23ff24c <_Z22__fetch_global_Serial3v+0x3c>)
 23ff232:	f7ff fbad 	bl	23fe990 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff236:	4620      	mov	r0, r4
 23ff238:	f7fc f9f7 	bl	23fb62a <__cxa_guard_release>
 23ff23c:	4804      	ldr	r0, [pc, #16]	; (23ff250 <_Z22__fetch_global_Serial3v+0x40>)
 23ff23e:	f000 fa02 	bl	23ff646 <atexit>
	return serial3;
}
 23ff242:	4802      	ldr	r0, [pc, #8]	; (23ff24c <_Z22__fetch_global_Serial3v+0x3c>)
 23ff244:	b006      	add	sp, #24
 23ff246:	bd10      	pop	{r4, pc}
 23ff248:	1007aef8 	.word	0x1007aef8
 23ff24c:	1007af24 	.word	0x1007af24
 23ff250:	023ff135 	.word	0x023ff135

023ff254 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff254:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff256:	f7ff ffdb 	bl	23ff210 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff25a:	4b07      	ldr	r3, [pc, #28]	; (23ff278 <_Z15serialEventRun3v+0x24>)
 23ff25c:	4604      	mov	r4, r0
 23ff25e:	b153      	cbz	r3, 23ff276 <_Z15serialEventRun3v+0x22>
 23ff260:	f7ff fbb4 	bl	23fe9cc <_ZN11USARTSerial9isEnabledEv>
 23ff264:	b138      	cbz	r0, 23ff276 <_Z15serialEventRun3v+0x22>
 23ff266:	6823      	ldr	r3, [r4, #0]
 23ff268:	4620      	mov	r0, r4
 23ff26a:	691b      	ldr	r3, [r3, #16]
 23ff26c:	4798      	blx	r3
 23ff26e:	2800      	cmp	r0, #0
 23ff270:	dd01      	ble.n	23ff276 <_Z15serialEventRun3v+0x22>
        handler();
 23ff272:	e000      	b.n	23ff276 <_Z15serialEventRun3v+0x22>
 23ff274:	bf00      	nop
}
 23ff276:	bd10      	pop	{r4, pc}
 23ff278:	00000000 	.word	0x00000000

023ff27c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff27c:	4770      	bx	lr
	...

023ff280 <_Z17acquireWireBufferv>:
{
 23ff280:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff282:	4b0a      	ldr	r3, [pc, #40]	; (23ff2ac <_Z17acquireWireBufferv+0x2c>)
{
 23ff284:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff286:	6003      	str	r3, [r0, #0]
 23ff288:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff28a:	4909      	ldr	r1, [pc, #36]	; (23ff2b0 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff28c:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff28e:	2020      	movs	r0, #32
 23ff290:	f000 f9d4 	bl	23ff63c <_ZnajRKSt9nothrow_t>
	};
 23ff294:	2520      	movs	r5, #32
 23ff296:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff298:	4905      	ldr	r1, [pc, #20]	; (23ff2b0 <_Z17acquireWireBufferv+0x30>)
 23ff29a:	4628      	mov	r0, r5
	};
 23ff29c:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff29e:	f000 f9cd 	bl	23ff63c <_ZnajRKSt9nothrow_t>
	};
 23ff2a2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff2a6:	4620      	mov	r0, r4
 23ff2a8:	bd38      	pop	{r3, r4, r5, pc}
 23ff2aa:	bf00      	nop
 23ff2ac:	00010018 	.word	0x00010018
 23ff2b0:	023ffe37 	.word	0x023ffe37

023ff2b4 <_Z19__fetch_global_Wirev>:
{
 23ff2b4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff2b6:	4d0e      	ldr	r5, [pc, #56]	; (23ff2f0 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff2b8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff2ba:	e8d5 1f8f 	ldab	r1, [r5]
 23ff2be:	f011 0401 	ands.w	r4, r1, #1
 23ff2c2:	d111      	bne.n	23ff2e8 <_Z19__fetch_global_Wirev+0x34>
 23ff2c4:	4628      	mov	r0, r5
 23ff2c6:	f7fc f9ab 	bl	23fb620 <__cxa_guard_acquire>
 23ff2ca:	b168      	cbz	r0, 23ff2e8 <_Z19__fetch_global_Wirev+0x34>
 23ff2cc:	4668      	mov	r0, sp
 23ff2ce:	f7ff ffd7 	bl	23ff280 <_Z17acquireWireBufferv>
 23ff2d2:	466a      	mov	r2, sp
 23ff2d4:	4621      	mov	r1, r4
 23ff2d6:	4807      	ldr	r0, [pc, #28]	; (23ff2f4 <_Z19__fetch_global_Wirev+0x40>)
 23ff2d8:	f7ff fba8 	bl	23fea2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff2dc:	4628      	mov	r0, r5
 23ff2de:	f7fc f9a4 	bl	23fb62a <__cxa_guard_release>
 23ff2e2:	4805      	ldr	r0, [pc, #20]	; (23ff2f8 <_Z19__fetch_global_Wirev+0x44>)
 23ff2e4:	f000 f9af 	bl	23ff646 <atexit>
	return wire;
}
 23ff2e8:	4802      	ldr	r0, [pc, #8]	; (23ff2f4 <_Z19__fetch_global_Wirev+0x40>)
 23ff2ea:	b007      	add	sp, #28
 23ff2ec:	bd30      	pop	{r4, r5, pc}
 23ff2ee:	bf00      	nop
 23ff2f0:	1007af3c 	.word	0x1007af3c
 23ff2f4:	1007af40 	.word	0x1007af40
 23ff2f8:	023ff27d 	.word	0x023ff27d

023ff2fc <PLL_Div>:
  */
void PLL_Div(u32 div)
{
	u32 Tmp;

	Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PERI_CLK_CTRL3);
 23ff2fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23ff300:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
	Tmp &= ~(BIT_MASK_HSYS_I2S_CLKDIV << BIT_SHIFT_HSYS_I2S_CLKDIV);
 23ff304:	f023 63fe 	bic.w	r3, r3, #133169152	; 0x7f00000
	Tmp |= ((u32)div) << BIT_SHIFT_HSYS_I2S_CLKDIV;
 23ff308:	ea43 5000 	orr.w	r0, r3, r0, lsl #20
	HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PERI_CLK_CTRL3, Tmp);
 23ff30c:	f8c2 0218 	str.w	r0, [r2, #536]	; 0x218
}
 23ff310:	4770      	bx	lr
	...

023ff314 <PLL_I2S_Set>:
void PLL_I2S_Set(u32 new_state)
{
	u32 Tmp;


	if (ENABLE == new_state){
 23ff314:	2801      	cmp	r0, #1
{
 23ff316:	b570      	push	{r4, r5, r6, lr}
 23ff318:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (ENABLE == new_state){
 23ff31c:	d14a      	bne.n	23ff3b4 <PLL_I2S_Set+0xa0>
		//avoid repeated pll enable operation
		if((HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_TEST) & BIT_PLL_I2S_RDY)){
 23ff31e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 23ff322:	009a      	lsls	r2, r3, #2
 23ff324:	d445      	bmi.n	23ff3b2 <PLL_I2S_Set+0x9e>
			return ;
		}
		//enable 98.304M PLL
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_FUNC_EN0);
 23ff326:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 23ff32a:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
		Tmp |= (BIT_LP_PLL_BG_I_EN |BIT_LP_PLL_BG_EN);
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);

		DelayUs(2);
 23ff32e:	2002      	movs	r0, #2
		Tmp |= BIT_SYS_AMACRO_EN;
 23ff330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_FUNC_EN0, Tmp);
 23ff334:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
 23ff338:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280
		DelayUs(2);
 23ff33c:	4e21      	ldr	r6, [pc, #132]	; (23ff3c4 <PLL_I2S_Set+0xb0>)
		Tmp |= (BIT_LP_PLL_BG_I_EN |BIT_LP_PLL_BG_EN);
 23ff33e:	f043 0303 	orr.w	r3, r3, #3
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);
 23ff342:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280
		DelayUs(2);
 23ff346:	47b0      	blx	r6

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
 23ff348:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
		Tmp |= BIT_PLL_I2S_POWCUT_EN;
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);

		DelayUs(400);
 23ff34c:	f44f 70c8 	mov.w	r0, #400	; 0x190
		Tmp |= BIT_LP_PLL_MBIAS_EN;
 23ff350:	f043 0304 	orr.w	r3, r3, #4
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);
 23ff354:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23ff358:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_POWCUT_EN;
 23ff35c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23ff360:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		DelayUs(400);
 23ff364:	47b0      	blx	r6

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_XTAL_CTRL1);
 23ff366:	f8d5 3264 	ldr.w	r3, [r5, #612]	; 0x264
		Tmp &= ~BIT_XTAL_AAC_GM_EN;
 23ff36a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_XTAL_CTRL1, Tmp);
 23ff36e:	f8c5 3264 	str.w	r3, [r5, #612]	; 0x264

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23ff372:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= (BIT_PLL_I2S_DIV_EN | BIT_PLL_I2S_EN);
 23ff376:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23ff37a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PWR_ISO_CTRL);
 23ff37e:	6823      	ldr	r3, [r4, #0]
		Tmp &= ~BIT_HSYS_ISO_AUXPLL_I2S;
 23ff380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PWR_ISO_CTRL, Tmp);
 23ff384:	6023      	str	r3, [r4, #0]

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL1);
 23ff386:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
		Tmp |= BIT_PLL_I2S_POW_SDM_FCODE;
 23ff38a:	f043 0301 	orr.w	r3, r3, #1
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL1, Tmp);
 23ff38e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

		while ((HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_TEST) & BIT_PLL_I2S_RDY) != BIT_PLL_I2S_RDY) ;
 23ff392:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 23ff396:	009b      	lsls	r3, r3, #2
 23ff398:	d5fb      	bpl.n	23ff392 <PLL_I2S_Set+0x7e>

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23ff39a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_CLK_EN;
 23ff39e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23ff3a2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23ff3a6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_DIV2_EN;
 23ff3aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
	}
	else{
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
		Tmp &= ~(BIT_PLL_I2S_CLK_EN|BIT_PLL_I2S_DIV2_EN|BIT_PLL_I2S_EN|BIT_PLL_I2S_DIV_EN|BIT_PLL_I2S_DIV_EN);
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23ff3ae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
}
 23ff3b2:	bd70      	pop	{r4, r5, r6, pc}
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23ff3b4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp &= ~(BIT_PLL_I2S_CLK_EN|BIT_PLL_I2S_DIV2_EN|BIT_PLL_I2S_EN|BIT_PLL_I2S_DIV_EN|BIT_PLL_I2S_DIV_EN);
 23ff3b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 23ff3bc:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 23ff3c0:	e7f5      	b.n	23ff3ae <PLL_I2S_Set+0x9a>
 23ff3c2:	bf00      	nop
 23ff3c4:	1010a949 	.word	0x1010a949

023ff3c8 <AUDIO_SP_StructInit>:
  *         initialized.
  * @retval None
  */
void AUDIO_SP_StructInit(SP_InitTypeDef* SP_InitStruct)
{
	SP_InitStruct->SP_WordLen = SP_WL_16;
 23ff3c8:	2300      	movs	r3, #0
	SP_InitStruct->SP_DataFormat = SP_DF_I2S;
 23ff3ca:	e9c0 3300 	strd	r3, r3, [r0]
	SP_InitStruct->SP_MonoStereo = SP_CH_STEREO;
	SP_InitStruct->SP_SelRxCh = SP_RX_CH_LR;
 23ff3ce:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 23ff3d2:	4770      	bx	lr

023ff3d4 <AUDIO_SP_TxStart>:
  * @retval None
  */
void AUDIO_SP_TxStart(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23ff3d4:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE) {
 23ff3d6:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23ff3d8:	bf0b      	itete	eq
 23ff3da:	f423 3380 	biceq.w	r3, r3, #65536	; 0x10000
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
	} else {
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_TX_DISABLE;
 23ff3de:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23ff3e2:	6043      	streq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_TX_DISABLE;
 23ff3e4:	6043      	strne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
 23ff3e6:	bf0b      	itete	eq
 23ff3e8:	6843      	ldreq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_TX;
 23ff3ea:	6843      	ldrne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
 23ff3ec:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_TX;
 23ff3f0:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
 23ff3f4:	6043      	str	r3, [r0, #4]
	}
}
 23ff3f6:	4770      	bx	lr

023ff3f8 <AUDIO_SP_RxStart>:
  * @retval None
  */
void AUDIO_SP_RxStart(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23ff3f8:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE) {
 23ff3fa:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23ff3fc:	bf0b      	itete	eq
 23ff3fe:	f023 7380 	biceq.w	r3, r3, #16777216	; 0x1000000
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
	} else {
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_RX_DISABLE;
 23ff402:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23ff406:	6043      	streq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_RX_DISABLE;
 23ff408:	6043      	strne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
 23ff40a:	bf0b      	itete	eq
 23ff40c:	6843      	ldreq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_RX;
 23ff40e:	6843      	ldrne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
 23ff410:	f043 7300 	orreq.w	r3, r3, #33554432	; 0x2000000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_RX;
 23ff414:	f023 7300 	bicne.w	r3, r3, #33554432	; 0x2000000
 23ff418:	6043      	str	r3, [r0, #4]
	}
}
 23ff41a:	4770      	bx	lr

023ff41c <AUDIO_SP_Init>:
{
 23ff41c:	b538      	push	{r3, r4, r5, lr}
	assert_param(IS_SP_WORD_LEN(SP_InitStruct->SP_WordLen));
 23ff41e:	680b      	ldr	r3, [r1, #0]
{
 23ff420:	4605      	mov	r5, r0
 23ff422:	460c      	mov	r4, r1
	assert_param(IS_SP_WORD_LEN(SP_InitStruct->SP_WordLen));
 23ff424:	b133      	cbz	r3, 23ff434 <AUDIO_SP_Init+0x18>
 23ff426:	3b02      	subs	r3, #2
 23ff428:	2b01      	cmp	r3, #1
 23ff42a:	d903      	bls.n	23ff434 <AUDIO_SP_Init+0x18>
 23ff42c:	213a      	movs	r1, #58	; 0x3a
 23ff42e:	481f      	ldr	r0, [pc, #124]	; (23ff4ac <AUDIO_SP_Init+0x90>)
 23ff430:	f000 fab2 	bl	23ff998 <__io_assert_failed_veneer>
	assert_param(IS_SP_DATA_FMT(SP_InitStruct->SP_DataFormat));
 23ff434:	6863      	ldr	r3, [r4, #4]
 23ff436:	2b03      	cmp	r3, #3
 23ff438:	d906      	bls.n	23ff448 <AUDIO_SP_Init+0x2c>
 23ff43a:	3b06      	subs	r3, #6
 23ff43c:	2b01      	cmp	r3, #1
 23ff43e:	d903      	bls.n	23ff448 <AUDIO_SP_Init+0x2c>
 23ff440:	213b      	movs	r1, #59	; 0x3b
 23ff442:	481a      	ldr	r0, [pc, #104]	; (23ff4ac <AUDIO_SP_Init+0x90>)
 23ff444:	f000 faa8 	bl	23ff998 <__io_assert_failed_veneer>
	assert_param(IS_SP_CHN_NUM(SP_InitStruct->SP_MonoStereo));
 23ff448:	68a3      	ldr	r3, [r4, #8]
 23ff44a:	2b01      	cmp	r3, #1
 23ff44c:	d903      	bls.n	23ff456 <AUDIO_SP_Init+0x3a>
 23ff44e:	213c      	movs	r1, #60	; 0x3c
 23ff450:	4816      	ldr	r0, [pc, #88]	; (23ff4ac <AUDIO_SP_Init+0x90>)
 23ff452:	f000 faa1 	bl	23ff998 <__io_assert_failed_veneer>
	assert_param(IS_SP_SEL_RX_CH(SP_InitStruct->SP_SelRxCh));
 23ff456:	68e3      	ldr	r3, [r4, #12]
 23ff458:	2b03      	cmp	r3, #3
 23ff45a:	d903      	bls.n	23ff464 <AUDIO_SP_Init+0x48>
 23ff45c:	213d      	movs	r1, #61	; 0x3d
 23ff45e:	4813      	ldr	r0, [pc, #76]	; (23ff4ac <AUDIO_SP_Init+0x90>)
 23ff460:	f000 fa9a 	bl	23ff998 <__io_assert_failed_veneer>
	SPORTx->SP_CTRLR0 |= SP_CTRLR0_RST;
 23ff464:	686b      	ldr	r3, [r5, #4]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23ff466:	2100      	movs	r1, #0
	SPORTx->SP_CTRLR0 |= SP_CTRLR0_RST;
 23ff468:	f043 0301 	orr.w	r3, r3, #1
 23ff46c:	606b      	str	r3, [r5, #4]
	SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RST;
 23ff46e:	686b      	ldr	r3, [r5, #4]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23ff470:	4628      	mov	r0, r5
	SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RST;
 23ff472:	f023 0301 	bic.w	r3, r3, #1
 23ff476:	606b      	str	r3, [r5, #4]
	SPORTx->SP_CLK_DIV = 0x271 | (0x10 << 16) | SP_CLK_MI_NI_UPDATE;
 23ff478:	4b0d      	ldr	r3, [pc, #52]	; (23ff4b0 <AUDIO_SP_Init+0x94>)
 23ff47a:	61eb      	str	r3, [r5, #28]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23ff47c:	4b0d      	ldr	r3, [pc, #52]	; (23ff4b4 <AUDIO_SP_Init+0x98>)
 23ff47e:	4798      	blx	r3
	AUDIO_SP_RxStart(SPORTx, DISABLE);
 23ff480:	4b0d      	ldr	r3, [pc, #52]	; (23ff4b8 <AUDIO_SP_Init+0x9c>)
 23ff482:	4798      	blx	r3
		(SP_InitStruct->SP_DataFormat << 8) |
 23ff484:	e9d4 1300 	ldrd	r1, r3, [r4]
	Tmp = SPORTx->SP_CTRLR0;
 23ff488:	686a      	ldr	r2, [r5, #4]
		(SP_InitStruct->SP_DataFormat << 8) |
 23ff48a:	021b      	lsls	r3, r3, #8
	Tmp &= ~(SP_CTRLR0_DATA_LEN_SEL |SP_CTRLR0_DATA_FORMAT_SEL | SP_CTRLR0_EN_I2S_MONO | SP_CTRLR0_SEL_I2S_RX_CH);
 23ff48c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 23ff490:	f422 526c 	bic.w	r2, r2, #15104	; 0x3b00
	Tmp |= ((SP_InitStruct->SP_WordLen << 12) |
 23ff494:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 23ff498:	4313      	orrs	r3, r2
		(SP_InitStruct->SP_MonoStereo << 11) |
 23ff49a:	68a2      	ldr	r2, [r4, #8]
 23ff49c:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
		(SP_InitStruct->SP_SelRxCh << 28));
 23ff4a0:	68e2      	ldr	r2, [r4, #12]
	Tmp |= ((SP_InitStruct->SP_WordLen << 12) |
 23ff4a2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
	SPORTx->SP_CTRLR0 = Tmp;
 23ff4a6:	606b      	str	r3, [r5, #4]
}
 23ff4a8:	bd38      	pop	{r3, r4, r5, pc}
 23ff4aa:	bf00      	nop
 23ff4ac:	023ffe29 	.word	0x023ffe29
 23ff4b0:	80100271 	.word	0x80100271
 23ff4b4:	023ff3d5 	.word	0x023ff3d5
 23ff4b8:	023ff3f9 	.word	0x023ff3f9

023ff4bc <AUDIO_SP_RdmaCmd>:
  * @retval None
  */
void AUDIO_SP_RdmaCmd(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23ff4bc:	6883      	ldr	r3, [r0, #8]
	if (NewState == ENABLE) {
 23ff4be:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23ff4c0:	bf0b      	itete	eq
 23ff4c2:	f443 2300 	orreq.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
	} else {
		SPORTx->SP_CTRLR1 &= ~ SP_CTRLR1_RDMA_REQ;
 23ff4c6:	f423 2300 	bicne.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23ff4ca:	6083      	streq	r3, [r0, #8]
		SPORTx->SP_CTRLR1 &= ~ SP_CTRLR1_RDMA_REQ;
 23ff4cc:	6083      	strne	r3, [r0, #8]
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
 23ff4ce:	bf0b      	itete	eq
 23ff4d0:	68c3      	ldreq	r3, [r0, #12]
		SPORTx->SP_DSP_INT_CR |= SP_RX_DMA_SINGLE_NO_REQ;
 23ff4d2:	68c3      	ldrne	r3, [r0, #12]
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
 23ff4d4:	f423 2300 	biceq.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_DSP_INT_CR |= SP_RX_DMA_SINGLE_NO_REQ;
 23ff4d8:	f443 2300 	orrne.w	r3, r3, #524288	; 0x80000
 23ff4dc:	60c3      	str	r3, [r0, #12]
	}
}
 23ff4de:	4770      	bx	lr

023ff4e0 <AUDIO_SP_RXGDMA_Init>:
	void *CallbackData,
	IRQ_FUN CallbackFunc,
	u8 *pRxData,
	u32 Length
	)
{
 23ff4e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23ff4e4:	461f      	mov	r7, r3
 23ff4e6:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
	u8 GdmaChnl;
	AUDIO_SPORT_TypeDef *SPORTx = AUDIO_DEV_TABLE[Index].SPORTx;
 23ff4ea:	230c      	movs	r3, #12
 23ff4ec:	4358      	muls	r0, r3
 23ff4ee:	4b4b      	ldr	r3, [pc, #300]	; (23ff61c <AUDIO_SP_RXGDMA_Init+0x13c>)
	u32 WordLen = AUDIO_SP_GetWordLen(SPORTx);

	assert_param(GDMA_InitStruct != NULL);
 23ff4f0:	460c      	mov	r4, r1
	AUDIO_SPORT_TypeDef *SPORTx = AUDIO_DEV_TABLE[Index].SPORTx;
 23ff4f2:	f853 8000 	ldr.w	r8, [r3, r0]
	u32 len = ((SPORTx->SP_CTRLR0) & SP_CTRLR0_DATA_LEN_SEL) >> 12;
 23ff4f6:	f8d8 9004 	ldr.w	r9, [r8, #4]
	assert_param(GDMA_InitStruct != NULL);
 23ff4fa:	b931      	cbnz	r1, 23ff50a <AUDIO_SP_RXGDMA_Init+0x2a>
 23ff4fc:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 23ff500:	4847      	ldr	r0, [pc, #284]	; (23ff620 <AUDIO_SP_RXGDMA_Init+0x140>)
 23ff502:	9201      	str	r2, [sp, #4]
 23ff504:	f000 fa48 	bl	23ff998 <__io_assert_failed_veneer>
 23ff508:	9a01      	ldr	r2, [sp, #4]
	/*obtain a DMA channel and register DMA interrupt handler*/
	GdmaChnl = GDMA_ChnlAlloc(0, CallbackFunc, (u32)CallbackData, 12);
 23ff50a:	4639      	mov	r1, r7
 23ff50c:	230c      	movs	r3, #12
 23ff50e:	4f45      	ldr	r7, [pc, #276]	; (23ff624 <AUDIO_SP_RXGDMA_Init+0x144>)
 23ff510:	2000      	movs	r0, #0
 23ff512:	47b8      	blx	r7
	if (GdmaChnl == 0xFF) {
 23ff514:	28ff      	cmp	r0, #255	; 0xff
	GdmaChnl = GDMA_ChnlAlloc(0, CallbackFunc, (u32)CallbackData, 12);
 23ff516:	4607      	mov	r7, r0
	if (GdmaChnl == 0xFF) {
 23ff518:	d07e      	beq.n	23ff618 <AUDIO_SP_RXGDMA_Init+0x138>
		// No Available DMA channel
		return _FALSE;
	}

	_memset((void *)GDMA_InitStruct, 0, sizeof(GDMA_InitTypeDef));
 23ff51a:	2254      	movs	r2, #84	; 0x54
 23ff51c:	2100      	movs	r1, #0
 23ff51e:	4b42      	ldr	r3, [pc, #264]	; (23ff628 <AUDIO_SP_RXGDMA_Init+0x148>)
 23ff520:	4620      	mov	r0, r4
 23ff522:	4798      	blx	r3
	/*set GDMA initial structure member value*/
	GDMA_InitStruct->MuliBlockCunt = 0;
	GDMA_InitStruct->GDMA_ReloadSrc = 0;
	GDMA_InitStruct->MaxMuliBlock = 1;
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
	GDMA_InitStruct->GDMA_SrcHandshakeInterface = AUDIO_DEV_TABLE[Index].Rx_HandshakeInterface;
 23ff524:	210b      	movs	r1, #11
 23ff526:	6421      	str	r1, [r4, #64]	; 0x40
	GDMA_InitStruct->GDMA_SrcAddr = (u32)&AUDIO_DEV_TABLE[Index].SPORTx->SP_RX_DR;
 23ff528:	f108 0110 	add.w	r1, r8, #16
	GDMA_InitStruct->MuliBlockCunt = 0;
 23ff52c:	2200      	movs	r2, #0
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
 23ff52e:	2302      	movs	r3, #2
	GDMA_InitStruct->MaxMuliBlock = 1;
 23ff530:	2001      	movs	r0, #1
	GDMA_InitStruct->GDMA_SrcAddr = (u32)&AUDIO_DEV_TABLE[Index].SPORTx->SP_RX_DR;
 23ff532:	6221      	str	r1, [r4, #32]
	GDMA_InitStruct->GDMA_Index = 0;
	GDMA_InitStruct->GDMA_ChNum = GdmaChnl;
	GDMA_InitStruct->GDMA_IsrType = (BlockType|TransferType|ErrType);	
 23ff534:	2113      	movs	r1, #19
	u32 len = ((SPORTx->SP_CTRLR0) & SP_CTRLR0_DATA_LEN_SEL) >> 12;
 23ff536:	f3c9 3901 	ubfx	r9, r9, #12, #2
	GDMA_InitStruct->GDMA_DstInc = IncType;
	GDMA_InitStruct->GDMA_SrcInc = NoChange;

	/*  Cofigure GDMA transfer */
	if (WordLen == SP_WL_8)  {
 23ff53a:	f1b9 0f03 	cmp.w	r9, #3
	GDMA_InitStruct->GDMA_SrcInc = NoChange;
 23ff53e:	e9c4 2304 	strd	r2, r3, [r4, #16]
	GDMA_InitStruct->MuliBlockCunt = 0;
 23ff542:	64a2      	str	r2, [r4, #72]	; 0x48
	GDMA_InitStruct->GDMA_ReloadSrc = 0;
 23ff544:	6322      	str	r2, [r4, #48]	; 0x30
	GDMA_InitStruct->MaxMuliBlock = 1;
 23ff546:	64e0      	str	r0, [r4, #76]	; 0x4c
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
 23ff548:	6063      	str	r3, [r4, #4]
	GDMA_InitStruct->GDMA_Index = 0;
 23ff54a:	7022      	strb	r2, [r4, #0]
	GDMA_InitStruct->GDMA_ChNum = GdmaChnl;
 23ff54c:	7067      	strb	r7, [r4, #1]
	GDMA_InitStruct->GDMA_IsrType = (BlockType|TransferType|ErrType);	
 23ff54e:	62e1      	str	r1, [r4, #44]	; 0x2c
	if (WordLen == SP_WL_8)  {
 23ff550:	d144      	bne.n	23ff5dc <AUDIO_SP_RXGDMA_Init+0xfc>
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthOneByte;
		GDMA_InitStruct->GDMA_SrcMsize = MsizeFour;
		
		GDMA_InitStruct->GDMA_DstMsize = MsizeOne;
 23ff552:	e9c4 2006 	strd	r2, r0, [r4, #24]
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthOneByte;
 23ff556:	60e2      	str	r2, [r4, #12]
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
 23ff558:	60a3      	str	r3, [r4, #8]
		GDMA_InitStruct->GDMA_BlockSize = Length;
 23ff55a:	8526      	strh	r6, [r4, #40]	; 0x28
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
		GDMA_InitStruct->GDMA_BlockSize = Length >> 2;
	}
	
	/*check GDMA block size*/
	assert_param(GDMA_InitStruct->GDMA_BlockSize <= 4096);
 23ff55c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 23ff55e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 23ff562:	d904      	bls.n	23ff56e <AUDIO_SP_RXGDMA_Init+0x8e>
 23ff564:	f240 1177 	movw	r1, #375	; 0x177
 23ff568:	482d      	ldr	r0, [pc, #180]	; (23ff620 <AUDIO_SP_RXGDMA_Init+0x140>)
 23ff56a:	f000 fa15 	bl	23ff998 <__io_assert_failed_veneer>

	/*configure GDMA destination address */
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
	
	/*  Enable GDMA for RX */
	GDMA_Init(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, GDMA_InitStruct);
 23ff56e:	4622      	mov	r2, r4
 23ff570:	4b2e      	ldr	r3, [pc, #184]	; (23ff62c <AUDIO_SP_RXGDMA_Init+0x14c>)
 23ff572:	7861      	ldrb	r1, [r4, #1]
 23ff574:	7820      	ldrb	r0, [r4, #0]
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
 23ff576:	6265      	str	r5, [r4, #36]	; 0x24
	GDMA_Init(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, GDMA_InitStruct);
 23ff578:	4798      	blx	r3
  * @brief  Check DCache Enabled or not.
  */
__STATIC_INLINE
u32 DCache_IsEnabled(void)
{
	return ((SCB->CCR & (u32)SCB_CCR_DC_Msk)?1:0);
 23ff57a:	4a2d      	ldr	r2, [pc, #180]	; (23ff630 <AUDIO_SP_RXGDMA_Init+0x150>)
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
 23ff57c:	462f      	mov	r7, r5
 23ff57e:	6953      	ldr	r3, [r2, #20]
__STATIC_INLINE
void DCache_CleanInvalidate(u32 Address, u32 Bytes)
{
	u32 addr = Address, len = Bytes;

	if (DCache_IsEnabled() == 0)
 23ff580:	03db      	lsls	r3, r3, #15
 23ff582:	d522      	bpl.n	23ff5ca <AUDIO_SP_RXGDMA_Init+0xea>
		return;

	if ((Address == 0xFFFFFFFF) && (Bytes == 0xFFFFFFFF)) {
 23ff584:	1c68      	adds	r0, r5, #1
 23ff586:	d130      	bne.n	23ff5ea <AUDIO_SP_RXGDMA_Init+0x10a>
 23ff588:	1c71      	adds	r1, r6, #1
 23ff58a:	d130      	bne.n	23ff5ee <AUDIO_SP_RXGDMA_Init+0x10e>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 23ff58c:	2300      	movs	r3, #0
 23ff58e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 23ff592:	f3bf 8f4f 	dsb	sy
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23ff596:	f643 75e0 	movw	r5, #16352	; 0x3fe0
    ccsidr = SCB->CCSIDR;
 23ff59a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 23ff59e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 23ff5a2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 23ff5a6:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 23ff5a8:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23ff5aa:	ea03 0705 	and.w	r7, r3, r5
 23ff5ae:	ea47 76c1 	orr.w	r6, r7, r1, lsl #31
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 23ff5b2:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23ff5b4:	f8c2 6274 	str.w	r6, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 23ff5b8:	d2f9      	bcs.n	23ff5ae <AUDIO_SP_RXGDMA_Init+0xce>
    } while(sets-- != 0U);
 23ff5ba:	3b20      	subs	r3, #32
 23ff5bc:	f113 0f20 	cmn.w	r3, #32
 23ff5c0:	d1f2      	bne.n	23ff5a8 <AUDIO_SP_RXGDMA_Init+0xc8>
 23ff5c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 23ff5c6:	f3bf 8f6f 	isb	sy
	DCache_CleanInvalidate((u32)pRxData, Length);
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23ff5ca:	7820      	ldrb	r0, [r4, #0]
 23ff5cc:	2201      	movs	r2, #1
 23ff5ce:	7861      	ldrb	r1, [r4, #1]
 23ff5d0:	4b18      	ldr	r3, [pc, #96]	; (23ff634 <AUDIO_SP_RXGDMA_Init+0x154>)
 23ff5d2:	4798      	blx	r3

	return _TRUE;
 23ff5d4:	2001      	movs	r0, #1
}
 23ff5d6:	b003      	add	sp, #12
 23ff5d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		GDMA_InitStruct->GDMA_DstMsize = MsizeEight;
 23ff5dc:	e9c4 3306 	strd	r3, r3, [r4, #24]
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthFourBytes;
 23ff5e0:	60e3      	str	r3, [r4, #12]
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
 23ff5e2:	60a3      	str	r3, [r4, #8]
		GDMA_InitStruct->GDMA_BlockSize = Length >> 2;
 23ff5e4:	08b3      	lsrs	r3, r6, #2
 23ff5e6:	8523      	strh	r3, [r4, #40]	; 0x28
 23ff5e8:	e7b8      	b.n	23ff55c <AUDIO_SP_RXGDMA_Init+0x7c>
		SCB_CleanInvalidateDCache();
	} else {
		if ((addr & 0x1F) != 0) {
 23ff5ea:	06eb      	lsls	r3, r5, #27
 23ff5ec:	d007      	beq.n	23ff5fe <AUDIO_SP_RXGDMA_Init+0x11e>
			addr = (Address >> 5) << 5;   //32-byte aligned
 23ff5ee:	f025 071f 	bic.w	r7, r5, #31
			len = ((((Address + Bytes -1) >> 5) + 1) << 5) - addr; //next 32-byte aligned
 23ff5f2:	4435      	add	r5, r6
 23ff5f4:	3d01      	subs	r5, #1
 23ff5f6:	f025 051f 	bic.w	r5, r5, #31
 23ff5fa:	3520      	adds	r5, #32
 23ff5fc:	1bee      	subs	r6, r5, r7
		}

		SCB_CleanInvalidateDCache_by_Addr((u32*)addr, len);
 23ff5fe:	4635      	mov	r5, r6
  __ASM volatile ("dsb 0xF":::"memory");
 23ff600:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCIMVAC = op_addr;
 23ff604:	4a0a      	ldr	r2, [pc, #40]	; (23ff630 <AUDIO_SP_RXGDMA_Init+0x150>)
 23ff606:	4437      	add	r7, r6
    while (op_size > 0) {
 23ff608:	2d00      	cmp	r5, #0
 23ff60a:	eba7 0305 	sub.w	r3, r7, r5
 23ff60e:	ddd8      	ble.n	23ff5c2 <AUDIO_SP_RXGDMA_Init+0xe2>
      SCB->DCCIMVAC = op_addr;
 23ff610:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 23ff614:	3d20      	subs	r5, #32
 23ff616:	e7f7      	b.n	23ff608 <AUDIO_SP_RXGDMA_Init+0x128>
		return _FALSE;
 23ff618:	2000      	movs	r0, #0
 23ff61a:	e7dc      	b.n	23ff5d6 <AUDIO_SP_RXGDMA_Init+0xf6>
 23ff61c:	023ffe08 	.word	0x023ffe08
 23ff620:	023ffe14 	.word	0x023ffe14
 23ff624:	1010c43d 	.word	0x1010c43d
 23ff628:	10110ea1 	.word	0x10110ea1
 23ff62c:	1010bff9 	.word	0x1010bff9
 23ff630:	e000ed00 	.word	0xe000ed00
 23ff634:	1010bf91 	.word	0x1010bf91

023ff638 <_ZnwjRKSt9nothrow_t>:
 23ff638:	f7fb bfdd 	b.w	23fb5f6 <_Znwj>

023ff63c <_ZnajRKSt9nothrow_t>:
 23ff63c:	f7fb bfdd 	b.w	23fb5fa <_Znaj>

023ff640 <_ZSt25__throw_bad_function_callv>:
 23ff640:	b508      	push	{r3, lr}
 23ff642:	f7fd fdcd 	bl	23fd1e0 <abort>

023ff646 <atexit>:
 23ff646:	2300      	movs	r3, #0
 23ff648:	4601      	mov	r1, r0
 23ff64a:	461a      	mov	r2, r3
 23ff64c:	4618      	mov	r0, r3
 23ff64e:	f000 b93b 	b.w	23ff8c8 <__register_exitproc>
	...

023ff654 <isprint>:
 23ff654:	4b02      	ldr	r3, [pc, #8]	; (23ff660 <isprint+0xc>)
 23ff656:	4418      	add	r0, r3
 23ff658:	7840      	ldrb	r0, [r0, #1]
 23ff65a:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff65e:	4770      	bx	lr
 23ff660:	023ffecc 	.word	0x023ffecc

023ff664 <memcpy>:
 23ff664:	440a      	add	r2, r1
 23ff666:	1e43      	subs	r3, r0, #1
 23ff668:	4291      	cmp	r1, r2
 23ff66a:	d100      	bne.n	23ff66e <memcpy+0xa>
 23ff66c:	4770      	bx	lr
 23ff66e:	b510      	push	{r4, lr}
 23ff670:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff674:	4291      	cmp	r1, r2
 23ff676:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff67a:	d1f9      	bne.n	23ff670 <memcpy+0xc>
 23ff67c:	bd10      	pop	{r4, pc}

023ff67e <memmove>:
 23ff67e:	4288      	cmp	r0, r1
 23ff680:	b510      	push	{r4, lr}
 23ff682:	eb01 0402 	add.w	r4, r1, r2
 23ff686:	d902      	bls.n	23ff68e <memmove+0x10>
 23ff688:	4284      	cmp	r4, r0
 23ff68a:	4623      	mov	r3, r4
 23ff68c:	d807      	bhi.n	23ff69e <memmove+0x20>
 23ff68e:	1e43      	subs	r3, r0, #1
 23ff690:	42a1      	cmp	r1, r4
 23ff692:	d008      	beq.n	23ff6a6 <memmove+0x28>
 23ff694:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff698:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff69c:	e7f8      	b.n	23ff690 <memmove+0x12>
 23ff69e:	4402      	add	r2, r0
 23ff6a0:	4601      	mov	r1, r0
 23ff6a2:	428a      	cmp	r2, r1
 23ff6a4:	d100      	bne.n	23ff6a8 <memmove+0x2a>
 23ff6a6:	bd10      	pop	{r4, pc}
 23ff6a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff6ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff6b0:	e7f7      	b.n	23ff6a2 <memmove+0x24>

023ff6b2 <memset>:
 23ff6b2:	4402      	add	r2, r0
 23ff6b4:	4603      	mov	r3, r0
 23ff6b6:	4293      	cmp	r3, r2
 23ff6b8:	d100      	bne.n	23ff6bc <memset+0xa>
 23ff6ba:	4770      	bx	lr
 23ff6bc:	f803 1b01 	strb.w	r1, [r3], #1
 23ff6c0:	e7f9      	b.n	23ff6b6 <memset+0x4>
	...

023ff6c4 <srand>:
 23ff6c4:	b538      	push	{r3, r4, r5, lr}
 23ff6c6:	4b10      	ldr	r3, [pc, #64]	; (23ff708 <srand+0x44>)
 23ff6c8:	4604      	mov	r4, r0
 23ff6ca:	681d      	ldr	r5, [r3, #0]
 23ff6cc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff6ce:	b9b3      	cbnz	r3, 23ff6fe <srand+0x3a>
 23ff6d0:	2018      	movs	r0, #24
 23ff6d2:	f7fd fd4d 	bl	23fd170 <malloc>
 23ff6d6:	4602      	mov	r2, r0
 23ff6d8:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff6da:	b920      	cbnz	r0, 23ff6e6 <srand+0x22>
 23ff6dc:	4b0b      	ldr	r3, [pc, #44]	; (23ff70c <srand+0x48>)
 23ff6de:	2142      	movs	r1, #66	; 0x42
 23ff6e0:	480b      	ldr	r0, [pc, #44]	; (23ff710 <srand+0x4c>)
 23ff6e2:	f7fd fd99 	bl	23fd218 <__assert_func>
 23ff6e6:	490b      	ldr	r1, [pc, #44]	; (23ff714 <srand+0x50>)
 23ff6e8:	4b0b      	ldr	r3, [pc, #44]	; (23ff718 <srand+0x54>)
 23ff6ea:	e9c0 1300 	strd	r1, r3, [r0]
 23ff6ee:	4b0b      	ldr	r3, [pc, #44]	; (23ff71c <srand+0x58>)
 23ff6f0:	2100      	movs	r1, #0
 23ff6f2:	6083      	str	r3, [r0, #8]
 23ff6f4:	230b      	movs	r3, #11
 23ff6f6:	8183      	strh	r3, [r0, #12]
 23ff6f8:	2001      	movs	r0, #1
 23ff6fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff6fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff700:	2200      	movs	r2, #0
 23ff702:	611c      	str	r4, [r3, #16]
 23ff704:	615a      	str	r2, [r3, #20]
 23ff706:	bd38      	pop	{r3, r4, r5, pc}
 23ff708:	1007a458 	.word	0x1007a458
 23ff70c:	023ffe38 	.word	0x023ffe38
 23ff710:	023ffe4f 	.word	0x023ffe4f
 23ff714:	abcd330e 	.word	0xabcd330e
 23ff718:	e66d1234 	.word	0xe66d1234
 23ff71c:	0005deec 	.word	0x0005deec

023ff720 <strchr>:
 23ff720:	b2c9      	uxtb	r1, r1
 23ff722:	4603      	mov	r3, r0
 23ff724:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff728:	b11a      	cbz	r2, 23ff732 <strchr+0x12>
 23ff72a:	428a      	cmp	r2, r1
 23ff72c:	d1f9      	bne.n	23ff722 <strchr+0x2>
 23ff72e:	4618      	mov	r0, r3
 23ff730:	4770      	bx	lr
 23ff732:	2900      	cmp	r1, #0
 23ff734:	bf18      	it	ne
 23ff736:	2300      	movne	r3, #0
 23ff738:	e7f9      	b.n	23ff72e <strchr+0xe>

023ff73a <strchrnul>:
 23ff73a:	b510      	push	{r4, lr}
 23ff73c:	4604      	mov	r4, r0
 23ff73e:	f7ff ffef 	bl	23ff720 <strchr>
 23ff742:	b918      	cbnz	r0, 23ff74c <strchrnul+0x12>
 23ff744:	4620      	mov	r0, r4
 23ff746:	f7fb ff31 	bl	23fb5ac <strlen>
 23ff74a:	4420      	add	r0, r4
 23ff74c:	bd10      	pop	{r4, pc}

023ff74e <strcpy>:
 23ff74e:	4603      	mov	r3, r0
 23ff750:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff754:	f803 2b01 	strb.w	r2, [r3], #1
 23ff758:	2a00      	cmp	r2, #0
 23ff75a:	d1f9      	bne.n	23ff750 <strcpy+0x2>
 23ff75c:	4770      	bx	lr

023ff75e <strncmp>:
 23ff75e:	b510      	push	{r4, lr}
 23ff760:	b17a      	cbz	r2, 23ff782 <strncmp+0x24>
 23ff762:	4603      	mov	r3, r0
 23ff764:	3901      	subs	r1, #1
 23ff766:	1884      	adds	r4, r0, r2
 23ff768:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff76c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff770:	4290      	cmp	r0, r2
 23ff772:	d101      	bne.n	23ff778 <strncmp+0x1a>
 23ff774:	42a3      	cmp	r3, r4
 23ff776:	d101      	bne.n	23ff77c <strncmp+0x1e>
 23ff778:	1a80      	subs	r0, r0, r2
 23ff77a:	bd10      	pop	{r4, pc}
 23ff77c:	2800      	cmp	r0, #0
 23ff77e:	d1f3      	bne.n	23ff768 <strncmp+0xa>
 23ff780:	e7fa      	b.n	23ff778 <strncmp+0x1a>
 23ff782:	4610      	mov	r0, r2
 23ff784:	e7f9      	b.n	23ff77a <strncmp+0x1c>

023ff786 <strrchr>:
 23ff786:	b538      	push	{r3, r4, r5, lr}
 23ff788:	4603      	mov	r3, r0
 23ff78a:	460c      	mov	r4, r1
 23ff78c:	b969      	cbnz	r1, 23ff7aa <strrchr+0x24>
 23ff78e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff792:	f7ff bfc5 	b.w	23ff720 <strchr>
 23ff796:	1c43      	adds	r3, r0, #1
 23ff798:	4605      	mov	r5, r0
 23ff79a:	4621      	mov	r1, r4
 23ff79c:	4618      	mov	r0, r3
 23ff79e:	f7ff ffbf 	bl	23ff720 <strchr>
 23ff7a2:	2800      	cmp	r0, #0
 23ff7a4:	d1f7      	bne.n	23ff796 <strrchr+0x10>
 23ff7a6:	4628      	mov	r0, r5
 23ff7a8:	bd38      	pop	{r3, r4, r5, pc}
 23ff7aa:	2500      	movs	r5, #0
 23ff7ac:	e7f5      	b.n	23ff79a <strrchr+0x14>
	...

023ff7b0 <_strtol_l.constprop.0>:
 23ff7b0:	2b01      	cmp	r3, #1
 23ff7b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff7b6:	d001      	beq.n	23ff7bc <_strtol_l.constprop.0+0xc>
 23ff7b8:	2b24      	cmp	r3, #36	; 0x24
 23ff7ba:	d906      	bls.n	23ff7ca <_strtol_l.constprop.0+0x1a>
 23ff7bc:	f7fd fd1e 	bl	23fd1fc <__errno>
 23ff7c0:	2316      	movs	r3, #22
 23ff7c2:	6003      	str	r3, [r0, #0]
 23ff7c4:	2000      	movs	r0, #0
 23ff7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff7ca:	460d      	mov	r5, r1
 23ff7cc:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff8b0 <_strtol_l.constprop.0+0x100>
 23ff7d0:	462e      	mov	r6, r5
 23ff7d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff7d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff7da:	f017 0708 	ands.w	r7, r7, #8
 23ff7de:	d1f7      	bne.n	23ff7d0 <_strtol_l.constprop.0+0x20>
 23ff7e0:	2c2d      	cmp	r4, #45	; 0x2d
 23ff7e2:	d132      	bne.n	23ff84a <_strtol_l.constprop.0+0x9a>
 23ff7e4:	782c      	ldrb	r4, [r5, #0]
 23ff7e6:	2701      	movs	r7, #1
 23ff7e8:	1cb5      	adds	r5, r6, #2
 23ff7ea:	2b00      	cmp	r3, #0
 23ff7ec:	d05b      	beq.n	23ff8a6 <_strtol_l.constprop.0+0xf6>
 23ff7ee:	2b10      	cmp	r3, #16
 23ff7f0:	d109      	bne.n	23ff806 <_strtol_l.constprop.0+0x56>
 23ff7f2:	2c30      	cmp	r4, #48	; 0x30
 23ff7f4:	d107      	bne.n	23ff806 <_strtol_l.constprop.0+0x56>
 23ff7f6:	782c      	ldrb	r4, [r5, #0]
 23ff7f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff7fc:	2c58      	cmp	r4, #88	; 0x58
 23ff7fe:	d14d      	bne.n	23ff89c <_strtol_l.constprop.0+0xec>
 23ff800:	786c      	ldrb	r4, [r5, #1]
 23ff802:	2310      	movs	r3, #16
 23ff804:	3502      	adds	r5, #2
 23ff806:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff80a:	f04f 0c00 	mov.w	ip, #0
 23ff80e:	f108 38ff 	add.w	r8, r8, #4294967295
 23ff812:	4666      	mov	r6, ip
 23ff814:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff818:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff81c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff820:	f1be 0f09 	cmp.w	lr, #9
 23ff824:	d816      	bhi.n	23ff854 <_strtol_l.constprop.0+0xa4>
 23ff826:	4674      	mov	r4, lr
 23ff828:	42a3      	cmp	r3, r4
 23ff82a:	dd24      	ble.n	23ff876 <_strtol_l.constprop.0+0xc6>
 23ff82c:	f1bc 0f00 	cmp.w	ip, #0
 23ff830:	db1e      	blt.n	23ff870 <_strtol_l.constprop.0+0xc0>
 23ff832:	45b1      	cmp	r9, r6
 23ff834:	d31c      	bcc.n	23ff870 <_strtol_l.constprop.0+0xc0>
 23ff836:	d101      	bne.n	23ff83c <_strtol_l.constprop.0+0x8c>
 23ff838:	45a2      	cmp	sl, r4
 23ff83a:	db19      	blt.n	23ff870 <_strtol_l.constprop.0+0xc0>
 23ff83c:	fb06 4603 	mla	r6, r6, r3, r4
 23ff840:	f04f 0c01 	mov.w	ip, #1
 23ff844:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff848:	e7e8      	b.n	23ff81c <_strtol_l.constprop.0+0x6c>
 23ff84a:	2c2b      	cmp	r4, #43	; 0x2b
 23ff84c:	bf04      	itt	eq
 23ff84e:	782c      	ldrbeq	r4, [r5, #0]
 23ff850:	1cb5      	addeq	r5, r6, #2
 23ff852:	e7ca      	b.n	23ff7ea <_strtol_l.constprop.0+0x3a>
 23ff854:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff858:	f1be 0f19 	cmp.w	lr, #25
 23ff85c:	d801      	bhi.n	23ff862 <_strtol_l.constprop.0+0xb2>
 23ff85e:	3c37      	subs	r4, #55	; 0x37
 23ff860:	e7e2      	b.n	23ff828 <_strtol_l.constprop.0+0x78>
 23ff862:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff866:	f1be 0f19 	cmp.w	lr, #25
 23ff86a:	d804      	bhi.n	23ff876 <_strtol_l.constprop.0+0xc6>
 23ff86c:	3c57      	subs	r4, #87	; 0x57
 23ff86e:	e7db      	b.n	23ff828 <_strtol_l.constprop.0+0x78>
 23ff870:	f04f 3cff 	mov.w	ip, #4294967295
 23ff874:	e7e6      	b.n	23ff844 <_strtol_l.constprop.0+0x94>
 23ff876:	f1bc 0f00 	cmp.w	ip, #0
 23ff87a:	da05      	bge.n	23ff888 <_strtol_l.constprop.0+0xd8>
 23ff87c:	2322      	movs	r3, #34	; 0x22
 23ff87e:	4646      	mov	r6, r8
 23ff880:	6003      	str	r3, [r0, #0]
 23ff882:	b942      	cbnz	r2, 23ff896 <_strtol_l.constprop.0+0xe6>
 23ff884:	4630      	mov	r0, r6
 23ff886:	e79e      	b.n	23ff7c6 <_strtol_l.constprop.0+0x16>
 23ff888:	b107      	cbz	r7, 23ff88c <_strtol_l.constprop.0+0xdc>
 23ff88a:	4276      	negs	r6, r6
 23ff88c:	2a00      	cmp	r2, #0
 23ff88e:	d0f9      	beq.n	23ff884 <_strtol_l.constprop.0+0xd4>
 23ff890:	f1bc 0f00 	cmp.w	ip, #0
 23ff894:	d000      	beq.n	23ff898 <_strtol_l.constprop.0+0xe8>
 23ff896:	1e69      	subs	r1, r5, #1
 23ff898:	6011      	str	r1, [r2, #0]
 23ff89a:	e7f3      	b.n	23ff884 <_strtol_l.constprop.0+0xd4>
 23ff89c:	2430      	movs	r4, #48	; 0x30
 23ff89e:	2b00      	cmp	r3, #0
 23ff8a0:	d1b1      	bne.n	23ff806 <_strtol_l.constprop.0+0x56>
 23ff8a2:	2308      	movs	r3, #8
 23ff8a4:	e7af      	b.n	23ff806 <_strtol_l.constprop.0+0x56>
 23ff8a6:	2c30      	cmp	r4, #48	; 0x30
 23ff8a8:	d0a5      	beq.n	23ff7f6 <_strtol_l.constprop.0+0x46>
 23ff8aa:	230a      	movs	r3, #10
 23ff8ac:	e7ab      	b.n	23ff806 <_strtol_l.constprop.0+0x56>
 23ff8ae:	bf00      	nop
 23ff8b0:	023ffecd 	.word	0x023ffecd

023ff8b4 <strtol>:
 23ff8b4:	4613      	mov	r3, r2
 23ff8b6:	460a      	mov	r2, r1
 23ff8b8:	4601      	mov	r1, r0
 23ff8ba:	4802      	ldr	r0, [pc, #8]	; (23ff8c4 <strtol+0x10>)
 23ff8bc:	6800      	ldr	r0, [r0, #0]
 23ff8be:	f7ff bf77 	b.w	23ff7b0 <_strtol_l.constprop.0>
 23ff8c2:	bf00      	nop
 23ff8c4:	1007a458 	.word	0x1007a458

023ff8c8 <__register_exitproc>:
 23ff8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff8cc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff98c <__register_exitproc+0xc4>
 23ff8d0:	4606      	mov	r6, r0
 23ff8d2:	461f      	mov	r7, r3
 23ff8d4:	460d      	mov	r5, r1
 23ff8d6:	f8d8 0000 	ldr.w	r0, [r8]
 23ff8da:	4691      	mov	r9, r2
 23ff8dc:	f000 f858 	bl	23ff990 <__retarget_lock_acquire_recursive>
 23ff8e0:	4b26      	ldr	r3, [pc, #152]	; (23ff97c <__register_exitproc+0xb4>)
 23ff8e2:	681c      	ldr	r4, [r3, #0]
 23ff8e4:	b934      	cbnz	r4, 23ff8f4 <__register_exitproc+0x2c>
 23ff8e6:	4c26      	ldr	r4, [pc, #152]	; (23ff980 <__register_exitproc+0xb8>)
 23ff8e8:	601c      	str	r4, [r3, #0]
 23ff8ea:	4b26      	ldr	r3, [pc, #152]	; (23ff984 <__register_exitproc+0xbc>)
 23ff8ec:	b113      	cbz	r3, 23ff8f4 <__register_exitproc+0x2c>
 23ff8ee:	681b      	ldr	r3, [r3, #0]
 23ff8f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff8f4:	6863      	ldr	r3, [r4, #4]
 23ff8f6:	2b1f      	cmp	r3, #31
 23ff8f8:	dd07      	ble.n	23ff90a <__register_exitproc+0x42>
 23ff8fa:	f8d8 0000 	ldr.w	r0, [r8]
 23ff8fe:	f000 f849 	bl	23ff994 <__retarget_lock_release_recursive>
 23ff902:	f04f 30ff 	mov.w	r0, #4294967295
 23ff906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff90a:	b35e      	cbz	r6, 23ff964 <__register_exitproc+0x9c>
 23ff90c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff910:	b988      	cbnz	r0, 23ff936 <__register_exitproc+0x6e>
 23ff912:	4b1d      	ldr	r3, [pc, #116]	; (23ff988 <__register_exitproc+0xc0>)
 23ff914:	b923      	cbnz	r3, 23ff920 <__register_exitproc+0x58>
 23ff916:	f8d8 0000 	ldr.w	r0, [r8]
 23ff91a:	f000 f83a 	bl	23ff992 <__retarget_lock_release>
 23ff91e:	e7f0      	b.n	23ff902 <__register_exitproc+0x3a>
 23ff920:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff924:	f7fd fc24 	bl	23fd170 <malloc>
 23ff928:	2800      	cmp	r0, #0
 23ff92a:	d0f4      	beq.n	23ff916 <__register_exitproc+0x4e>
 23ff92c:	2300      	movs	r3, #0
 23ff92e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff932:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff936:	6863      	ldr	r3, [r4, #4]
 23ff938:	2201      	movs	r2, #1
 23ff93a:	2e02      	cmp	r6, #2
 23ff93c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff940:	fa02 f203 	lsl.w	r2, r2, r3
 23ff944:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff948:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff94c:	ea43 0302 	orr.w	r3, r3, r2
 23ff950:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff954:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff958:	bf02      	ittt	eq
 23ff95a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff95e:	4313      	orreq	r3, r2
 23ff960:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff964:	6863      	ldr	r3, [r4, #4]
 23ff966:	f8d8 0000 	ldr.w	r0, [r8]
 23ff96a:	1c5a      	adds	r2, r3, #1
 23ff96c:	3302      	adds	r3, #2
 23ff96e:	6062      	str	r2, [r4, #4]
 23ff970:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff974:	f000 f80e 	bl	23ff994 <__retarget_lock_release_recursive>
 23ff978:	2000      	movs	r0, #0
 23ff97a:	e7c4      	b.n	23ff906 <__register_exitproc+0x3e>
 23ff97c:	1007afe0 	.word	0x1007afe0
 23ff980:	1007af54 	.word	0x1007af54
 23ff984:	00000000 	.word	0x00000000
 23ff988:	023fd171 	.word	0x023fd171
 23ff98c:	1007a4bc 	.word	0x1007a4bc

023ff990 <__retarget_lock_acquire_recursive>:
 23ff990:	4770      	bx	lr

023ff992 <__retarget_lock_release>:
 23ff992:	4770      	bx	lr

023ff994 <__retarget_lock_release_recursive>:
 23ff994:	4770      	bx	lr
	...

023ff998 <__io_assert_failed_veneer>:
 23ff998:	b401      	push	{r0}
 23ff99a:	4802      	ldr	r0, [pc, #8]	; (23ff9a4 <__io_assert_failed_veneer+0xc>)
 23ff99c:	4684      	mov	ip, r0
 23ff99e:	bc01      	pop	{r0}
 23ff9a0:	4760      	bx	ip
 23ff9a2:	bf00      	nop
 23ff9a4:	1010a871 	.word	0x1010a871

023ff9a8 <__DelayMs_veneer>:
 23ff9a8:	b401      	push	{r0}
 23ff9aa:	4802      	ldr	r0, [pc, #8]	; (23ff9b4 <__DelayMs_veneer+0xc>)
 23ff9ac:	4684      	mov	ip, r0
 23ff9ae:	bc01      	pop	{r0}
 23ff9b0:	4760      	bx	ip
 23ff9b2:	bf00      	nop
 23ff9b4:	1010a995 	.word	0x1010a995

023ff9b8 <__DelayUs_veneer>:
 23ff9b8:	b401      	push	{r0}
 23ff9ba:	4802      	ldr	r0, [pc, #8]	; (23ff9c4 <__DelayUs_veneer+0xc>)
 23ff9bc:	4684      	mov	ip, r0
 23ff9be:	bc01      	pop	{r0}
 23ff9c0:	4760      	bx	ip
 23ff9c2:	bf00      	nop
 23ff9c4:	1010a949 	.word	0x1010a949

023ff9c8 <dynalib_user>:
 23ff9c8:	023fb5bd 023fb5e5 023fb5e9 00000000     ..?...?...?.....
 23ff9d8:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23ff9e8:	6c617574 65764100 65676172 656e4520     tual.Average Ene
 23ff9f8:	20796772 6576654c 25203a6c 44500064     rgy Level: %d.PD
 23ffa08:	6564204d 65646f63 6e692072 65207469     M decoder init e
 23ffa18:	253d7272 44500064 6564204d 65646f63     rr=%d.PDM decode
 23ffa28:	74732072 20747261 3d727265 00006425     r start err=%d..

023ffa38 <_ZTVN5spark10LogHandlerE>:
	...
 23ffa48:	023fb609 023fbd71                       ..?.q.?.

023ffa50 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ffa58:	023fbe09 023fbe3d 023fe235 023fe3dd     ..?.=.?.5.?...?.

023ffa68 <_ZTV22Microphone_PDM_RTL872x>:
	...
 23ffa70:	023fc3ff 023fc409 023fc3f5 023fc417     ..?...?...?...?.
 23ffa80:	023fc3f9 023fc43f 023fc401 023fc44f     ..?.?.?...?.O.?.
 23ffa90:	023fc461 023fc48f                       a.?...?.

023ffa98 <_ZTV18Microphone_PDM_MCU>:
	...
 23ffaa0:	023fc535 023fc549 023fc3f5 023fc417     5.?.I.?...?...?.
 23ffab0:	023fc3f9 023fc43f 023fc401 023fc44f     ..?.?.?...?.O.?.
 23ffac0:	023fc461 023fc48f                       a.?...?.

023ffac8 <_ZTV14Microphone_PDM>:
	...
 23ffad0:	023fc55d 023fc571 023fc3f5 023fc51f     ].?.q.?...?...?.
 23ffae0:	023fc503 023fc523 023fc527 023fc52b     ..?.#.?.'.?.+.?.
 23ffaf0:	023fc52f 023fc62d                       /.?.-.?.

023ffaf8 <_ZTV29Microphone_PDM_BufferSampling>:
	...
 23ffb00:	023fc5f9 023fc619 023fc6dd 023fc699     ..?...?...?...?.
 23ffb10:	023fc509 023fc501 66667562 74207265     ..?...?.buffer t
 23ffb20:	73206f6f 6c6c616d 6177202c 64252073     oo small, was %d
 23ffb30:	65656e20 34342064 46495200 41570046      need 44.RIFF.WA
 23ffb40:	66004556 0020746d 61746164 00000000     VE.fmt .data....

023ffb50 <_ZTV16MicWavHeaderBase>:
	...
 23ffb58:	023fc819 023fc81b                       ..?...?.

023ffb60 <_ZTV33Microphone_PDM_BufferSampling_wav>:
	...
 23ffb68:	023fc829 023fc83d 023fc6dd 023fc699     ).?.=.?...?...?.
 23ffb78:	023fc509 023fc93d                       ..?.=.?.

023ffb80 <_ZTVN5spark13EthernetClassE>:
	...
 23ffb88:	023fd2af 023fd2a5 023fd29b 023fd291     ..?...?...?...?.
 23ffb98:	023fd285 023fd279 023feb25 023feb2d     ..?.y.?.%.?.-.?.
 23ffba8:	023fd26d 023fd265 023fd25b 023fd251     m.?.e.?.[.?.Q.?.
 23ffbb8:	023fec55 023feb5d 023feb65 64756162     U.?.].?.e.?.baud
 23ffbc8:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
 23ffbd8:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
 23ffbe8:	72656c64 70706100 31302500 00207530     dler.app.%010u .
 23ffbf8:	2c00205d 29280020 2000203a 6f63005b     ] ., .(): . [.co
 23ffc08:	3d206564 69250020 74656400 736c6961     de = .%i.details
 23ffc18:	00203d20 6d000a0d 6c006600 6e66006e      = ....m.f.ln.fn
 23ffc28:	63007400 0065646f 61746564 00006c69     .t.code.detail..

023ffc38 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffc40:	023fd62f 023fd655 023fd613 023fecab     /.?.U.?...?...?.

023ffc50 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffc58:	023fdae1 023fdaf9 023fe235 023fe3dd     ..?...?.5.?...?.

023ffc68 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffc70:	023fdb0d 023fdb21 023fe415 023fd61b     ..?.!.?...?...?.

023ffc80 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffc88:	023fd62d 023fd663 023fe199 023fd61d     -.?.c.?...?...?.

023ffc98 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffca0:	023fd62b 023fd671 023fda49 023fd693     +.?.q.?.I.?...?.
 23ffcb0:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
 23ffcc0:	007a2553 74637361 00656d69              S%z.asctime.

023ffccc <_ZTV9IPAddress>:
	...
 23ffcd4:	023fe729 023fe719 023fe71b              ).?...?...?.

023ffce0 <_ZTV9USBSerial>:
	...
 23ffce8:	023fe80f 023fe877 023fe84d 023fd581     ..?.w.?.M.?...?.
 23ffcf8:	023fe83f 023fe811 023fe821 023fe871     ?.?...?.!.?.q.?.
 23ffd08:	023fe831 023fe809                       1.?...?.

023ffd10 <_ZTV11USARTSerial>:
	...
 23ffd18:	023fe915 023fe981 023fe959 023fd581     ..?...?.Y.?...?.
 23ffd28:	023fe929 023fe945 023fe937 023fe953     ).?.E.?.7.?.S.?.
 23ffd38:	023fe917 023fe91b                       ..?...?.

023ffd40 <_ZTV7TwoWire>:
	...
 23ffd48:	023fe9d3 023fea1d 023fe9f5 023fe9d5     ..?...?...?...?.
 23ffd58:	023fe9fd 023fea05 023fea0d 023fea15     ..?...?...?...?.

023ffd68 <_ZTVN5spark9WiFiClassE>:
	...
 23ffd70:	023feac7 023feabd 023feab3 023fea69     ..?...?...?.i.?.
 23ffd80:	023feaa7 023fea9b 023feb25 023feb2d     ..?...?.%.?.-.?.
 23ffd90:	023fea8f 023fea87 023fea7d 023fea73     ..?...?.}.?.s.?.
 23ffda0:	023fec55 023feb5d 023feb65              U.?.].?.e.?.

023ffdac <CSWTCH.109>:
 23ffdac:	1007ae4c 1007aed4 1007aedc              L...........

023ffdb8 <_ZTVN5spark12NetworkClassE>:
	...
 23ffdc0:	023feae5 023feaef 023feaf9 023feb03     ..?...?...?...?.
 23ffdd0:	023feb0d 023feb19 023feb25 023feb2d     ..?...?.%.?.-.?.
 23ffde0:	023feb35 023feb41 023feb49 023feb53     5.?.A.?.I.?.S.?.
 23ffdf0:	023fec55 023feb5d 023feb65 75007525     U.?.].?.e.?.%u.u
 23ffe00:	78343025 00000000                       %04x....

023ffe08 <AUDIO_DEV_TABLE>:
 23ffe08:	40010800 0000000a 0000000b              ...@........

023ffe14 <__FUNCTION__.0>:
 23ffe14:	49445541 50535f4f 4758525f 5f414d44     AUDIO_SP_RXGDMA_
 23ffe24:	74696e49                                 Init.

023ffe29 <__FUNCTION__.4>:
 23ffe29:	49445541 50535f4f 696e495f               AUDIO_SP_Init.

023ffe37 <_ZSt7nothrow>:
 23ffe37:	45455200 6d20544e 6f6c6c61 75732063     .REENT malloc su
 23ffe47:	65656363 00646564 746e6d2f 726f772f     cceeded./mnt/wor
 23ffe57:	6170736b 772f6563 736b726f 65636170     kspace/workspace
 23ffe67:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
 23ffe77:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
 23ffe87:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
 23ffe97:	34323131 3036315f 30383136 2f313436     1124_1606180641/
 23ffea7:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
 23ffeb7:	696c2f62 732f6362 696c6474 61722f62     b/libc/stdlib/ra
 23ffec7:	632e646e                                 nd.c.

023ffecc <_ctype_>:
 23ffecc:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffedc:	20202020 20202020 20202020 20202020                     
 23ffeec:	10108820 10101010 10101010 10101010      ...............
 23ffefc:	04040410 04040404 10040404 10101010     ................
 23fff0c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff1c:	01010101 01010101 01010101 10101010     ................
 23fff2c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff3c:	02020202 02020202 02020202 10101010     ................
 23fff4c:	00000020 00000000 00000000 00000000      ...............
	...

023fffcd <link_const_data_end>:
 23fffcd:	00          	.byte	0x00
	...

023fffd0 <link_constructors_location>:
 23fffd0:	023fc33d 	.word	0x023fc33d
 23fffd4:	023fd2b9 	.word	0x023fd2b9
 23fffd8:	023fd3d5 	.word	0x023fd3d5
 23fffdc:	023fd571 	.word	0x023fd571
 23fffe0:	023fe225 	.word	0x023fe225
 23fffe4:	023fe589 	.word	0x023fe589
 23fffe8:	023fe5bd 	.word	0x023fe5bd
 23fffec:	023fead1 	.word	0x023fead1
 23ffff0:	023fec69 	.word	0x023fec69
