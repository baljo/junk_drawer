
c:/Users/thv/Dropbox/Github/Particle/junk_drawer/target/5.6.0/p2/junk_drawer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fb830  085fa0a8  0000b830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   000047b8  023fb838  085fa0b0  0000b838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007a458  085fe868  0001a458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bdsram.data  00000800  1007a4e0  085fe8e0  0001a4e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000318  1007ace0  1007ace0  0002ace0  2**5
                  ALLOC
  9 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ff0e0  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 00000ed4  085ff0e4  085ff0e4  0001f0e4  2**0
                  ALLOC
 12 .module_info_product 00000006  085fffb8  085fffb8  0001f0e4  2**0
                  ALLOC
 13 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   0014c80f  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0001666e  00000000  00000000  0016c80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00044230  00000000  00000000  00182e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003310  00000000  00000000  001c70ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000c048  00000000  00000000  001ca3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002c076  00000000  00000000  001d6405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00048aee  00000000  00000000  0020247b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00103a3b  00000000  00000000  0024af69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00009200  00000000  00000000  0034e9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	4813      	ldr	r0, [pc, #76]	; (85fa068 <module_user_pre_init+0x50>)
 85fa01a:	4914      	ldr	r1, [pc, #80]	; (85fa06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a13      	ldr	r2, [pc, #76]	; (85fa070 <module_user_pre_init+0x58>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b12      	ldr	r3, [pc, #72]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	4812      	ldr	r0, [pc, #72]	; (85fa078 <module_user_pre_init+0x60>)
 85fa030:	4a12      	ldr	r2, [pc, #72]	; (85fa07c <module_user_pre_init+0x64>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b12      	ldr	r3, [pc, #72]	; (85fa080 <module_user_pre_init+0x68>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fa03a:	4812      	ldr	r0, [pc, #72]	; (85fa084 <module_user_pre_init+0x6c>)
 85fa03c:	4912      	ldr	r1, [pc, #72]	; (85fa088 <module_user_pre_init+0x70>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a12      	ldr	r2, [pc, #72]	; (85fa08c <module_user_pre_init+0x74>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fa048:	4b0a      	ldr	r3, [pc, #40]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa04e:	4810      	ldr	r0, [pc, #64]	; (85fa090 <module_user_pre_init+0x78>)
 85fa050:	4910      	ldr	r1, [pc, #64]	; (85fa094 <module_user_pre_init+0x7c>)
 85fa052:	4288      	cmp	r0, r1
 85fa054:	d005      	beq.n	85fa062 <module_user_pre_init+0x4a>
 85fa056:	4a10      	ldr	r2, [pc, #64]	; (85fa098 <module_user_pre_init+0x80>)
 85fa058:	4282      	cmp	r2, r0
 85fa05a:	d002      	beq.n	85fa062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa05c:	4b05      	ldr	r3, [pc, #20]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa05e:	1a12      	subs	r2, r2, r0
 85fa060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa062:	4801      	ldr	r0, [pc, #4]	; (85fa068 <module_user_pre_init+0x50>)
 85fa064:	bd08      	pop	{r3, pc}
 85fa066:	bf00      	nop
 85fa068:	1007a458 	.word	0x1007a458
 85fa06c:	085fe868 	.word	0x085fe868
 85fa070:	1007a4d0 	.word	0x1007a4d0
 85fa074:	10110d2d 	.word	0x10110d2d
 85fa078:	1007ace0 	.word	0x1007ace0
 85fa07c:	1007aff8 	.word	0x1007aff8
 85fa080:	10110ea1 	.word	0x10110ea1
 85fa084:	023fb830 	.word	0x023fb830
 85fa088:	085fa0a8 	.word	0x085fa0a8
 85fa08c:	023fb838 	.word	0x023fb838
 85fa090:	023fb838 	.word	0x023fb838
 85fa094:	085fa0b0 	.word	0x085fa0b0
 85fa098:	023ffff0 	.word	0x023ffff0

085fa09c <dynalib_preinit>:
 85fa09c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023fb838 <strcmp>:
 23fb838:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fb83c:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fb840:	2a01      	cmp	r2, #1
 23fb842:	bf28      	it	cs
 23fb844:	429a      	cmpcs	r2, r3
 23fb846:	d0f7      	beq.n	23fb838 <strcmp>
 23fb848:	1ad0      	subs	r0, r2, r3
 23fb84a:	4770      	bx	lr

023fb84c <strlen>:
 23fb84c:	4603      	mov	r3, r0
 23fb84e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb852:	2a00      	cmp	r2, #0
 23fb854:	d1fb      	bne.n	23fb84e <strlen+0x2>
 23fb856:	1a18      	subs	r0, r3, r0
 23fb858:	3801      	subs	r0, #1
 23fb85a:	4770      	bx	lr

023fb85c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fb85c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fb85e:	f002 feff 	bl	23fe660 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb862:	2500      	movs	r5, #0
 23fb864:	4e05      	ldr	r6, [pc, #20]	; (23fb87c <module_user_init+0x20>)
 23fb866:	4c06      	ldr	r4, [pc, #24]	; (23fb880 <module_user_init+0x24>)
 23fb868:	1ba4      	subs	r4, r4, r6
 23fb86a:	08a4      	lsrs	r4, r4, #2
 23fb86c:	42ac      	cmp	r4, r5
 23fb86e:	d100      	bne.n	23fb872 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fb870:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fb872:	f856 3b04 	ldr.w	r3, [r6], #4
 23fb876:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb878:	3501      	adds	r5, #1
 23fb87a:	e7f7      	b.n	23fb86c <module_user_init+0x10>
 23fb87c:	023fffcc 	.word	0x023fffcc
 23fb880:	023ffff0 	.word	0x023ffff0

023fb884 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fb884:	f000 bcac 	b.w	23fc1e0 <setup>

023fb888 <module_user_loop>:
}

void module_user_loop() {
 23fb888:	b508      	push	{r3, lr}
    loop();
 23fb88a:	f000 fd1f 	bl	23fc2cc <loop>
    _post_loop();
}
 23fb88e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fb892:	f002 be9d 	b.w	23fe5d0 <_post_loop>

023fb896 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fb896:	f001 bc7f 	b.w	23fd198 <malloc>

023fb89a <_Znaj>:
 23fb89a:	f001 bc7d 	b.w	23fd198 <malloc>

023fb89e <_ZdaPv>:
 23fb89e:	f001 bc89 	b.w	23fd1b4 <free>

023fb8a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fb8a2:	f001 bc87 	b.w	23fd1b4 <free>
	...

023fb8a8 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb8a8:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fb8aa:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb8ac:	4a02      	ldr	r2, [pc, #8]	; (23fb8b8 <__cxa_pure_virtual+0x10>)
 23fb8ae:	4903      	ldr	r1, [pc, #12]	; (23fb8bc <__cxa_pure_virtual+0x14>)
 23fb8b0:	f001 fb22 	bl	23fcef8 <panic_>
  while (1);
 23fb8b4:	e7fe      	b.n	23fb8b4 <__cxa_pure_virtual+0xc>
 23fb8b6:	bf00      	nop
 23fb8b8:	023fcb25 	.word	0x023fcb25
 23fb8bc:	023ff990 	.word	0x023ff990

023fb8c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fb8c0:	7800      	ldrb	r0, [r0, #0]
 23fb8c2:	fab0 f080 	clz	r0, r0
 23fb8c6:	0940      	lsrs	r0, r0, #5
 23fb8c8:	4770      	bx	lr

023fb8ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fb8ca:	2301      	movs	r3, #1
 23fb8cc:	7003      	strb	r3, [r0, #0]
 23fb8ce:	4770      	bx	lr

023fb8d0 <sp_get_ready_rx_page>:

u8 *sp_get_ready_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
	
	if (prx_block->rx_gdma_own)
 23fb8d0:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23fb8d2:	4a05      	ldr	r2, [pc, #20]	; (23fb8e8 <sp_get_ready_rx_page+0x18>)
 23fb8d4:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
	if (prx_block->rx_gdma_own)
 23fb8d8:	434b      	muls	r3, r1
 23fb8da:	18d1      	adds	r1, r2, r3
 23fb8dc:	5cd3      	ldrb	r3, [r2, r3]
 23fb8de:	b90b      	cbnz	r3, 23fb8e4 <sp_get_ready_rx_page+0x14>
		return NULL;
	else{
		return (u8*)prx_block->rx_addr;
 23fb8e0:	6848      	ldr	r0, [r1, #4]
 23fb8e2:	4770      	bx	lr
		return NULL;
 23fb8e4:	2000      	movs	r0, #0
	}
}
 23fb8e6:	4770      	bx	lr
 23fb8e8:	1007ade0 	.word	0x1007ade0

023fb8ec <sp_read_rx_page>:

void sp_read_rx_page(u8 *dst, u32 length)
{
 23fb8ec:	b538      	push	{r3, r4, r5, lr}
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23fb8ee:	4d0c      	ldr	r5, [pc, #48]	; (23fb920 <sp_read_rx_page+0x34>)
{
 23fb8f0:	460a      	mov	r2, r1
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23fb8f2:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
	
	if (dst) {
 23fb8f6:	b128      	cbz	r0, 23fb904 <sp_read_rx_page+0x18>
		memcpy(dst, (void const*)prx_block->rx_addr, length);
 23fb8f8:	230c      	movs	r3, #12
 23fb8fa:	fb03 5304 	mla	r3, r3, r4, r5
 23fb8fe:	6859      	ldr	r1, [r3, #4]
 23fb900:	f003 fe8a 	bl	23ff618 <memcpy>
	}
	prx_block->rx_gdma_own = 1;
 23fb904:	230c      	movs	r3, #12
 23fb906:	2201      	movs	r2, #1
 23fb908:	4363      	muls	r3, r4
	sp_rx_info.rx_usr_cnt++;
 23fb90a:	4414      	add	r4, r2
 23fb90c:	b2e4      	uxtb	r4, r4
	if (sp_rx_info.rx_usr_cnt == SP_DMA_PAGE_NUM){
 23fb90e:	2c04      	cmp	r4, #4
	prx_block->rx_gdma_own = 1;
 23fb910:	54ea      	strb	r2, [r5, r3]
		sp_rx_info.rx_usr_cnt = 0;
 23fb912:	bf0a      	itet	eq
 23fb914:	2300      	moveq	r3, #0
	sp_rx_info.rx_usr_cnt++;
 23fb916:	f885 403d 	strbne.w	r4, [r5, #61]	; 0x3d
		sp_rx_info.rx_usr_cnt = 0;
 23fb91a:	f885 303d 	strbeq.w	r3, [r5, #61]	; 0x3d
	}
}
 23fb91e:	bd38      	pop	{r3, r4, r5, pc}
 23fb920:	1007ade0 	.word	0x1007ade0

023fb924 <sp_release_rx_page>:

void sp_release_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
	
	if (sp_rx_info.rx_full_flag){
 23fb924:	4a09      	ldr	r2, [pc, #36]	; (23fb94c <sp_release_rx_page+0x28>)
 23fb926:	f892 103e 	ldrb.w	r1, [r2, #62]	; 0x3e
 23fb92a:	b969      	cbnz	r1, 23fb948 <sp_release_rx_page+0x24>
	}
	else{
		prx_block->rx_gdma_own = 0;
 23fb92c:	200c      	movs	r0, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23fb92e:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
		prx_block->rx_gdma_own = 0;
 23fb932:	4358      	muls	r0, r3
		sp_rx_info.rx_gdma_cnt++;
 23fb934:	3301      	adds	r3, #1
 23fb936:	b2db      	uxtb	r3, r3
		if (sp_rx_info.rx_gdma_cnt == SP_DMA_PAGE_NUM){
 23fb938:	2b04      	cmp	r3, #4
		prx_block->rx_gdma_own = 0;
 23fb93a:	5411      	strb	r1, [r2, r0]
		if (sp_rx_info.rx_gdma_cnt == SP_DMA_PAGE_NUM){
 23fb93c:	d002      	beq.n	23fb944 <sp_release_rx_page+0x20>
		sp_rx_info.rx_gdma_cnt++;
 23fb93e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 23fb942:	4770      	bx	lr
			sp_rx_info.rx_gdma_cnt = 0;
 23fb944:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
		}
	}
}
 23fb948:	4770      	bx	lr
 23fb94a:	bf00      	nop
 23fb94c:	1007ade0 	.word	0x1007ade0

023fb950 <sp_get_free_rx_page>:

u8 *sp_get_free_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
	
	if (prx_block->rx_gdma_own){
 23fb950:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23fb952:	4b08      	ldr	r3, [pc, #32]	; (23fb974 <sp_get_free_rx_page+0x24>)
 23fb954:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	if (prx_block->rx_gdma_own){
 23fb958:	434a      	muls	r2, r1
 23fb95a:	1899      	adds	r1, r3, r2
 23fb95c:	5c9a      	ldrb	r2, [r3, r2]
 23fb95e:	b122      	cbz	r2, 23fb96a <sp_get_free_rx_page+0x1a>
		sp_rx_info.rx_full_flag = 0;
 23fb960:	2200      	movs	r2, #0
		return (u8*)prx_block->rx_addr;
 23fb962:	6848      	ldr	r0, [r1, #4]
		sp_rx_info.rx_full_flag = 0;
 23fb964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		return (u8*)prx_block->rx_addr;
 23fb968:	4770      	bx	lr
	}
	else{
		sp_rx_info.rx_full_flag = 1;
 23fb96a:	2201      	movs	r2, #1
		return (u8*)sp_rx_info.rx_full_block.rx_addr;	//for audio buffer full case
 23fb96c:	6b58      	ldr	r0, [r3, #52]	; 0x34
		sp_rx_info.rx_full_flag = 1;
 23fb96e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}
}
 23fb972:	4770      	bx	lr
 23fb974:	1007ade0 	.word	0x1007ade0

023fb978 <sp_get_free_rx_length>:

u32 sp_get_free_rx_length(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);

	if (sp_rx_info.rx_full_flag){
 23fb978:	4b06      	ldr	r3, [pc, #24]	; (23fb994 <sp_get_free_rx_length+0x1c>)
 23fb97a:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 23fb97e:	b10a      	cbz	r2, 23fb984 <sp_get_free_rx_length+0xc>
		return sp_rx_info.rx_full_block.rx_length;
 23fb980:	6b98      	ldr	r0, [r3, #56]	; 0x38
 23fb982:	4770      	bx	lr
	}
	else{
		return prx_block->rx_length;
 23fb984:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23fb986:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
		return prx_block->rx_length;
 23fb98a:	fb01 3302 	mla	r3, r1, r2, r3
 23fb98e:	6898      	ldr	r0, [r3, #8]
	}
}
 23fb990:	4770      	bx	lr
 23fb992:	bf00      	nop
 23fb994:	1007ade0 	.word	0x1007ade0

023fb998 <sp_rx_complete>:


void sp_rx_complete(void *Data)
{
 23fb998:	b537      	push	{r0, r1, r2, r4, r5, lr}
  * @brief  Check DCache Enabled or not.
  */
__STATIC_INLINE
u32 DCache_IsEnabled(void)
{
	return ((SCB->CCR & (u32)SCB_CCR_DC_Msk)?1:0);
 23fb99a:	4b21      	ldr	r3, [pc, #132]	; (23fba20 <sp_rx_complete+0x88>)
 23fb99c:	4604      	mov	r4, r0
 23fb99e:	695b      	ldr	r3, [r3, #20]
__STATIC_INLINE
void DCache_Invalidate(u32 Address, u32 Bytes)
{
	u32 addr = Address, len = Bytes;

	if (DCache_IsEnabled() == 0)
 23fb9a0:	03d8      	lsls	r0, r3, #15
 23fb9a2:	d51a      	bpl.n	23fb9da <sp_rx_complete+0x42>
	PGDMA_InitTypeDef GDMA_InitStruct;
	u32 rx_addr;
	u32 rx_length;
	
	GDMA_InitStruct = &(gs->SpRxGdmaInitStruct);
	DCache_Invalidate(GDMA_InitStruct->GDMA_DstAddr, GDMA_InitStruct->GDMA_BlockSize<<2);
 23fb9a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fb9a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		return;

	if ((Address == 0xFFFFFFFF) && (Bytes == 0xFFFFFFFF)) {
		SCB_InvalidateDCache();
	} else {
		if ((addr & 0x1F) != 0) {
 23fb9a8:	06d9      	lsls	r1, r3, #27
 23fb9aa:	ea4f 0282 	mov.w	r2, r2, lsl #2
 23fb9ae:	d008      	beq.n	23fb9c2 <sp_rx_complete+0x2a>
			addr = (Address >> 5) << 5;   //32-byte aligned
 23fb9b0:	f023 011f 	bic.w	r1, r3, #31
			len = ((((Address + Bytes -1) >> 5) + 1) << 5) - addr; //next 32-byte aligned
 23fb9b4:	3b01      	subs	r3, #1
 23fb9b6:	4413      	add	r3, r2
 23fb9b8:	f023 031f 	bic.w	r3, r3, #31
 23fb9bc:	3320      	adds	r3, #32
 23fb9be:	1a5a      	subs	r2, r3, r1
			addr = (Address >> 5) << 5;   //32-byte aligned
 23fb9c0:	460b      	mov	r3, r1
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 23fb9c2:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCIMVAC = op_addr;
 23fb9c6:	4816      	ldr	r0, [pc, #88]	; (23fba20 <sp_rx_complete+0x88>)
 23fb9c8:	4413      	add	r3, r2
    while (op_size > 0) {
 23fb9ca:	2a00      	cmp	r2, #0
 23fb9cc:	eba3 0102 	sub.w	r1, r3, r2
 23fb9d0:	dc21      	bgt.n	23fba16 <sp_rx_complete+0x7e>
 23fb9d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 23fb9d6:	f3bf 8f6f 	isb	sy
	/* Clear Pending ISR */
	GDMA_ClearINT(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum);
 23fb9da:	7861      	ldrb	r1, [r4, #1]
 23fb9dc:	4b11      	ldr	r3, [pc, #68]	; (23fba24 <sp_rx_complete+0x8c>)
 23fb9de:	7820      	ldrb	r0, [r4, #0]
 23fb9e0:	4798      	blx	r3

	sp_release_rx_page();
 23fb9e2:	f7ff ff9f 	bl	23fb924 <sp_release_rx_page>
	rx_addr = (u32)sp_get_free_rx_page();
 23fb9e6:	f7ff ffb3 	bl	23fb950 <sp_get_free_rx_page>
 23fb9ea:	9001      	str	r0, [sp, #4]
	rx_length = sp_get_free_rx_length();
 23fb9ec:	f7ff ffc4 	bl	23fb978 <sp_get_free_rx_length>
 23fb9f0:	4605      	mov	r5, r0
	GDMA_SetDstAddr(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_addr);
 23fb9f2:	9a01      	ldr	r2, [sp, #4]
 23fb9f4:	7861      	ldrb	r1, [r4, #1]
 23fb9f6:	7820      	ldrb	r0, [r4, #0]
 23fb9f8:	4b0b      	ldr	r3, [pc, #44]	; (23fba28 <sp_rx_complete+0x90>)
 23fb9fa:	4798      	blx	r3
	GDMA_SetBlkSize(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_length>>2);	
 23fb9fc:	7861      	ldrb	r1, [r4, #1]
 23fb9fe:	7820      	ldrb	r0, [r4, #0]
 23fba00:	08aa      	lsrs	r2, r5, #2
 23fba02:	4b0a      	ldr	r3, [pc, #40]	; (23fba2c <sp_rx_complete+0x94>)
 23fba04:	4798      	blx	r3
	
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23fba06:	2201      	movs	r2, #1
 23fba08:	7861      	ldrb	r1, [r4, #1]
 23fba0a:	7820      	ldrb	r0, [r4, #0]
 23fba0c:	4b08      	ldr	r3, [pc, #32]	; (23fba30 <sp_rx_complete+0x98>)
	//AUDIO_SP_RXGDMA_Restart(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_addr, rx_length);
}
 23fba0e:	b003      	add	sp, #12
 23fba10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23fba14:	4718      	bx	r3
      SCB->DCIMVAC = op_addr;
 23fba16:	f8c0 125c 	str.w	r1, [r0, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 23fba1a:	3a20      	subs	r2, #32
 23fba1c:	e7d5      	b.n	23fb9ca <sp_rx_complete+0x32>
 23fba1e:	bf00      	nop
 23fba20:	e000ed00 	.word	0xe000ed00
 23fba24:	1010bda5 	.word	0x1010bda5
 23fba28:	1010c2b9 	.word	0x1010c2b9
 23fba2c:	1010c309 	.word	0x1010c309
 23fba30:	1010bf91 	.word	0x1010bf91

023fba34 <dmic_setup>:
//

void dmic_setup(int sampleRate, bool stereoMode) {
    SP_OBJ sp_obj;

	switch(sampleRate) {
 23fba34:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
void dmic_setup(int sampleRate, bool stereoMode) {
 23fba38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch(sampleRate) {
 23fba3a:	d01c      	beq.n	23fba76 <dmic_setup+0x42>
		case 8000:
			sp_obj.sample_rate = SR_8K;
			break;

		case 32000:
			sp_obj.sample_rate = SR_32K;
 23fba3c:	f5b0 4ffa 	cmp.w	r0, #32000	; 0x7d00
 23fba40:	bf14      	ite	ne
 23fba42:	2505      	movne	r5, #5
 23fba44:	2503      	moveq	r5, #3
	PLL_I2S_Set(ENABLE);		//enable 98.304MHz PLL. needed if fs=8k/16k/32k/48k/96k
 23fba46:	4b37      	ldr	r3, [pc, #220]	; (23fbb24 <dmic_setup+0xf0>)
 23fba48:	2001      	movs	r0, #1
			sp_obj.sample_rate = SR_16K;
			break;
	}

	sp_obj.word_len = WL_16;
	sp_obj.mono_stereo = stereoMode ? CH_STEREO : CH_MONO;
 23fba4a:	fab1 f481 	clz	r4, r1
	PLL_I2S_Set(ENABLE);		//enable 98.304MHz PLL. needed if fs=8k/16k/32k/48k/96k
 23fba4e:	4798      	blx	r3
	RCC_PeriphClockCmd(APBPeriph_AUDIOC, APBPeriph_AUDIOC_CLOCK, ENABLE);
 23fba50:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 23fba54:	2201      	movs	r2, #1
 23fba56:	4608      	mov	r0, r1
 23fba58:	4f33      	ldr	r7, [pc, #204]	; (23fbb28 <dmic_setup+0xf4>)
 23fba5a:	47b8      	blx	r7
	RCC_PeriphClockCmd(APBPeriph_SPORT, APBPeriph_SPORT_CLOCK, ENABLE);	
 23fba5c:	4933      	ldr	r1, [pc, #204]	; (23fbb2c <dmic_setup+0xf8>)
 23fba5e:	2201      	movs	r2, #1
 23fba60:	4608      	mov	r0, r1
 23fba62:	47b8      	blx	r7
 23fba64:	1eeb      	subs	r3, r5, #3
	sp_obj.mono_stereo = stereoMode ? CH_STEREO : CH_MONO;
 23fba66:	0964      	lsrs	r4, r4, #5
	switch(psp_obj->sample_rate){
 23fba68:	2b04      	cmp	r3, #4
 23fba6a:	d807      	bhi.n	23fba7c <dmic_setup+0x48>
 23fba6c:	e8df f003 	tbb	[pc, r3]
 23fba70:	06560605 	.word	0x06560605
 23fba74:	58          	.byte	0x58
 23fba75:	00          	.byte	0x00
	switch(sampleRate) {
 23fba76:	2507      	movs	r5, #7
 23fba78:	e7e5      	b.n	23fba46 <dmic_setup+0x12>
			div = 12;
 23fba7a:	260c      	movs	r6, #12
	PLL_Div(div);
 23fba7c:	4630      	mov	r0, r6
 23fba7e:	f003 fc17 	bl	23ff2b0 <PLL_Div>
	CODEC_Init(psp_obj->sample_rate, psp_obj->word_len, psp_obj->mono_stereo, psp_obj->direction);
 23fba82:	2302      	movs	r3, #2
 23fba84:	4622      	mov	r2, r4
 23fba86:	4628      	mov	r0, r5
 23fba88:	2100      	movs	r1, #0
 23fba8a:	f000 f89f 	bl	23fbbcc <CODEC_Init>
	PAD_CMD(_PB_1, DISABLE);
 23fba8e:	4d28      	ldr	r5, [pc, #160]	; (23fbb30 <dmic_setup+0xfc>)
 23fba90:	2100      	movs	r1, #0
 23fba92:	2021      	movs	r0, #33	; 0x21
 23fba94:	47a8      	blx	r5
	PAD_CMD(_PB_2, DISABLE);
 23fba96:	2100      	movs	r1, #0
 23fba98:	2022      	movs	r0, #34	; 0x22
 23fba9a:	47a8      	blx	r5
	Pinmux_Config(_PB_1, PINMUX_FUNCTION_DMIC); // DMIC_CLK - A0
 23fba9c:	4d25      	ldr	r5, [pc, #148]	; (23fbb34 <dmic_setup+0x100>)
 23fba9e:	210c      	movs	r1, #12
 23fbaa0:	2021      	movs	r0, #33	; 0x21
 23fbaa2:	47a8      	blx	r5
	Pinmux_Config(_PB_2, PINMUX_FUNCTION_DMIC);	// DMIC_DATA - A1
 23fbaa4:	210c      	movs	r1, #12
 23fbaa6:	2022      	movs	r0, #34	; 0x22
 23fbaa8:	47a8      	blx	r5
	sp_rx_info.rx_full_block.rx_addr = (u32)sp_full_buf;
 23fbaaa:	4b23      	ldr	r3, [pc, #140]	; (23fbb38 <dmic_setup+0x104>)
 23fbaac:	4a23      	ldr	r2, [pc, #140]	; (23fbb3c <dmic_setup+0x108>)
		sp_rx_info.rx_block[i].rx_gdma_own = 1;
 23fbaae:	2501      	movs	r5, #1
	sp_rx_info.rx_full_block.rx_addr = (u32)sp_full_buf;
 23fbab0:	635a      	str	r2, [r3, #52]	; 0x34
	sp_rx_info.rx_full_block.rx_length = (u32)SP_FULL_BUF_SIZE;
 23fbab2:	2280      	movs	r2, #128	; 0x80
 23fbab4:	639a      	str	r2, [r3, #56]	; 0x38
	sp_rx_info.rx_gdma_cnt = 0;
 23fbab6:	2200      	movs	r2, #0
		sp_rx_info.rx_block[i].rx_length = SP_DMA_PAGE_SIZE;
 23fbab8:	f44f 7000 	mov.w	r0, #512	; 0x200
 23fbabc:	4920      	ldr	r1, [pc, #128]	; (23fbb40 <dmic_setup+0x10c>)
	sp_rx_info.rx_gdma_cnt = 0;
 23fbabe:	879a      	strh	r2, [r3, #60]	; 0x3c
	sp_rx_info.rx_full_flag = 0;
 23fbac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	for(i=0; i<SP_DMA_PAGE_NUM; i++){
 23fbac4:	3201      	adds	r2, #1
 23fbac6:	2a04      	cmp	r2, #4
		sp_rx_info.rx_block[i].rx_length = SP_DMA_PAGE_SIZE;
 23fbac8:	e9c3 1001 	strd	r1, r0, [r3, #4]
		sp_rx_info.rx_block[i].rx_gdma_own = 1;
 23fbacc:	701d      	strb	r5, [r3, #0]
	for(i=0; i<SP_DMA_PAGE_NUM; i++){
 23fbace:	f501 7100 	add.w	r1, r1, #512	; 0x200
 23fbad2:	f103 030c 	add.w	r3, r3, #12
 23fbad6:	d1f5      	bne.n	23fbac4 <dmic_setup+0x90>
	sp_init_rx_variables();

	/*configure Sport according to the parameters*/
	AUDIO_SP_StructInit(&SP_InitStruct);
	SP_InitStruct.SP_MonoStereo= psp_obj->mono_stereo;
	SP_InitStruct.SP_WordLen = psp_obj->word_len;
 23fbad8:	2600      	movs	r6, #0
	AUDIO_SP_StructInit(&SP_InitStruct);
 23fbada:	4d1a      	ldr	r5, [pc, #104]	; (23fbb44 <dmic_setup+0x110>)
 23fbadc:	4b1a      	ldr	r3, [pc, #104]	; (23fbb48 <dmic_setup+0x114>)
 23fbade:	4628      	mov	r0, r5
 23fbae0:	4798      	blx	r3

	AUDIO_SP_Init(AUDIO_SPORT_DEV, &SP_InitStruct);
 23fbae2:	4629      	mov	r1, r5
 23fbae4:	4819      	ldr	r0, [pc, #100]	; (23fbb4c <dmic_setup+0x118>)
 23fbae6:	4b1a      	ldr	r3, [pc, #104]	; (23fbb50 <dmic_setup+0x11c>)
	SP_InitStruct.SP_MonoStereo= psp_obj->mono_stereo;
 23fbae8:	60ac      	str	r4, [r5, #8]
	SP_InitStruct.SP_WordLen = psp_obj->word_len;
 23fbaea:	602e      	str	r6, [r5, #0]
	AUDIO_SP_Init(AUDIO_SPORT_DEV, &SP_InitStruct);
 23fbaec:	4798      	blx	r3
	
	AUDIO_SP_RdmaCmd(AUDIO_SPORT_DEV, ENABLE);
 23fbaee:	2101      	movs	r1, #1
 23fbaf0:	4816      	ldr	r0, [pc, #88]	; (23fbb4c <dmic_setup+0x118>)
 23fbaf2:	4b18      	ldr	r3, [pc, #96]	; (23fbb54 <dmic_setup+0x120>)
 23fbaf4:	4798      	blx	r3
	AUDIO_SP_RxStart(AUDIO_SPORT_DEV, ENABLE);	
 23fbaf6:	2101      	movs	r1, #1
 23fbaf8:	4b17      	ldr	r3, [pc, #92]	; (23fbb58 <dmic_setup+0x124>)
 23fbafa:	4814      	ldr	r0, [pc, #80]	; (23fbb4c <dmic_setup+0x118>)
 23fbafc:	4798      	blx	r3

	rx_addr = (u32)sp_get_free_rx_page();
 23fbafe:	f7ff ff27 	bl	23fb950 <sp_get_free_rx_page>
 23fbb02:	4604      	mov	r4, r0
	rx_length = sp_get_free_rx_length();
 23fbb04:	f7ff ff38 	bl	23fb978 <sp_get_free_rx_length>
	AUDIO_SP_RXGDMA_Init(0, &SPGdmaStruct.SpRxGdmaInitStruct, &SPGdmaStruct, (IRQ_FUN)sp_rx_complete, (u8*)rx_addr, rx_length);	
 23fbb08:	4a14      	ldr	r2, [pc, #80]	; (23fbb5c <dmic_setup+0x128>)
 23fbb0a:	e9cd 4000 	strd	r4, r0, [sp]
 23fbb0e:	4611      	mov	r1, r2
 23fbb10:	4630      	mov	r0, r6
 23fbb12:	4b13      	ldr	r3, [pc, #76]	; (23fbb60 <dmic_setup+0x12c>)
 23fbb14:	4c13      	ldr	r4, [pc, #76]	; (23fbb64 <dmic_setup+0x130>)
 23fbb16:	47a0      	blx	r4

    // Particle.connect();
}
 23fbb18:	b003      	add	sp, #12
 23fbb1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			div = 24;
 23fbb1c:	2618      	movs	r6, #24
			break;
 23fbb1e:	e7ad      	b.n	23fba7c <dmic_setup+0x48>
			div = 48;
 23fbb20:	2630      	movs	r6, #48	; 0x30
			break;
 23fbb22:	e7ab      	b.n	23fba7c <dmic_setup+0x48>
 23fbb24:	023ff2c9 	.word	0x023ff2c9
 23fbb28:	10110039 	.word	0x10110039
 23fbb2c:	40080000 	.word	0x40080000
 23fbb30:	1010cf99 	.word	0x1010cf99
 23fbb34:	1010cfb9 	.word	0x1010cfb9
 23fbb38:	1007ade0 	.word	0x1007ade0
 23fbb3c:	1007ad60 	.word	0x1007ad60
 23fbb40:	1007a4e0 	.word	0x1007a4e0
 23fbb44:	1007ad34 	.word	0x1007ad34
 23fbb48:	023ff37d 	.word	0x023ff37d
 23fbb4c:	40010800 	.word	0x40010800
 23fbb50:	023ff3d1 	.word	0x023ff3d1
 23fbb54:	023ff471 	.word	0x023ff471
 23fbb58:	023ff3ad 	.word	0x023ff3ad
 23fbb5c:	1007ace0 	.word	0x1007ace0
 23fbb60:	023fb999 	.word	0x023fb999
 23fbb64:	023ff495 	.word	0x023ff495

023fbb68 <dmic_flush>:


void dmic_flush() {
 23fbb68:	b508      	push	{r3, lr}
	while(sp_get_ready_rx_page() != NULL) {
 23fbb6a:	f7ff feb1 	bl	23fb8d0 <sp_get_ready_rx_page>
 23fbb6e:	b900      	cbnz	r0, 23fbb72 <dmic_flush+0xa>
        sp_read_rx_page(NULL, 0);
    }  
}
 23fbb70:	bd08      	pop	{r3, pc}
        sp_read_rx_page(NULL, 0);
 23fbb72:	2100      	movs	r1, #0
 23fbb74:	4608      	mov	r0, r1
 23fbb76:	f7ff feb9 	bl	23fb8ec <sp_read_rx_page>
 23fbb7a:	e7f6      	b.n	23fbb6a <dmic_flush+0x2>

023fbb7c <dmic_ready>:

unsigned char *dmic_ready() {
	return sp_get_ready_rx_page();
 23fbb7c:	f7ff bea8 	b.w	23fb8d0 <sp_get_ready_rx_page>

023fbb80 <dmic_read>:
}

void dmic_read(unsigned char *buf, size_t len) {
	sp_read_rx_page(buf, len);
 23fbb80:	f7ff beb4 	b.w	23fb8ec <sp_read_rx_page>

023fbb84 <AUDIO_SI_WriteReg>:
void AUDIO_SI_WriteReg(u32 address, u32 data)
{
	u32 cnt = 0;
	AUDIO_SI_TypeDef *SIx = AUDIO_SI_DEV;

	SIx->SI_CTRLR = (address << 8) | (data << 16) | BIT_CTRLR_SI_WR_START;
 23fbb84:	0409      	lsls	r1, r1, #16
 23fbb86:	4a06      	ldr	r2, [pc, #24]	; (23fbba0 <AUDIO_SI_WriteReg+0x1c>)
 23fbb88:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 23fbb8c:	f040 0001 	orr.w	r0, r0, #1

	while ((SIx->SI_CTRLR & BIT_CTRLR_SI_WR_START) && (++cnt) < 100000);
 23fbb90:	4b04      	ldr	r3, [pc, #16]	; (23fbba4 <AUDIO_SI_WriteReg+0x20>)
	SIx->SI_CTRLR = (address << 8) | (data << 16) | BIT_CTRLR_SI_WR_START;
 23fbb92:	6010      	str	r0, [r2, #0]
	while ((SIx->SI_CTRLR & BIT_CTRLR_SI_WR_START) && (++cnt) < 100000);
 23fbb94:	6811      	ldr	r1, [r2, #0]
 23fbb96:	07c9      	lsls	r1, r1, #31
 23fbb98:	d501      	bpl.n	23fbb9e <AUDIO_SI_WriteReg+0x1a>
 23fbb9a:	3b01      	subs	r3, #1
 23fbb9c:	d1fa      	bne.n	23fbb94 <AUDIO_SI_WriteReg+0x10>

	if (cnt == 100000) {
		DBG_8195A("write codec reg fail!!\n");
	}
}
 23fbb9e:	4770      	bx	lr
 23fbba0:	40010000 	.word	0x40010000
 23fbba4:	000186a0 	.word	0x000186a0

023fbba8 <AUDIO_SI_ReadReg>:
	u32 reg_value = 0;
	u32 cnt = 0;
	AUDIO_SI_TypeDef *SIx = AUDIO_SI_DEV;

	/* Configure Read command */
	SIx->SI_CTRLR = (address << 8) | BIT_CTRLR_SI_RD_START;
 23fbba8:	4a06      	ldr	r2, [pc, #24]	; (23fbbc4 <AUDIO_SI_ReadReg+0x1c>)
 23fbbaa:	0200      	lsls	r0, r0, #8
 23fbbac:	f040 0010 	orr.w	r0, r0, #16
 23fbbb0:	6010      	str	r0, [r2, #0]
 23fbbb2:	4805      	ldr	r0, [pc, #20]	; (23fbbc8 <AUDIO_SI_ReadReg+0x20>)

	do {
		reg_value = SIx->SI_CTRLR;
 23fbbb4:	6813      	ldr	r3, [r2, #0]
		/* waiting for read done */
	} while ((reg_value & BIT_CTRLR_SI_RD_START) && (++cnt) < 100000);
 23fbbb6:	06d9      	lsls	r1, r3, #27
 23fbbb8:	d502      	bpl.n	23fbbc0 <AUDIO_SI_ReadReg+0x18>
 23fbbba:	3801      	subs	r0, #1
 23fbbbc:	d1fa      	bne.n	23fbbb4 <AUDIO_SI_ReadReg+0xc>
 23fbbbe:	4770      	bx	lr
	if (cnt == 100000) {
		DBG_8195A("read codec reg fail!!\n");
		return 0;
	}

	return ((reg_value & BIT_CTRLR_SI_DATA) >> 16);
 23fbbc0:	0c18      	lsrs	r0, r3, #16
}
 23fbbc2:	4770      	bx	lr
 23fbbc4:	40010000 	.word	0x40010000
 23fbbc8:	000186a0 	.word	0x000186a0

023fbbcc <CODEC_Init>:
  *            @arg APP_LINE_OUT: line out
  *            @arg APP_DAAD_LPBK: loopback
  * @return  None
  */
void CODEC_Init(u32 sample_rate, u32 word_len, u32 mono_stereo, u32 application)
{
 23fbbcc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fbbd0:	4617      	mov	r7, r2
	uint32_t reg_value = 0, reg_value2 = 0, reg_value3 = 0;

	reg_value = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL);
 23fbbd2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
{
 23fbbd6:	461d      	mov	r5, r3
 23fbbd8:	4688      	mov	r8, r1
	reg_value = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL);
 23fbbda:	f8d2 3344 	ldr.w	r3, [r2, #836]	; 0x344
#define AUTO_CAL_MAX_ERROR				0x007

static inline u32
is_power_supply18(void)
{
	u32 temp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AON_LDO_CTRL0);
 23fbbde:	6911      	ldr	r1, [r2, #16]
	reg_value &= ~(BIT_LSYS_MASK_AC_LDO_REG << BIT_LSYS_SHIFT_AC_LDO_REG);
 23fbbe0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

	if (temp & BIT_AON_V1833_SEL)
 23fbbe4:	0149      	lsls	r1, r1, #5
	//restore the pad power
	if (is_power_supply18()) {
		reg_value |= ((u32)0x68) << BIT_LSYS_SHIFT_AC_LDO_REG;
	} else {
		reg_value |= ((u32)0x2A) << BIT_LSYS_SHIFT_AC_LDO_REG;
 23fbbe6:	bf4c      	ite	mi
 23fbbe8:	f043 0354 	orrmi.w	r3, r3, #84	; 0x54
		reg_value |= ((u32)0x68) << BIT_LSYS_SHIFT_AC_LDO_REG;
 23fbbec:	f043 03d0 	orrpl.w	r3, r3, #208	; 0xd0
	}
	HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL, reg_value);

	/* ================= CODEC initialize ======================== */

	if ((application & APP_DAAD_LPBK) == APP_DAAD_LPBK) {
 23fbbf0:	f015 0410 	ands.w	r4, r5, #16
{
 23fbbf4:	4606      	mov	r6, r0
	HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL, reg_value);
 23fbbf6:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344

		reg_value3 = (1 | 1 << BIT_ASRC_FTK_LOOP_EN | 1 << BIT_ASRC_256FS_SYS_SEL | 1 << BIT_ASRC_EN);
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
		reg_value3 = 0;

		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23fbbfa:	ea40 1900 	orr.w	r9, r0, r0, lsl #4
	if ((application & APP_DAAD_LPBK) == APP_DAAD_LPBK) {
 23fbbfe:	d059      	beq.n	23fbcb4 <CODEC_Init+0xe8>
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value3);
 23fbc00:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 23fbc04:	2012      	movs	r0, #18
 23fbc06:	f7ff ffbd 	bl	23fbb84 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value3);
 23fbc0a:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 23fbc0e:	2015      	movs	r0, #21
 23fbc10:	f7ff ffb8 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23fbc14:	201b      	movs	r0, #27
 23fbc16:	f7ff ffc7 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 | 1 << BIT_ASRC_FTK_LOOP_EN | 1 << BIT_ASRC_256FS_SYS_SEL);
 23fbc1a:	f040 0007 	orr.w	r0, r0, #7
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23fbc1e:	b281      	uxth	r1, r0
 23fbc20:	201b      	movs	r0, #27
 23fbc22:	f7ff ffaf 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23fbc26:	201b      	movs	r0, #27
 23fbc28:	f7ff ffbe 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ASRC_EN);
 23fbc2c:	f040 0010 	orr.w	r0, r0, #16
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23fbc30:	b281      	uxth	r1, r0
 23fbc32:	201b      	movs	r0, #27
 23fbc34:	f7ff ffa6 	bl	23fbb84 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value3);
 23fbc38:	f641 71bf 	movw	r1, #8127	; 0x1fbf
 23fbc3c:	2018      	movs	r0, #24
 23fbc3e:	f7ff ffa1 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_L_MUTE_CTRL);
 23fbc42:	20fb      	movs	r0, #251	; 0xfb
 23fbc44:	f7ff ffb0 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAAD_LPBK_EN);
 23fbc48:	f040 0002 	orr.w	r0, r0, #2
		AUDIO_SI_WriteReg(DAC_L_MUTE_CTRL, reg_value);
 23fbc4c:	b281      	uxth	r1, r0
 23fbc4e:	20fb      	movs	r0, #251	; 0xfb
 23fbc50:	f7ff ff98 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_L_FILTER_CTRL);
 23fbc54:	2011      	movs	r0, #17
 23fbc56:	f7ff ffa7 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_AD_MIX_MUTE);
 23fbc5a:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 23fbc5e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 23fbc62:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value);
 23fbc64:	2011      	movs	r0, #17
 23fbc66:	f7ff ff8d 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_R_FILTER_CTRL);
 23fbc6a:	2014      	movs	r0, #20
 23fbc6c:	f7ff ff9c 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_R_AD_MIX_MUTE);
 23fbc70:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 23fbc74:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 23fbc78:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value);
 23fbc7a:	2014      	movs	r0, #20
 23fbc7c:	f7ff ff82 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL);
 23fbc80:	2018      	movs	r0, #24
 23fbc82:	f7ff ff91 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_L_EN | 1 << BIT_DMIC_R_EN | 1 << BIT_DMIC_CLK_EN);
 23fbc86:	ea6f 40c0 	mvn.w	r0, r0, lsl #19
 23fbc8a:	ea6f 40d0 	mvn.w	r0, r0, lsr #19
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23fbc8e:	b281      	uxth	r1, r0
 23fbc90:	2018      	movs	r0, #24
 23fbc92:	f7ff ff77 	bl	23fbb84 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
 23fbc96:	2117      	movs	r1, #23
 23fbc98:	201b      	movs	r0, #27
 23fbc9a:	f7ff ff73 	bl	23fbb84 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23fbc9e:	4649      	mov	r1, r9
 23fbca0:	2017      	movs	r0, #23
 23fbca2:	f7ff ff6f 	bl	23fbb84 <AUDIO_SI_WriteReg>

		reg_value3 = (1 << BIT_I2S_RST_N_REG);
		AUDIO_SI_WriteReg(I2S_CTRL, reg_value3);
 23fbca6:	2180      	movs	r1, #128	; 0x80
		reg_value &= (0xffff & (~(3 << BIT_ASRC_256FS_SYS_SEL)));
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
	}

	reg_value = ((word_len << 4) | mono_stereo | 0x0080);
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23fbca8:	2010      	movs	r0, #16
}
 23fbcaa:	b002      	add	sp, #8
 23fbcac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23fbcb0:	f7ff bf68 	b.w	23fbb84 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//VREF voltage selection
 23fbcb4:	2003      	movs	r0, #3
 23fbcb6:	f7ff ff77 	bl	23fbba8 <AUDIO_SI_ReadReg>
	reg_value |= (2 << BIT_VREF_VREFSEL);
 23fbcba:	f420 6140 	bic.w	r1, r0, #3072	; 0xc00
 23fbcbe:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
	AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23fbcc2:	2003      	movs	r0, #3
	reg_value |= (2 << BIT_VREF_VREFSEL);
 23fbcc4:	b289      	uxth	r1, r1
	AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23fbcc6:	f7ff ff5d 	bl	23fbb84 <AUDIO_SI_WriteReg>
	if ((application & APP_LINE_OUT) == APP_LINE_OUT) {
 23fbcca:	f015 0a08 	ands.w	sl, r5, #8
 23fbcce:	d04a      	beq.n	23fbd66 <CODEC_Init+0x19a>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL); 	//dac modulation/filter/fifo on
 23fbcd0:	2018      	movs	r0, #24
 23fbcd2:	f7ff ff69 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DA_L_EN | 1 << BIT_DA_R_EN | 1 << BIT_MOD_L_EN | 1 << BIT_MOD_R_EN | 1 << BIT_DA_ANA_CLK_EN | 1 << BIT_DA_FIFO_EN);
 23fbcd6:	f040 003f 	orr.w	r0, r0, #63	; 0x3f
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23fbcda:	b281      	uxth	r1, r0
 23fbcdc:	2018      	movs	r0, #24
 23fbcde:	f7ff ff51 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23fbce2:	4620      	mov	r0, r4
 23fbce4:	f7ff ff60 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DPRAMP_POW | 1 << BIT_DTSDM_CKXEN);
 23fbce8:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23fbcec:	f440 7146 	orr.w	r1, r0, #792	; 0x318
 23fbcf0:	f041 0103 	orr.w	r1, r1, #3
 23fbcf4:	4620      	mov	r0, r4
 23fbcf6:	f7ff ff45 	bl	23fbb84 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23fbcfa:	f240 71fc 	movw	r1, #2044	; 0x7fc
 23fbcfe:	2001      	movs	r0, #1
 23fbd00:	f7ff ff40 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23fbd04:	2002      	movs	r0, #2
 23fbd06:	f7ff ff4f 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 1 << BIT_HPO_R_POW | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23fbd0a:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23fbd0e:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23fbd12:	f041 01ea 	orr.w	r1, r1, #234	; 0xea
 23fbd16:	2002      	movs	r0, #2
 23fbd18:	f7ff ff34 	bl	23fbb84 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23fbd1c:	2110      	movs	r1, #16
 23fbd1e:	200c      	movs	r0, #12
 23fbd20:	f7ff ff30 	bl	23fbb84 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23fbd24:	f649 71fc 	movw	r1, #40956	; 0x9ffc
 23fbd28:	2001      	movs	r0, #1
 23fbd2a:	f7ff ff2b 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23fbd2e:	2002      	movs	r0, #2
 23fbd30:	f7ff ff3a 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 1 << BIT_HPO_OPPDPR | 1 << BIT_HPO_R_POW | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 <<
 23fbd34:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23fbd38:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23fbd3c:	f041 01fa 	orr.w	r1, r1, #250	; 0xfa
 23fbd40:	2002      	movs	r0, #2
 23fbd42:	f7ff ff1f 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23fbd46:	4620      	mov	r0, r4
 23fbd48:	f7ff ff2e 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DPRAMP_ENRAMP | 1 << BIT_DPRAMP_POW | 1 <<
 23fbd4c:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23fbd50:	f440 7166 	orr.w	r1, r0, #920	; 0x398
 23fbd54:	f041 0103 	orr.w	r1, r1, #3
 23fbd58:	4620      	mov	r0, r4
 23fbd5a:	f7ff ff13 	bl	23fbb84 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23fbd5e:	2118      	movs	r1, #24
 23fbd60:	200c      	movs	r0, #12
 23fbd62:	f7ff ff0f 	bl	23fbb84 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23fbd66:	f015 0405 	ands.w	r4, r5, #5
 23fbd6a:	d02f      	beq.n	23fbdcc <CODEC_Init+0x200>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);		//vref power on
 23fbd6c:	2002      	movs	r0, #2
 23fbd6e:	f7ff ff1b 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23fbd72:	f420 41c0 	bic.w	r1, r0, #24576	; 0x6000
 23fbd76:	f441 4101 	orr.w	r1, r1, #33024	; 0x8100
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23fbd7a:	2002      	movs	r0, #2
		reg_value |= (1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23fbd7c:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23fbd7e:	f7ff ff01 	bl	23fbb84 <AUDIO_SI_WriteReg>
		DelayUs(5);
 23fbd82:	2005      	movs	r0, #5
 23fbd84:	f003 fdf4 	bl	23ff970 <__DelayUs_veneer>
		if ((application & APP_AMIC_IN) == APP_AMIC_IN) {
 23fbd88:	07ea      	lsls	r2, r5, #31
 23fbd8a:	d57f      	bpl.n	23fbe8c <CODEC_Init+0x2c0>
			reg_value = AUDIO_SI_ReadReg(CK_DEPOP_MICBIAS);		//micbias chopper clock enable
 23fbd8c:	200c      	movs	r0, #12
 23fbd8e:	f7ff ff0b 	bl	23fbba8 <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_CKX_MICBIAS_EN);
 23fbd92:	f040 0010 	orr.w	r0, r0, #16
			AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value);
 23fbd96:	b281      	uxth	r1, r0
 23fbd98:	200c      	movs	r0, #12
 23fbd9a:	f7ff fef3 	bl	23fbb84 <AUDIO_SI_WriteReg>
			reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);		//release micbias chopper clock gate and mic_bias on
 23fbd9e:	2002      	movs	r0, #2
 23fbda0:	f7ff ff02 	bl	23fbba8 <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_MICBIAS_ENCHX | 1 << BIT_MICBIAS_POW);
 23fbda4:	f440 60c0 	orr.w	r0, r0, #1536	; 0x600
			AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23fbda8:	b281      	uxth	r1, r0
 23fbdaa:	2002      	movs	r0, #2
 23fbdac:	f7ff feea 	bl	23fbb84 <AUDIO_SI_WriteReg>
			DelayUs(100);
 23fbdb0:	2064      	movs	r0, #100	; 0x64
 23fbdb2:	f003 fddd 	bl	23ff970 <__DelayUs_veneer>
			reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//PGA on and unmute mic
 23fbdb6:	2003      	movs	r0, #3
 23fbdb8:	f7ff fef6 	bl	23fbba8 <AUDIO_SI_ReadReg>
			reg_value |= (2 << BIT_MICBST_MUTE_L | 2 << BIT_MICBST_MUTE_R | 3 << BIT_MICBST_POW);
 23fbdbc:	f020 01f0 	bic.w	r1, r0, #240	; 0xf0
 23fbdc0:	f441 7168 	orr.w	r1, r1, #928	; 0x3a0
 23fbdc4:	b289      	uxth	r1, r1
			AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23fbdc6:	2003      	movs	r0, #3
 23fbdc8:	f7ff fedc 	bl	23fbb84 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN) || ((application & APP_LINE_OUT) == APP_LINE_OUT)) {
 23fbdcc:	f015 0f0d 	tst.w	r5, #13
 23fbdd0:	d002      	beq.n	23fbdd8 <CODEC_Init+0x20c>
		DelayMs(200);
 23fbdd2:	20c8      	movs	r0, #200	; 0xc8
 23fbdd4:	f003 fdbc 	bl	23ff950 <__DelayMs_veneer>
	if ((application & APP_LINE_OUT) == APP_LINE_OUT) {
 23fbdd8:	f1ba 0f00 	cmp.w	sl, #0
 23fbddc:	d020      	beq.n	23fbe20 <CODEC_Init+0x254>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23fbdde:	2000      	movs	r0, #0
 23fbde0:	f7ff fee2 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DTSDM_CKXEN);
 23fbde4:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23fbde8:	f440 7106 	orr.w	r1, r0, #536	; 0x218
 23fbdec:	f041 0103 	orr.w	r1, r1, #3
 23fbdf0:	2000      	movs	r0, #0
 23fbdf2:	f7ff fec7 	bl	23fbb84 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23fbdf6:	f240 41fc 	movw	r1, #1276	; 0x4fc
 23fbdfa:	2001      	movs	r0, #1
 23fbdfc:	f7ff fec2 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23fbe00:	2002      	movs	r0, #2
 23fbe02:	f7ff fed1 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 2 << BIT_HPO_OPPDPR | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23fbe06:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23fbe0a:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23fbe0e:	f041 01ea 	orr.w	r1, r1, #234	; 0xea
 23fbe12:	2002      	movs	r0, #2
 23fbe14:	f7ff feb6 	bl	23fbb84 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23fbe18:	2110      	movs	r1, #16
 23fbe1a:	200c      	movs	r0, #12
 23fbe1c:	f7ff feb2 	bl	23fbb84 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23fbe20:	b16c      	cbz	r4, 23fbe3e <CODEC_Init+0x272>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);		//adc on
 23fbe22:	2000      	movs	r0, #0
 23fbe24:	f7ff fec0 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DTSDM_CKXEN | 1 << BIT_DTSDM_POW_L | 1 << BIT_DTSDM_POW_R);
 23fbe28:	f440 6060 	orr.w	r0, r0, #3584	; 0xe00
 23fbe2c:	f040 0001 	orr.w	r0, r0, #1
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23fbe30:	b281      	uxth	r1, r0
 23fbe32:	2000      	movs	r0, #0
 23fbe34:	f7ff fea6 	bl	23fbb84 <AUDIO_SI_WriteReg>
		DelayUs(50);
 23fbe38:	2032      	movs	r0, #50	; 0x32
 23fbe3a:	f003 fd99 	bl	23ff970 <__DelayUs_veneer>
	AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value3);
 23fbe3e:	f641 71bf 	movw	r1, #8127	; 0x1fbf
 23fbe42:	2018      	movs	r0, #24
 23fbe44:	f7ff fe9e 	bl	23fbb84 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value3);
 23fbe48:	f246 3120 	movw	r1, #25376	; 0x6320
 23fbe4c:	2011      	movs	r0, #17
 23fbe4e:	f7ff fe99 	bl	23fbb84 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value3);
 23fbe52:	f246 3120 	movw	r1, #25376	; 0x6320
 23fbe56:	2014      	movs	r0, #20
 23fbe58:	f7ff fe94 	bl	23fbb84 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23fbe5c:	b364      	cbz	r4, 23fbeb8 <CODEC_Init+0x2ec>
		reg_value = AUDIO_SI_ReadReg(ADC_L_CTRL);
 23fbe5e:	2012      	movs	r0, #18
 23fbe60:	f7ff fea2 	bl	23fbba8 <AUDIO_SI_ReadReg>
 23fbe64:	4604      	mov	r4, r0
		reg_value2 = AUDIO_SI_ReadReg(ADC_R_ADJ_D);
 23fbe66:	2015      	movs	r0, #21
 23fbe68:	f7ff fe9e 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value &= (0xffff & (~(7 << BIT_ADC_L_ADJ_HPF_COEF_SEL | 3 << BIT_ADC_L_AD_ZDET_FUNC)));
 23fbe6c:	f424 64c7 	bic.w	r4, r4, #1592	; 0x638
 23fbe70:	f420 6ac7 	bic.w	sl, r0, #1592	; 0x638
 23fbe74:	b2a4      	uxth	r4, r4
		reg_value2 &= (0xffff & (~(7 << BIT_ADC_R_ADJ_HPF_COEF_SEL | 3 << BIT_ADC_R_AD_ZDET_FUNC)));
 23fbe76:	fa1f fa8a 	uxth.w	sl, sl
		switch (sample_rate) {
 23fbe7a:	2e09      	cmp	r6, #9
 23fbe7c:	d80e      	bhi.n	23fbe9c <CODEC_Init+0x2d0>
 23fbe7e:	e8df f006 	tbb	[pc, r6]
 23fbe82:	c0bb      	.short	0xc0bb
 23fbe84:	0d0db60d 	.word	0x0d0db60d
 23fbe88:	c0bb0d0d 	.word	0xc0bb0d0d
			reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//PGA on and unmute line-in
 23fbe8c:	2003      	movs	r0, #3
 23fbe8e:	f7ff fe8b 	bl	23fbba8 <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_MICBST_MUTE_L | 1 << BIT_MICBST_MUTE_R | 3 << BIT_MICBST_POW);
 23fbe92:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
			AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23fbe96:	f440 7154 	orr.w	r1, r0, #848	; 0x350
 23fbe9a:	e794      	b.n	23fbdc6 <CODEC_Init+0x1fa>
		reg_value |= (1 << BIT_ADC_L_ADJ_HPF_2ND_EN);
 23fbe9c:	f044 0104 	orr.w	r1, r4, #4
		reg_value2 |= (1 << BIT_ADC_R_ADJ_HPF_2ND_EN);
 23fbea0:	f04a 0a04 	orr.w	sl, sl, #4
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value);
 23fbea4:	2012      	movs	r0, #18
 23fbea6:	f7ff fe6d 	bl	23fbb84 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value2);
 23fbeaa:	2015      	movs	r0, #21
 23fbeac:	4651      	mov	r1, sl
 23fbeae:	f7ff fe69 	bl	23fbb84 <AUDIO_SI_WriteReg>
		DelayMs(50);		//maybe need fine tune per board
 23fbeb2:	2032      	movs	r0, #50	; 0x32
 23fbeb4:	f003 fd4c 	bl	23ff950 <__DelayMs_veneer>
	AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
 23fbeb8:	2117      	movs	r1, #23
 23fbeba:	201b      	movs	r0, #27
 23fbebc:	f7ff fe62 	bl	23fbb84 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23fbec0:	4649      	mov	r1, r9
 23fbec2:	2017      	movs	r0, #23
 23fbec4:	f7ff fe5e 	bl	23fbb84 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_L_MUTE_CTRL);
 23fbec8:	20fb      	movs	r0, #251	; 0xfb
 23fbeca:	f7ff fe6d 	bl	23fbba8 <AUDIO_SI_ReadReg>
	AUDIO_SI_WriteReg(DAC_L_MUTE_CTRL, reg_value & 0xfff9);
 23fbece:	f020 0106 	bic.w	r1, r0, #6
 23fbed2:	f041 0108 	orr.w	r1, r1, #8
 23fbed6:	b289      	uxth	r1, r1
 23fbed8:	20fb      	movs	r0, #251	; 0xfb
 23fbeda:	f7ff fe53 	bl	23fbb84 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_R_MUTE_CTRL);
 23fbede:	20fd      	movs	r0, #253	; 0xfd
 23fbee0:	f7ff fe62 	bl	23fbba8 <AUDIO_SI_ReadReg>
	AUDIO_SI_WriteReg(DAC_R_MUTE_CTRL, reg_value & 0xfff9);
 23fbee4:	f020 0106 	bic.w	r1, r0, #6
 23fbee8:	f041 0108 	orr.w	r1, r1, #8
 23fbeec:	b289      	uxth	r1, r1
 23fbeee:	20fd      	movs	r0, #253	; 0xfd
 23fbef0:	f7ff fe48 	bl	23fbb84 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(ALC_MIN_GAIN);
 23fbef4:	2027      	movs	r0, #39	; 0x27
 23fbef6:	f7ff fe57 	bl	23fbba8 <AUDIO_SI_ReadReg>
	reg_value &= (0xffff & (~(1 << BIT_DA_STEREO_MODE_EN)));
 23fbefa:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 23fbefe:	b281      	uxth	r1, r0
	if (mono_stereo == CH_STEREO) {
 23fbf00:	b90f      	cbnz	r7, 23fbf06 <CODEC_Init+0x33a>
		reg_value |= BIT8;
 23fbf02:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	AUDIO_SI_WriteReg(ALC_MIN_GAIN, reg_value);
 23fbf06:	2027      	movs	r0, #39	; 0x27
 23fbf08:	f7ff fe3c 	bl	23fbb84 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_L_CTRL);
 23fbf0c:	20fa      	movs	r0, #250	; 0xfa
 23fbf0e:	f7ff fe4b 	bl	23fbba8 <AUDIO_SI_ReadReg>
	reg_value |= (2 << BIT_DAC_L_DA_ZDET_FUNC);
 23fbf12:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 23fbf16:	0540      	lsls	r0, r0, #21
 23fbf18:	0d40      	lsrs	r0, r0, #21
 23fbf1a:	f440 5180 	orr.w	r1, r0, #4096	; 0x1000
	AUDIO_SI_WriteReg(DAC_L_CTRL, reg_value);
 23fbf1e:	20fa      	movs	r0, #250	; 0xfa
 23fbf20:	9101      	str	r1, [sp, #4]
 23fbf22:	f7ff fe2f 	bl	23fbb84 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(DAC_R_CTRL, reg_value);
 23fbf26:	20fc      	movs	r0, #252	; 0xfc
 23fbf28:	9901      	ldr	r1, [sp, #4]
 23fbf2a:	f7ff fe2b 	bl	23fbb84 <AUDIO_SI_WriteReg>
	if ((application & APP_DMIC_IN) == APP_DMIC_IN) {
 23fbf2e:	07ab      	lsls	r3, r5, #30
 23fbf30:	d540      	bpl.n	23fbfb4 <CODEC_Init+0x3e8>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_L_FILTER_CTRL);
 23fbf32:	2011      	movs	r0, #17
 23fbf34:	f7ff fe38 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_DMIC_RI_FA_SEL | 1 << BIT_ADC_L_DMIC_LPF2ND_EN | 1 << BIT_ADC_L_DMIC_LPF1ST_EN | 1 << BIT_ADC_L_AD_MIX_MUTE | 1 <<
 23fbf38:	4c34      	ldr	r4, [pc, #208]	; (23fc00c <CODEC_Init+0x440>)
 23fbf3a:	4020      	ands	r0, r4
 23fbf3c:	f440 41a0 	orr.w	r1, r0, #20480	; 0x5000
 23fbf40:	f041 0119 	orr.w	r1, r1, #25
 23fbf44:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value);
 23fbf46:	2011      	movs	r0, #17
 23fbf48:	f7ff fe1c 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_L_CTRL);
 23fbf4c:	2012      	movs	r0, #18
 23fbf4e:	f7ff fe2b 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_ADJ_HPF_2ND_EN);
 23fbf52:	f040 0004 	orr.w	r0, r0, #4
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value);
 23fbf56:	b281      	uxth	r1, r0
 23fbf58:	2012      	movs	r0, #18
 23fbf5a:	f7ff fe13 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_R_FILTER_CTRL);
 23fbf5e:	2014      	movs	r0, #20
 23fbf60:	f7ff fe22 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_DMIC_LPF2ND_EN | 1 << BIT_ADC_L_DMIC_LPF1ST_EN | 1 << BIT_ADC_L_AD_MIX_MUTE | 1 << BIT_ADC_L_AD_DCHPF_EN);
 23fbf64:	4020      	ands	r0, r4
 23fbf66:	f440 41a0 	orr.w	r1, r0, #20480	; 0x5000
 23fbf6a:	f041 0118 	orr.w	r1, r1, #24
 23fbf6e:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value);	//bit0: 0 means latching rising edge, whereas 1 means falling edge.
 23fbf70:	2014      	movs	r0, #20
 23fbf72:	f7ff fe07 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_R_ADJ_D);
 23fbf76:	2015      	movs	r0, #21
 23fbf78:	f7ff fe16 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_R_ADJ_HPF_2ND_EN);
 23fbf7c:	f040 0004 	orr.w	r0, r0, #4
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value);
 23fbf80:	b281      	uxth	r1, r0
 23fbf82:	2015      	movs	r0, #21
 23fbf84:	f7ff fdfe 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_SR_CTRL);
 23fbf88:	2017      	movs	r0, #23
 23fbf8a:	f7ff fe0d 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_CLK_SEL);
 23fbf8e:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 23fbf92:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 23fbf96:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, reg_value);
 23fbf98:	2017      	movs	r0, #23
 23fbf9a:	f7ff fdf3 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL);
 23fbf9e:	2018      	movs	r0, #24
 23fbfa0:	f7ff fe02 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_L_EN | 1 << BIT_DMIC_R_EN | 1 << BIT_DMIC_CLK_EN);
 23fbfa4:	ea6f 40c0 	mvn.w	r0, r0, lsl #19
 23fbfa8:	ea6f 40d0 	mvn.w	r0, r0, lsr #19
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23fbfac:	b281      	uxth	r1, r0
 23fbfae:	2018      	movs	r0, #24
 23fbfb0:	f7ff fde8 	bl	23fbb84 <AUDIO_SI_WriteReg>
	if ((sample_rate == SR_96K) || (sample_rate == SR_88P2K)) {
 23fbfb4:	f026 0608 	bic.w	r6, r6, #8
 23fbfb8:	2e01      	cmp	r6, #1
 23fbfba:	d113      	bne.n	23fbfe4 <CODEC_Init+0x418>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_SR_CTRL);
 23fbfbc:	2017      	movs	r0, #23
 23fbfbe:	f7ff fdf3 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ASRC_FSI_RATE_MANUAL);
 23fbfc2:	f420 41f0 	bic.w	r1, r0, #30720	; 0x7800
 23fbfc6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 23fbfca:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, reg_value);
 23fbfcc:	2017      	movs	r0, #23
 23fbfce:	f7ff fdd9 	bl	23fbb84 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23fbfd2:	201b      	movs	r0, #27
 23fbfd4:	f7ff fde8 	bl	23fbba8 <AUDIO_SI_ReadReg>
		reg_value &= (0xffff & (~(3 << BIT_ASRC_256FS_SYS_SEL)));
 23fbfd8:	f020 000c 	bic.w	r0, r0, #12
 23fbfdc:	b281      	uxth	r1, r0
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23fbfde:	201b      	movs	r0, #27
 23fbfe0:	f7ff fdd0 	bl	23fbb84 <AUDIO_SI_WriteReg>
	reg_value = ((word_len << 4) | mono_stereo | 0x0080);
 23fbfe4:	ea47 1108 	orr.w	r1, r7, r8, lsl #4
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23fbfe8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 23fbfec:	e65c      	b.n	23fbca8 <CODEC_Init+0xdc>
			reg_value |= (1 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23fbfee:	f044 010c 	orr.w	r1, r4, #12
			reg_value2 |= (1 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23fbff2:	f04a 0a0c 	orr.w	sl, sl, #12
			break;
 23fbff6:	e755      	b.n	23fbea4 <CODEC_Init+0x2d8>
			reg_value |= (2 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23fbff8:	f044 0114 	orr.w	r1, r4, #20
			reg_value2 |= (2 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23fbffc:	f04a 0a14 	orr.w	sl, sl, #20
			break;
 23fc000:	e750      	b.n	23fbea4 <CODEC_Init+0x2d8>
			reg_value |= (3 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23fc002:	f044 011c 	orr.w	r1, r4, #28
			reg_value2 |= (3 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23fc006:	f04a 0a1c 	orr.w	sl, sl, #28
			break;
 23fc00a:	e74b      	b.n	23fbea4 <CODEC_Init+0x2d8>
 23fc00c:	ffffdffe 	.word	0xffffdffe

023fc010 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fc010:	4770      	bx	lr

023fc012 <_ZNSt17_Function_handlerIFvPhjEZ13startSamplingvEUlS0_jE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
 23fc012:	2a01      	cmp	r2, #1
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fc014:	bf08      	it	eq
 23fc016:	6001      	streq	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
 23fc018:	2000      	movs	r0, #0
 23fc01a:	4770      	bx	lr

023fc01c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fc01c:	b510      	push	{r4, lr}
 23fc01e:	4604      	mov	r4, r0
 23fc020:	4b09      	ldr	r3, [pc, #36]	; (23fc048 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fc022:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fc024:	f001 fc5e 	bl	23fd8e4 <_ZN5spark10LogManager8instanceEv>
 23fc028:	4621      	mov	r1, r4
 23fc02a:	f001 fe95 	bl	23fdd58 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fc02e:	f002 fc27 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fc032:	f002 fc15 	bl	23fe860 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fc036:	4620      	mov	r0, r4
 23fc038:	4b04      	ldr	r3, [pc, #16]	; (23fc04c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fc03a:	f840 3b04 	str.w	r3, [r0], #4
 23fc03e:	f001 fd27 	bl	23fda90 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fc042:	4620      	mov	r0, r4
 23fc044:	bd10      	pop	{r4, pc}
 23fc046:	bf00      	nop
 23fc048:	023ffa54 	.word	0x023ffa54
 23fc04c:	023ffa3c 	.word	0x023ffa3c

023fc050 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fc050:	b510      	push	{r4, lr}
 23fc052:	4604      	mov	r4, r0
    }
 23fc054:	f7ff ffe2 	bl	23fc01c <_ZN5spark16SerialLogHandlerD1Ev>
 23fc058:	4620      	mov	r0, r4
 23fc05a:	2124      	movs	r1, #36	; 0x24
 23fc05c:	f7ff fc21 	bl	23fb8a2 <_ZdlPvj>
 23fc060:	4620      	mov	r0, r4
 23fc062:	bd10      	pop	{r4, pc}

023fc064 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23fc064:	b40e      	push	{r1, r2, r3}
 23fc066:	b503      	push	{r0, r1, lr}
 23fc068:	ab03      	add	r3, sp, #12
 23fc06a:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 23fc06e:	2101      	movs	r1, #1
        va_start(args, format);
 23fc070:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 23fc072:	f001 fa7e 	bl	23fd572 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 23fc076:	b002      	add	sp, #8
 23fc078:	f85d eb04 	ldr.w	lr, [sp], #4
 23fc07c:	b003      	add	sp, #12
 23fc07e:	4770      	bx	lr

023fc080 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fc080:	b510      	push	{r4, lr}
      if (_M_manager)
 23fc082:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fc084:	4604      	mov	r4, r0
      if (_M_manager)
 23fc086:	b113      	cbz	r3, 23fc08e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fc088:	2203      	movs	r2, #3
 23fc08a:	4601      	mov	r1, r0
 23fc08c:	4798      	blx	r3
    }
 23fc08e:	4620      	mov	r0, r4
 23fc090:	bd10      	pop	{r4, pc}

023fc092 <_Z20simulateServoActionsv>:
const int LED2_PIN = D6; // External LED on D6

unsigned long startTime = 0; // To track recording duration
bool isRecording = false;

void simulateServoActions() {
 23fc092:	b508      	push	{r3, lr}
    // Simulate servo movements using LEDs
    digitalWrite(LED2_PIN, HIGH); // Turn on LED2
 23fc094:	2101      	movs	r1, #1
 23fc096:	2006      	movs	r0, #6
 23fc098:	f002 fff1 	bl	23ff07e <digitalWrite>
    delay(200);                   // Simulate movement time
 23fc09c:	20c8      	movs	r0, #200	; 0xc8
 23fc09e:	f002 fa5f 	bl	23fe560 <delay>
    digitalWrite(LED2_PIN, LOW);  // Turn off LED2
}
 23fc0a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    digitalWrite(LED2_PIN, LOW);  // Turn off LED2
 23fc0a6:	2100      	movs	r1, #0
 23fc0a8:	2006      	movs	r0, #6
 23fc0aa:	f002 bfe8 	b.w	23ff07e <digitalWrite>
	...

023fc0b0 <_Z13analyzeBufferPhj>:
void analyzeBuffer(uint8_t *buf, size_t bufSize) {
    // Analyze raw audio data
    int16_t *audioData = (int16_t *)buf; // Assuming SIGNED_16 format
    size_t samples = bufSize / sizeof(int16_t);

    int energy = 0;
 23fc0b0:	2200      	movs	r2, #0
void analyzeBuffer(uint8_t *buf, size_t bufSize) {
 23fc0b2:	b510      	push	{r4, lr}
    size_t samples = bufSize / sizeof(int16_t);
 23fc0b4:	084c      	lsrs	r4, r1, #1

    for (size_t i = 0; i < samples; i++) {
 23fc0b6:	f021 0101 	bic.w	r1, r1, #1
 23fc0ba:	4401      	add	r1, r0
 23fc0bc:	4288      	cmp	r0, r1
 23fc0be:	d007      	beq.n	23fc0d0 <_Z13analyzeBufferPhj+0x20>
        energy += abs(audioData[i]);
 23fc0c0:	f930 3b02 	ldrsh.w	r3, [r0], #2
 23fc0c4:	2b00      	cmp	r3, #0
 23fc0c6:	bfb8      	it	lt
 23fc0c8:	425b      	neglt	r3, r3
 23fc0ca:	fa12 f283 	uxtah	r2, r2, r3
    for (size_t i = 0; i < samples; i++) {
 23fc0ce:	e7f5      	b.n	23fc0bc <_Z13analyzeBufferPhj+0xc>
    }

    energy /= samples; // Average energy
 23fc0d0:	fbb2 f4f4 	udiv	r4, r2, r4

    // Print energy level to the terminal
    Serial.printlnf("Energy Level: %d", energy); // Direct serial output
 23fc0d4:	f002 fbd4 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fc0d8:	4622      	mov	r2, r4
 23fc0da:	490a      	ldr	r1, [pc, #40]	; (23fc104 <_Z13analyzeBufferPhj+0x54>)
 23fc0dc:	f7ff ffc2 	bl	23fc064 <_ZN5Print8printlnfEPKcz>

    // Blink onboard LED to indicate activity
    digitalWrite(LED1_PIN, HIGH);
 23fc0e0:	2101      	movs	r1, #1
 23fc0e2:	2007      	movs	r0, #7
 23fc0e4:	f002 ffcb 	bl	23ff07e <digitalWrite>
    delay(50);
 23fc0e8:	2032      	movs	r0, #50	; 0x32
 23fc0ea:	f002 fa39 	bl	23fe560 <delay>
    digitalWrite(LED1_PIN, LOW);
 23fc0ee:	2100      	movs	r1, #0
 23fc0f0:	2007      	movs	r0, #7
 23fc0f2:	f002 ffc4 	bl	23ff07e <digitalWrite>

    if (energy > ENERGY_THRESHOLD) {
 23fc0f6:	2c32      	cmp	r4, #50	; 0x32
 23fc0f8:	d903      	bls.n	23fc102 <_Z13analyzeBufferPhj+0x52>
        simulateServoActions();
    }
}
 23fc0fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        simulateServoActions();
 23fc0fe:	f7ff bfc8 	b.w	23fc092 <_Z20simulateServoActionsv>
}
 23fc102:	bd10      	pop	{r4, pc}
 23fc104:	023ff9a5 	.word	0x023ff9a5

023fc108 <_Z13startSamplingv>:

void startSampling() {
    isRecording = true;
 23fc108:	2201      	movs	r2, #1
void startSampling() {
 23fc10a:	b530      	push	{r4, r5, lr}
    isRecording = true;
 23fc10c:	4b1f      	ldr	r3, [pc, #124]	; (23fc18c <_Z13startSamplingv+0x84>)
void startSampling() {
 23fc10e:	b08b      	sub	sp, #44	; 0x2c
    isRecording = true;
 23fc110:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fc112:	f000 fd15 	bl	23fcb40 <HAL_Timer_Get_Milli_Seconds>
    startTime = millis();
 23fc116:	4b1e      	ldr	r3, [pc, #120]	; (23fc190 <_Z13startSamplingv+0x88>)
 23fc118:	6018      	str	r0, [r3, #0]

    Microphone_PDM_BufferSampling *samplingBuffer = new Microphone_PDM_BufferSampling_wav();
 23fc11a:	202c      	movs	r0, #44	; 0x2c
 23fc11c:	f7ff fbbb 	bl	23fb896 <_Znwj>
 23fc120:	4604      	mov	r4, r0
 23fc122:	b108      	cbz	r0, 23fc128 <_Z13startSamplingv+0x20>
 23fc124:	f000 fc9e 	bl	23fca64 <_ZN33Microphone_PDM_BufferSampling_wavC1Ev>
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 23fc128:	4b1a      	ldr	r3, [pc, #104]	; (23fc194 <_Z13startSamplingv+0x8c>)
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc12a:	466d      	mov	r5, sp
 23fc12c:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 23fc12e:	4b1a      	ldr	r3, [pc, #104]	; (23fc198 <_Z13startSamplingv+0x90>)
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fc130:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
 23fc132:	9304      	str	r3, [sp, #16]
    _Function_base() : _M_manager(nullptr) { }
 23fc134:	2300      	movs	r3, #0
 23fc136:	9308      	str	r3, [sp, #32]
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fc138:	ab06      	add	r3, sp, #24
 23fc13a:	4618      	mov	r0, r3
 23fc13c:	2202      	movs	r2, #2
 23fc13e:	f7ff ff68 	bl	23fc012 <_ZNSt17_Function_handlerIFvPhjEZ13startSamplingvEUlS0_jE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
 23fc142:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fc146:	e885 0003 	stmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fc14a:	f104 0214 	add.w	r2, r4, #20
 23fc14e:	e892 0003 	ldmia.w	r2, {r0, r1}
 23fc152:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fc156:	e895 0003 	ldmia.w	r5, {r0, r1}
 23fc15a:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fc15e:	69e2      	ldr	r2, [r4, #28]
    class function<_Res(_ArgTypes...)>
 23fc160:	4618      	mov	r0, r3
 23fc162:	9208      	str	r2, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc164:	9a04      	ldr	r2, [sp, #16]
 23fc166:	61e2      	str	r2, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fc168:	6a22      	ldr	r2, [r4, #32]
 23fc16a:	9209      	str	r2, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
 23fc16c:	9a05      	ldr	r2, [sp, #20]
 23fc16e:	6222      	str	r2, [r4, #32]
 23fc170:	f7ff ff86 	bl	23fc080 <_ZNSt14_Function_baseD1Ev>
 23fc174:	a802      	add	r0, sp, #8
 23fc176:	f7ff ff83 	bl	23fc080 <_ZNSt14_Function_baseD1Ev>
            // Continue sampling
            startSampling();
        }
    });

    Microphone_PDM::instance().bufferSamplingStart(samplingBuffer);
 23fc17a:	f000 facd 	bl	23fc718 <_ZN14Microphone_PDM8instanceEv>
 23fc17e:	4621      	mov	r1, r4
}
 23fc180:	b00b      	add	sp, #44	; 0x2c
 23fc182:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Microphone_PDM::instance().bufferSamplingStart(samplingBuffer);
 23fc186:	f000 bb29 	b.w	23fc7dc <_ZN14Microphone_PDM19bufferSamplingStartEP29Microphone_PDM_BufferSampling>
 23fc18a:	bf00      	nop
 23fc18c:	1007ae2c 	.word	0x1007ae2c
 23fc190:	1007ae54 	.word	0x1007ae54
 23fc194:	023fc19d 	.word	0x023fc19d
 23fc198:	023fc013 	.word	0x023fc013

023fc19c <_ZNSt17_Function_handlerIFvPhjEZ13startSamplingvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fc19c:	b508      	push	{r3, lr}
 23fc19e:	460b      	mov	r3, r1
        analyzeBuffer(buf, bufSize);
 23fc1a0:	6811      	ldr	r1, [r2, #0]
 23fc1a2:	6818      	ldr	r0, [r3, #0]
 23fc1a4:	f7ff ff84 	bl	23fc0b0 <_Z13analyzeBufferPhj>
 23fc1a8:	f000 fcca 	bl	23fcb40 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - startTime >= RECORD_DURATION) {
 23fc1ac:	4b09      	ldr	r3, [pc, #36]	; (23fc1d4 <_ZNSt17_Function_handlerIFvPhjEZ13startSamplingvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x38>)
 23fc1ae:	681b      	ldr	r3, [r3, #0]
 23fc1b0:	1ac0      	subs	r0, r0, r3
 23fc1b2:	f644 631f 	movw	r3, #19999	; 0x4e1f
 23fc1b6:	4298      	cmp	r0, r3
 23fc1b8:	d908      	bls.n	23fc1cc <_ZNSt17_Function_handlerIFvPhjEZ13startSamplingvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x30>
            Serial.println("Recording complete.");
 23fc1ba:	f002 fb61 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fc1be:	4906      	ldr	r1, [pc, #24]	; (23fc1d8 <_ZNSt17_Function_handlerIFvPhjEZ13startSamplingvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x3c>)
 23fc1c0:	f001 f9af 	bl	23fd522 <_ZN5Print7printlnEPKc>
            isRecording = false;
 23fc1c4:	2200      	movs	r2, #0
 23fc1c6:	4b05      	ldr	r3, [pc, #20]	; (23fc1dc <_ZNSt17_Function_handlerIFvPhjEZ13startSamplingvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x40>)
 23fc1c8:	701a      	strb	r2, [r3, #0]
      }
 23fc1ca:	bd08      	pop	{r3, pc}
 23fc1cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            startSampling();
 23fc1d0:	f7ff bf9a 	b.w	23fc108 <_Z13startSamplingv>
 23fc1d4:	1007ae54 	.word	0x1007ae54
 23fc1d8:	023ff9b6 	.word	0x023ff9b6
 23fc1dc:	1007ae2c 	.word	0x1007ae2c

023fc1e0 <setup>:

void setup() {
 23fc1e0:	b510      	push	{r4, lr}
    pinMode(LED1_PIN, OUTPUT); // Initialize LEDs
 23fc1e2:	2101      	movs	r1, #1
 23fc1e4:	2007      	movs	r0, #7
 23fc1e6:	f002 ff39 	bl	23ff05c <pinMode>
    pinMode(LED2_PIN, OUTPUT);
 23fc1ea:	2101      	movs	r1, #1
 23fc1ec:	2006      	movs	r0, #6
 23fc1ee:	f002 ff35 	bl	23ff05c <pinMode>

    digitalWrite(LED1_PIN, LOW);
 23fc1f2:	2100      	movs	r1, #0
 23fc1f4:	2007      	movs	r0, #7
 23fc1f6:	f002 ff42 	bl	23ff07e <digitalWrite>
    digitalWrite(LED2_PIN, LOW);
 23fc1fa:	2100      	movs	r1, #0
 23fc1fc:	2006      	movs	r0, #6
 23fc1fe:	f002 ff3e 	bl	23ff07e <digitalWrite>

    Serial.begin(9600); // Initialize Serial
 23fc202:	f002 fb3d 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fc206:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fc20a:	f002 fb25 	bl	23fe858 <_ZN9USBSerial5beginEl>
    while (!Serial) {
 23fc20e:	f002 fb37 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fc212:	f002 fb2b 	bl	23fe86c <_ZN9USBSerialcvbEv>
 23fc216:	b918      	cbnz	r0, 23fc220 <setup+0x40>
        delay(10); // Wait for serial connection
 23fc218:	200a      	movs	r0, #10
 23fc21a:	f002 f9a1 	bl	23fe560 <delay>
    while (!Serial) {
 23fc21e:	e7f6      	b.n	23fc20e <setup+0x2e>
    }

    Serial.println("Starting Program...");
 23fc220:	f002 fb2e 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fc224:	4925      	ldr	r1, [pc, #148]	; (23fc2bc <setup+0xdc>)
 23fc226:	f001 f97c 	bl	23fd522 <_ZN5Print7printlnEPKc>

    int err = Microphone_PDM::instance()
 23fc22a:	f000 fa75 	bl	23fc718 <_ZN14Microphone_PDM8instanceEv>
	 * RANGE_32768 From -32768 to 32767 (16 bits) (same as raw mode)
	 *
	 * The range should be set based on the PDM microphone you are using. For the Adafruit microphone,
	 * the default value of RANGE_2048 (12-bit) is correct. 
	 */
	Microphone_PDM &withRange(Range range) { this->range = range; return *this; };
 23fc22e:	2101      	movs	r1, #1
 23fc230:	2204      	movs	r2, #4
 23fc232:	e9c0 1204 	strd	r1, r2, [r0, #16]
	 * @param sampleRate 8000, 16000, or 32000. The default is 16000.
	 * 
	 * This call can only be used on RTL827x (P2, Photon 2). It is ignored on nRF52.
	 * Setting an invalid value will use 16000.
	 */
	Microphone_PDM &withSampleRate(int sampleRate) { this->sampleRate = sampleRate; return *this; };
 23fc236:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
        .withOutputSize(Microphone_PDM::OutputSize::SIGNED_16)
        .withRange(Microphone_PDM::Range::RANGE_2048)
        .withSampleRate(16000)
        .init();
 23fc23a:	6803      	ldr	r3, [r0, #0]
 23fc23c:	60c2      	str	r2, [r0, #12]
 23fc23e:	68db      	ldr	r3, [r3, #12]
 23fc240:	4798      	blx	r3

    if (err) {
 23fc242:	4604      	mov	r4, r0
 23fc244:	b1a0      	cbz	r0, 23fc270 <setup+0x90>
        Serial.printlnf("PDM decoder init err=%d", err);
 23fc246:	f002 fb1b 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fc24a:	4622      	mov	r2, r4
 23fc24c:	491c      	ldr	r1, [pc, #112]	; (23fc2c0 <setup+0xe0>)
 23fc24e:	f7ff ff09 	bl	23fc064 <_ZN5Print8printlnfEPKcz>
        while (true) {
            digitalWrite(LED1_PIN, HIGH); // Blink rapidly to indicate error
 23fc252:	2101      	movs	r1, #1
 23fc254:	2007      	movs	r0, #7
 23fc256:	f002 ff12 	bl	23ff07e <digitalWrite>
            delay(100);
 23fc25a:	2064      	movs	r0, #100	; 0x64
 23fc25c:	f002 f980 	bl	23fe560 <delay>
            digitalWrite(LED1_PIN, LOW);
 23fc260:	2100      	movs	r1, #0
 23fc262:	2007      	movs	r0, #7
 23fc264:	f002 ff0b 	bl	23ff07e <digitalWrite>
            delay(100);
 23fc268:	2064      	movs	r0, #100	; 0x64
 23fc26a:	f002 f979 	bl	23fe560 <delay>
        while (true) {
 23fc26e:	e7f0      	b.n	23fc252 <setup+0x72>
        }
    }

    err = Microphone_PDM::instance().start();
 23fc270:	f000 fa52 	bl	23fc718 <_ZN14Microphone_PDM8instanceEv>
 23fc274:	6803      	ldr	r3, [r0, #0]
 23fc276:	695b      	ldr	r3, [r3, #20]
 23fc278:	4798      	blx	r3
    if (err) {
 23fc27a:	4604      	mov	r4, r0
 23fc27c:	b1a0      	cbz	r0, 23fc2a8 <setup+0xc8>
        Serial.printlnf("PDM decoder start err=%d", err);
 23fc27e:	f002 faff 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fc282:	4622      	mov	r2, r4
 23fc284:	490f      	ldr	r1, [pc, #60]	; (23fc2c4 <setup+0xe4>)
 23fc286:	f7ff feed 	bl	23fc064 <_ZN5Print8printlnfEPKcz>
        while (true) {
            digitalWrite(LED1_PIN, HIGH); // Blink rapidly to indicate error
 23fc28a:	2101      	movs	r1, #1
 23fc28c:	2007      	movs	r0, #7
 23fc28e:	f002 fef6 	bl	23ff07e <digitalWrite>
            delay(100);
 23fc292:	2064      	movs	r0, #100	; 0x64
 23fc294:	f002 f964 	bl	23fe560 <delay>
            digitalWrite(LED1_PIN, LOW);
 23fc298:	2100      	movs	r1, #0
 23fc29a:	2007      	movs	r0, #7
 23fc29c:	f002 feef 	bl	23ff07e <digitalWrite>
            delay(100);
 23fc2a0:	2064      	movs	r0, #100	; 0x64
 23fc2a2:	f002 f95d 	bl	23fe560 <delay>
        while (true) {
 23fc2a6:	e7f0      	b.n	23fc28a <setup+0xaa>
        }
    }

    Serial.println("Microphone initialized successfully.");
 23fc2a8:	f002 faea 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fc2ac:	4906      	ldr	r1, [pc, #24]	; (23fc2c8 <setup+0xe8>)
 23fc2ae:	f001 f938 	bl	23fd522 <_ZN5Print7printlnEPKc>
    startSampling();
}
 23fc2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    startSampling();
 23fc2b6:	f7ff bf27 	b.w	23fc108 <_Z13startSamplingv>
 23fc2ba:	bf00      	nop
 23fc2bc:	023ff9ca 	.word	0x023ff9ca
 23fc2c0:	023ff9de 	.word	0x023ff9de
 23fc2c4:	023ff9f6 	.word	0x023ff9f6
 23fc2c8:	023ffa0f 	.word	0x023ffa0f

023fc2cc <loop>:

void loop() {
 23fc2cc:	b508      	push	{r3, lr}
    if (isRecording) {
 23fc2ce:	4b0b      	ldr	r3, [pc, #44]	; (23fc2fc <loop+0x30>)
 23fc2d0:	781b      	ldrb	r3, [r3, #0]
 23fc2d2:	b18b      	cbz	r3, 23fc2f8 <loop+0x2c>
 23fc2d4:	f000 fc34 	bl	23fcb40 <HAL_Timer_Get_Milli_Seconds>
        // Indicate recording with blinking LED
        unsigned long currentTime = millis();
        if ((currentTime / 500) % 2 == 0) {
 23fc2d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 23fc2dc:	fbb0 f0f3 	udiv	r0, r0, r3
 23fc2e0:	07c3      	lsls	r3, r0, #31
 23fc2e2:	d409      	bmi.n	23fc2f8 <loop+0x2c>
            digitalWrite(LED1_PIN, HIGH);
 23fc2e4:	2101      	movs	r1, #1
        } else {
            digitalWrite(LED1_PIN, LOW);
 23fc2e6:	2007      	movs	r0, #7
 23fc2e8:	f002 fec9 	bl	23ff07e <digitalWrite>
    } else {
        digitalWrite(LED1_PIN, LOW); // Turn off LED when not recording
    }

    // Let Microphone_PDM handle its internal operations
    Microphone_PDM::instance().loop();
 23fc2ec:	f000 fa14 	bl	23fc718 <_ZN14Microphone_PDM8instanceEv>
}
 23fc2f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Microphone_PDM::instance().loop();
 23fc2f4:	f000 ba62 	b.w	23fc7bc <_ZN14Microphone_PDM4loopEv>
            digitalWrite(LED1_PIN, LOW);
 23fc2f8:	2100      	movs	r1, #0
 23fc2fa:	e7f4      	b.n	23fc2e6 <loop+0x1a>
 23fc2fc:	1007ae2c 	.word	0x1007ae2c

023fc300 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc300:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fc302:	2614      	movs	r6, #20
 23fc304:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc308:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc30a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fc30e:	42ae      	cmp	r6, r5
 23fc310:	d004      	beq.n	23fc31c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fc312:	4628      	mov	r0, r5
 23fc314:	f001 f80a 	bl	23fd32c <_ZN6StringD1Ev>
 23fc318:	3514      	adds	r5, #20
 23fc31a:	e7f8      	b.n	23fc30e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fc31c:	6820      	ldr	r0, [r4, #0]
 23fc31e:	f000 ff49 	bl	23fd1b4 <free>
    AllocatorT::free(data_);
}
 23fc322:	4620      	mov	r0, r4
 23fc324:	bd70      	pop	{r4, r5, r6, pc}

023fc326 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fc326:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fc328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc32a:	4604      	mov	r4, r0
 23fc32c:	460d      	mov	r5, r1
 23fc32e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fc330:	d916      	bls.n	23fc360 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fc332:	4290      	cmp	r0, r2
 23fc334:	d215      	bcs.n	23fc362 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fc336:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fc33a:	1a75      	subs	r5, r6, r1
 23fc33c:	f1a1 0714 	sub.w	r7, r1, #20
 23fc340:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fc342:	42b7      	cmp	r7, r6
 23fc344:	d01c      	beq.n	23fc380 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fc346:	b12c      	cbz	r4, 23fc354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fc348:	4631      	mov	r1, r6
 23fc34a:	4620      	mov	r0, r4
 23fc34c:	f001 f857 	bl	23fd3fe <_ZN6StringC1EOS_>
 23fc350:	7c33      	ldrb	r3, [r6, #16]
 23fc352:	7423      	strb	r3, [r4, #16]
 23fc354:	4630      	mov	r0, r6
 23fc356:	f000 ffe9 	bl	23fd32c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fc35a:	3e14      	subs	r6, #20
 23fc35c:	3c14      	subs	r4, #20
 23fc35e:	e7f0      	b.n	23fc342 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fc360:	d00e      	beq.n	23fc380 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fc362:	42b5      	cmp	r5, r6
 23fc364:	d00c      	beq.n	23fc380 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fc366:	b12c      	cbz	r4, 23fc374 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fc368:	4629      	mov	r1, r5
 23fc36a:	4620      	mov	r0, r4
 23fc36c:	f001 f847 	bl	23fd3fe <_ZN6StringC1EOS_>
 23fc370:	7c2b      	ldrb	r3, [r5, #16]
 23fc372:	7423      	strb	r3, [r4, #16]
 23fc374:	4628      	mov	r0, r5
 23fc376:	f000 ffd9 	bl	23fd32c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fc37a:	3514      	adds	r5, #20
 23fc37c:	3414      	adds	r4, #20
 23fc37e:	e7f0      	b.n	23fc362 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fc380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc382 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fc382:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fc388:	e9c0 3300 	strd	r3, r3, [r0]
 23fc38c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc38e:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc390:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc392:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc394:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc396:	dd24      	ble.n	23fc3e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fc398:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fc39c:	fb08 f007 	mul.w	r0, r8, r7
 23fc3a0:	f000 fefa 	bl	23fd198 <malloc>
            if (!d) {
 23fc3a4:	4605      	mov	r5, r0
 23fc3a6:	b1e0      	cbz	r0, 23fc3e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fc3a8:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fc3ac:	fb08 1202 	mla	r2, r8, r2, r1
 23fc3b0:	f7ff ffb9 	bl	23fc326 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fc3b4:	6820      	ldr	r0, [r4, #0]
 23fc3b6:	f000 fefd 	bl	23fd1b4 <free>
        data_ = d;
 23fc3ba:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fc3bc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fc3be:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fc3c2:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fc3c6:	45b8      	cmp	r8, r7
 23fc3c8:	d009      	beq.n	23fc3de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fc3ca:	4639      	mov	r1, r7
 23fc3cc:	4628      	mov	r0, r5
 23fc3ce:	f001 f830 	bl	23fd432 <_ZN6StringC1ERKS_>
 23fc3d2:	7c3b      	ldrb	r3, [r7, #16]
 23fc3d4:	3514      	adds	r5, #20
 23fc3d6:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fc3da:	3714      	adds	r7, #20
 23fc3dc:	e7f3      	b.n	23fc3c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fc3de:	6873      	ldr	r3, [r6, #4]
 23fc3e0:	6063      	str	r3, [r4, #4]
}
 23fc3e2:	4620      	mov	r0, r4
 23fc3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fc3e8 <_GLOBAL__sub_I_SystemMode>:
}
 23fc3e8:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fc3ea:	2400      	movs	r4, #0
 23fc3ec:	b08c      	sub	sp, #48	; 0x30
SYSTEM_THREAD(ENABLED);
 23fc3ee:	2100      	movs	r1, #0
 23fc3f0:	2001      	movs	r0, #1
 23fc3f2:	f000 fdd5 	bl	23fcfa0 <system_thread_set_state>
 23fc3f6:	4b21      	ldr	r3, [pc, #132]	; (23fc47c <_GLOBAL__sub_I_SystemMode+0x94>)
    SleepResult() {}
 23fc3f8:	4a21      	ldr	r2, [pc, #132]	; (23fc480 <_GLOBAL__sub_I_SystemMode+0x98>)
              error_(SYSTEM_ERROR_NONE) {
 23fc3fa:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23fc3fe:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fc400:	2002      	movs	r0, #2
 23fc402:	f000 fdb1 	bl	23fcf68 <set_system_mode>
        capacity_(0) {
 23fc406:	e9cd 4400 	strd	r4, r4, [sp]
 23fc40a:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fc40c:	f002 fa38 	bl	23fe880 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fc410:	4c1c      	ldr	r4, [pc, #112]	; (23fc484 <_GLOBAL__sub_I_SystemMode+0x9c>)
 23fc412:	4605      	mov	r5, r0
 23fc414:	4626      	mov	r6, r4
 23fc416:	4669      	mov	r1, sp
 23fc418:	a803      	add	r0, sp, #12
 23fc41a:	f7ff ffb2 	bl	23fc382 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23fc41e:	a903      	add	r1, sp, #12
 23fc420:	a806      	add	r0, sp, #24
 23fc422:	f7ff ffae 	bl	23fc382 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fc426:	4b18      	ldr	r3, [pc, #96]	; (23fc488 <_GLOBAL__sub_I_SystemMode+0xa0>)
 23fc428:	a906      	add	r1, sp, #24
 23fc42a:	f846 3b04 	str.w	r3, [r6], #4
 23fc42e:	a809      	add	r0, sp, #36	; 0x24
 23fc430:	f7ff ffa7 	bl	23fc382 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fc434:	aa09      	add	r2, sp, #36	; 0x24
 23fc436:	211e      	movs	r1, #30
 23fc438:	4630      	mov	r0, r6
 23fc43a:	f001 fd6f 	bl	23fdf1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fc43e:	a809      	add	r0, sp, #36	; 0x24
 23fc440:	f7ff ff5e 	bl	23fc300 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fc444:	a806      	add	r0, sp, #24
 23fc446:	f7ff ff5b 	bl	23fc300 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc44a:	4b10      	ldr	r3, [pc, #64]	; (23fc48c <_GLOBAL__sub_I_SystemMode+0xa4>)
 23fc44c:	6225      	str	r5, [r4, #32]
 23fc44e:	6023      	str	r3, [r4, #0]
 23fc450:	a803      	add	r0, sp, #12
 23fc452:	f7ff ff55 	bl	23fc300 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc456:	4b0e      	ldr	r3, [pc, #56]	; (23fc490 <_GLOBAL__sub_I_SystemMode+0xa8>)
 23fc458:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fc45a:	f002 fa11 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fc45e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fc462:	f002 f9f9 	bl	23fe858 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fc466:	f001 fa3d 	bl	23fd8e4 <_ZN5spark10LogManager8instanceEv>
 23fc46a:	4621      	mov	r1, r4
 23fc46c:	f001 fc2e 	bl	23fdccc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 23fc470:	4668      	mov	r0, sp
 23fc472:	f7ff ff45 	bl	23fc300 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fc476:	b00c      	add	sp, #48	; 0x30
 23fc478:	bd70      	pop	{r4, r5, r6, pc}
 23fc47a:	bf00      	nop
 23fc47c:	1007ae20 	.word	0x1007ae20
 23fc480:	ffff0000 	.word	0xffff0000
 23fc484:	1007ae30 	.word	0x1007ae30
 23fc488:	023ffa3c 	.word	0x023ffa3c
 23fc48c:	023ffc54 	.word	0x023ffc54
 23fc490:	023ffa54 	.word	0x023ffa54

023fc494 <_ZNK19Microphone_PDM_Base16copySrcIncrementEv>:
	virtual size_t copySrcIncrement() const { return 1; };
 23fc494:	2001      	movs	r0, #1
 23fc496:	4770      	bx	lr

023fc498 <_ZN22Microphone_PDM_RTL872x6uninitEv>:
	 * You normally will just initialize it once and only start and stop it as necessary, however
	 * you can completely uninitialize it if desired. The clkPin will be reset to INPUT mode.
	 */
	virtual int uninit() {
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
 23fc498:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fc49c:	4770      	bx	lr

023fc49e <_ZN22Microphone_PDM_RTL872xD1Ev>:

}

Microphone_PDM_RTL872x::~Microphone_PDM_RTL872x() {

}
 23fc49e:	4770      	bx	lr

023fc4a0 <_ZN22Microphone_PDM_RTL872x4stopEv>:
    running = true;
    return 0;
}

int Microphone_PDM_RTL872x::stop() {
    running = false;
 23fc4a0:	2300      	movs	r3, #0
 23fc4a2:	7703      	strb	r3, [r0, #28]
    return 0;
}
 23fc4a4:	4618      	mov	r0, r3
 23fc4a6:	4770      	bx	lr

023fc4a8 <_ZN22Microphone_PDM_RTL872xD0Ev>:
Microphone_PDM_RTL872x::~Microphone_PDM_RTL872x() {
 23fc4a8:	b510      	push	{r4, lr}
 23fc4aa:	4604      	mov	r4, r0
}
 23fc4ac:	2120      	movs	r1, #32
 23fc4ae:	f7ff f9f8 	bl	23fb8a2 <_ZdlPvj>
 23fc4b2:	4620      	mov	r0, r4
 23fc4b4:	bd10      	pop	{r4, pc}

023fc4b6 <_ZN22Microphone_PDM_RTL872x4initEv>:
int Microphone_PDM_RTL872x::init() {
 23fc4b6:	b508      	push	{r3, lr}
    switch(sampleRate) {
 23fc4b8:	68c3      	ldr	r3, [r0, #12]
 23fc4ba:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 23fc4be:	d008      	beq.n	23fc4d2 <_ZN22Microphone_PDM_RTL872x4initEv+0x1c>
 23fc4c0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 23fc4c4:	d005      	beq.n	23fc4d2 <_ZN22Microphone_PDM_RTL872x4initEv+0x1c>
 23fc4c6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
            sampleRate = 16000;
 23fc4ca:	bf1c      	itt	ne
 23fc4cc:	f44f 537a 	movne.w	r3, #16000	; 0x3e80
 23fc4d0:	60c3      	strne	r3, [r0, #12]
    dmic_setup(sampleRate, stereoMode);
 23fc4d2:	7a01      	ldrb	r1, [r0, #8]
 23fc4d4:	68c0      	ldr	r0, [r0, #12]
 23fc4d6:	f7ff faad 	bl	23fba34 <dmic_setup>
}
 23fc4da:	2000      	movs	r0, #0
 23fc4dc:	bd08      	pop	{r3, pc}

023fc4de <_ZN22Microphone_PDM_RTL872x5startEv>:
int Microphone_PDM_RTL872x::start() {
 23fc4de:	b510      	push	{r4, lr}
 23fc4e0:	4604      	mov	r4, r0
    dmic_flush();
 23fc4e2:	f7ff fb41 	bl	23fbb68 <dmic_flush>
    running = true;
 23fc4e6:	2301      	movs	r3, #1
}
 23fc4e8:	2000      	movs	r0, #0
    running = true;
 23fc4ea:	7723      	strb	r3, [r4, #28]
}
 23fc4ec:	bd10      	pop	{r4, pc}

023fc4ee <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv>:
 


bool Microphone_PDM_RTL872x::samplesAvailable() const {
 23fc4ee:	b508      	push	{r3, lr}
    if (!running) {
 23fc4f0:	7f00      	ldrb	r0, [r0, #28]
 23fc4f2:	b120      	cbz	r0, 23fc4fe <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv+0x10>
        return false;
    }

	return (dmic_ready() != NULL);
 23fc4f4:	f7ff fb42 	bl	23fbb7c <dmic_ready>
 23fc4f8:	3800      	subs	r0, #0
 23fc4fa:	bf18      	it	ne
 23fc4fc:	2001      	movne	r0, #1
}
 23fc4fe:	bd08      	pop	{r3, pc}

023fc500 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv>:

bool Microphone_PDM_RTL872x::copySamples(void*pSamples) {
 23fc500:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!running) {
 23fc502:	7f05      	ldrb	r5, [r0, #28]
bool Microphone_PDM_RTL872x::copySamples(void*pSamples) {
 23fc504:	4604      	mov	r4, r0
    if (!running) {
 23fc506:	b91d      	cbnz	r5, 23fc510 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0x10>
        return false;
 23fc508:	2500      	movs	r5, #0
		return true;
	}
	else {
		return false;
	}
}
 23fc50a:	4628      	mov	r0, r5
 23fc50c:	b003      	add	sp, #12
 23fc50e:	bd30      	pop	{r4, r5, pc}
 23fc510:	9101      	str	r1, [sp, #4]
    int16_t *src = (int16_t *)dmic_ready();
 23fc512:	f7ff fb33 	bl	23fbb7c <dmic_ready>
	if (src) {
 23fc516:	4601      	mov	r1, r0
 23fc518:	2800      	cmp	r0, #0
 23fc51a:	d0f5      	beq.n	23fc508 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0x8>
		copySamplesInternal(src, (uint8_t *)pSamples);
 23fc51c:	4620      	mov	r0, r4
 23fc51e:	9a01      	ldr	r2, [sp, #4]
 23fc520:	f000 f96e 	bl	23fc800 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
        dmic_read(NULL, 0);
 23fc524:	2100      	movs	r1, #0
 23fc526:	4608      	mov	r0, r1
 23fc528:	f7ff fb2a 	bl	23fbb80 <dmic_read>
		return true;
 23fc52c:	e7ed      	b.n	23fc50a <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0xa>

023fc52e <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE>:

bool Microphone_PDM_RTL872x::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23fc52e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (!running) {
 23fc530:	7f07      	ldrb	r7, [r0, #28]
bool Microphone_PDM_RTL872x::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23fc532:	4606      	mov	r6, r0
 23fc534:	460d      	mov	r5, r1
    if (!running) {
 23fc536:	b91f      	cbnz	r7, 23fc540 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0x12>
        return false;
 23fc538:	2700      	movs	r7, #0
		return true;
	}
	else {
		return false;
	}
}
 23fc53a:	4638      	mov	r0, r7
 23fc53c:	b003      	add	sp, #12
 23fc53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t *src = (int16_t *)dmic_ready();
 23fc540:	f7ff fb1c 	bl	23fbb7c <dmic_ready>
	if (src) {
 23fc544:	4604      	mov	r4, r0
 23fc546:	2800      	cmp	r0, #0
 23fc548:	d0f6      	beq.n	23fc538 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0xa>
		copySamplesInternal(src, (uint8_t *)src);
 23fc54a:	4602      	mov	r2, r0
 23fc54c:	4601      	mov	r1, r0
 23fc54e:	4630      	mov	r0, r6
 23fc550:	f000 f956 	bl	23fc800 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
		callback(src, BUFFER_SIZE_SAMPLES);
 23fc554:	f44f 7380 	mov.w	r3, #256	; 0x100
 23fc558:	9301      	str	r3, [sp, #4]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fc55a:	68ab      	ldr	r3, [r5, #8]
 23fc55c:	9400      	str	r4, [sp, #0]
 23fc55e:	b90b      	cbnz	r3, 23fc564 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0x36>
	__throw_bad_function_call();
 23fc560:	f003 f848 	bl	23ff5f4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fc564:	4669      	mov	r1, sp
 23fc566:	4628      	mov	r0, r5
 23fc568:	68eb      	ldr	r3, [r5, #12]
 23fc56a:	aa01      	add	r2, sp, #4
 23fc56c:	4798      	blx	r3
        dmic_read(NULL, 0);
 23fc56e:	2100      	movs	r1, #0
 23fc570:	4608      	mov	r0, r1
 23fc572:	f7ff fb05 	bl	23fbb80 <dmic_read>
		return true;
 23fc576:	e7e0      	b.n	23fc53a <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0xc>

023fc578 <_ZN22Microphone_PDM_RTL872xC1Ev>:
	Microphone_PDM_Base(size_t numSamples) : numSamples(numSamples) {};
 23fc578:	f04f 0c01 	mov.w	ip, #1
 23fc57c:	2104      	movs	r1, #4
 23fc57e:	4a06      	ldr	r2, [pc, #24]	; (23fc598 <_ZN22Microphone_PDM_RTL872xC1Ev+0x20>)
 23fc580:	e9c0 c104 	strd	ip, r1, [r0, #16]
 23fc584:	f44f 7180 	mov.w	r1, #256	; 0x100
 23fc588:	6042      	str	r2, [r0, #4]
 23fc58a:	2200      	movs	r2, #0
 23fc58c:	6181      	str	r1, [r0, #24]
Microphone_PDM_RTL872x::Microphone_PDM_RTL872x() : Microphone_PDM_Base(BUFFER_SIZE_SAMPLES) {
 23fc58e:	4903      	ldr	r1, [pc, #12]	; (23fc59c <_ZN22Microphone_PDM_RTL872xC1Ev+0x24>)
 23fc590:	7202      	strb	r2, [r0, #8]
 23fc592:	6001      	str	r1, [r0, #0]
 23fc594:	7702      	strb	r2, [r0, #28]
}
 23fc596:	4770      	bx	lr
 23fc598:	000c000b 	.word	0x000c000b
 23fc59c:	023ffa6c 	.word	0x023ffa6c

023fc5a0 <_ZN29Microphone_PDM_BufferSampling13preCompletionEv>:
	virtual void preCompletion() {};
 23fc5a0:	4770      	bx	lr

023fc5a2 <_ZN14Microphone_PDM6uninitEv>:
	 * Releases the resources used by the PDM module, though the 2K RAM buffer is statically 
	 * allocated on the heap and is not freed.
	 */
	int uninit() {
		return Microphone_PDM_MCU::uninit();
	}
 23fc5a2:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fc5a6:	4770      	bx	lr

023fc5a8 <_ZNK29Microphone_PDM_BufferSampling4doneEv>:
		});

	}
}
bool Microphone_PDM_BufferSampling::done() const {
	return buffer && offset >= bufferSize;
 23fc5a8:	6843      	ldr	r3, [r0, #4]
 23fc5aa:	b133      	cbz	r3, 23fc5ba <_ZNK29Microphone_PDM_BufferSampling4doneEv+0x12>
 23fc5ac:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
 23fc5b0:	4283      	cmp	r3, r0
 23fc5b2:	bf34      	ite	cc
 23fc5b4:	2000      	movcc	r0, #0
 23fc5b6:	2001      	movcs	r0, #1
 23fc5b8:	4770      	bx	lr
 23fc5ba:	4618      	mov	r0, r3
}
 23fc5bc:	4770      	bx	lr

023fc5be <_ZN14Microphone_PDM4initEv>:
		return Microphone_PDM_MCU::init();
 23fc5be:	f7ff bf7a 	b.w	23fc4b6 <_ZN22Microphone_PDM_RTL872x4initEv>

023fc5c2 <_ZN14Microphone_PDM5startEv>:

	/**
	 * @brief Start sampling
	 */
	int start() {
		return Microphone_PDM_MCU::start();
 23fc5c2:	f7ff bf8c 	b.w	23fc4de <_ZN22Microphone_PDM_RTL872x5startEv>

023fc5c6 <_ZN14Microphone_PDM4stopEv>:
	 * On the RTL872x (P2, Photon 2), it's not actually possible to stop sampling once you
	 * start it. Calling stop() will discard the data and samplesAvailable(), copySamples(),
	 * etc. will behave as if the DMA had been stopped.
	 */
	int stop() {
		return Microphone_PDM_MCU::stop();
 23fc5c6:	f7ff bf6b 	b.w	23fc4a0 <_ZN22Microphone_PDM_RTL872x4stopEv>

023fc5ca <_ZNK14Microphone_PDM16samplesAvailableEv>:
	 * 
	 * @return true 
	 * @return false 
	 */
	bool samplesAvailable() const {
		return Microphone_PDM_MCU::samplesAvailable();
 23fc5ca:	f7ff bf90 	b.w	23fc4ee <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv>

023fc5ce <_ZN14Microphone_PDM11copySamplesEPv>:
	 * 
	 * You can skip calling samplesAvailable() and just call copySamples which will return false in the same cases
	 * where samplesAvailable() would have returned false.
	 */
	bool copySamples(void*pSamples) {
		return Microphone_PDM_MCU::copySamples(pSamples);
 23fc5ce:	f7ff bf97 	b.w	23fc500 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv>
	...

023fc5d4 <_ZN18Microphone_PDM_MCUD1Ev>:
 * @brief Microphone_PDM_MCU is an alias for the MCU-specific class like Microphone_PDM_RTL872x
 * 
 * This class exists so the subclass Microphone_PDM can just reference Microphone_PDM_MCU
 * as its superclass regardless of which class is actually used.
 */
class Microphone_PDM_MCU : public Microphone_PDM_RTL872x {
 23fc5d4:	b510      	push	{r4, lr}
 23fc5d6:	4604      	mov	r4, r0
 23fc5d8:	4b02      	ldr	r3, [pc, #8]	; (23fc5e4 <_ZN18Microphone_PDM_MCUD1Ev+0x10>)
 23fc5da:	6003      	str	r3, [r0, #0]
 23fc5dc:	f7ff ff5f 	bl	23fc49e <_ZN22Microphone_PDM_RTL872xD1Ev>
 23fc5e0:	4620      	mov	r0, r4
 23fc5e2:	bd10      	pop	{r4, pc}
 23fc5e4:	023ffa9c 	.word	0x023ffa9c

023fc5e8 <_ZN18Microphone_PDM_MCUD0Ev>:
 23fc5e8:	b510      	push	{r4, lr}
 23fc5ea:	4604      	mov	r4, r0
 23fc5ec:	f7ff fff2 	bl	23fc5d4 <_ZN18Microphone_PDM_MCUD1Ev>
 23fc5f0:	4620      	mov	r0, r4
 23fc5f2:	2120      	movs	r1, #32
 23fc5f4:	f7ff f955 	bl	23fb8a2 <_ZdlPvj>
 23fc5f8:	4620      	mov	r0, r4
 23fc5fa:	bd10      	pop	{r4, pc}

023fc5fc <_ZN14Microphone_PDMD1Ev>:
Microphone_PDM::~Microphone_PDM() {
 23fc5fc:	b510      	push	{r4, lr}
 23fc5fe:	4604      	mov	r4, r0
 23fc600:	4b02      	ldr	r3, [pc, #8]	; (23fc60c <_ZN14Microphone_PDMD1Ev+0x10>)
 23fc602:	6003      	str	r3, [r0, #0]
 23fc604:	f7ff ffe6 	bl	23fc5d4 <_ZN18Microphone_PDM_MCUD1Ev>
}
 23fc608:	4620      	mov	r0, r4
 23fc60a:	bd10      	pop	{r4, pc}
 23fc60c:	023ffacc 	.word	0x023ffacc

023fc610 <_ZN14Microphone_PDMD0Ev>:
Microphone_PDM::~Microphone_PDM() {
 23fc610:	b510      	push	{r4, lr}
 23fc612:	4604      	mov	r4, r0
}
 23fc614:	f7ff fff2 	bl	23fc5fc <_ZN14Microphone_PDMD1Ev>
 23fc618:	4620      	mov	r0, r4
 23fc61a:	2124      	movs	r1, #36	; 0x24
 23fc61c:	f7ff f941 	bl	23fb8a2 <_ZdlPvj>
 23fc620:	4620      	mov	r0, r4
 23fc622:	bd10      	pop	{r4, pc}

023fc624 <_ZNSt17_Function_handlerIFvPvjEZN29Microphone_PDM_BufferSampling4loopEvEUlS0_jE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
 23fc624:	2a01      	cmp	r2, #1
 23fc626:	d102      	bne.n	23fc62e <_ZNSt17_Function_handlerIFvPvjEZN29Microphone_PDM_BufferSampling4loopEvEUlS0_jE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fc628:	6001      	str	r1, [r0, #0]
      }
 23fc62a:	2000      	movs	r0, #0
 23fc62c:	4770      	bx	lr
	  switch (__op)
 23fc62e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23fc630:	bf04      	itt	eq
 23fc632:	680b      	ldreq	r3, [r1, #0]
 23fc634:	6003      	streq	r3, [r0, #0]
	      break;
 23fc636:	e7f8      	b.n	23fc62a <_ZNSt17_Function_handlerIFvPvjEZN29Microphone_PDM_BufferSampling4loopEvEUlS0_jE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

023fc638 <_ZNSt17_Function_handlerIFvPvjEZN29Microphone_PDM_BufferSampling4loopEvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fc638:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fc63a:	4604      	mov	r4, r0
		Microphone_PDM::instance().noCopySamples([this](void *pSamples, size_t numSamples) {
 23fc63c:	6803      	ldr	r3, [r0, #0]
			size_t bytesToCopy = sampleSizeInBytes * numSamples;
 23fc63e:	6815      	ldr	r5, [r2, #0]
 23fc640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 23fc642:	6809      	ldr	r1, [r1, #0]
 23fc644:	4355      	muls	r5, r2
			if ((offset + bytesToCopy) > bufferSize) {
 23fc646:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
 23fc64a:	182e      	adds	r6, r5, r0
 23fc64c:	4296      	cmp	r6, r2
			memcpy(&buffer[offset], pSamples, bytesToCopy);
 23fc64e:	685b      	ldr	r3, [r3, #4]
				bytesToCopy = bufferSize - offset;
 23fc650:	bf88      	it	hi
 23fc652:	1a15      	subhi	r5, r2, r0
			memcpy(&buffer[offset], pSamples, bytesToCopy);
 23fc654:	462a      	mov	r2, r5
 23fc656:	4418      	add	r0, r3
 23fc658:	f002 ffde 	bl	23ff618 <memcpy>
		Microphone_PDM::instance().noCopySamples([this](void *pSamples, size_t numSamples) {
 23fc65c:	6822      	ldr	r2, [r4, #0]
			offset += bytesToCopy;
 23fc65e:	6893      	ldr	r3, [r2, #8]
 23fc660:	442b      	add	r3, r5
 23fc662:	6093      	str	r3, [r2, #8]
		Microphone_PDM::instance().noCopySamples([this](void *pSamples, size_t numSamples) {
 23fc664:	6820      	ldr	r0, [r4, #0]
			if (offset >= bufferSize && completionCallback) {
 23fc666:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 23fc66a:	429a      	cmp	r2, r3
 23fc66c:	d312      	bcc.n	23fc694 <_ZNSt17_Function_handlerIFvPvjEZN29Microphone_PDM_BufferSampling4loopEvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x5c>
 23fc66e:	69c3      	ldr	r3, [r0, #28]
 23fc670:	b183      	cbz	r3, 23fc694 <_ZNSt17_Function_handlerIFvPvjEZN29Microphone_PDM_BufferSampling4loopEvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x5c>
				preCompletion();
 23fc672:	6803      	ldr	r3, [r0, #0]
 23fc674:	695b      	ldr	r3, [r3, #20]
 23fc676:	4798      	blx	r3
		Microphone_PDM::instance().noCopySamples([this](void *pSamples, size_t numSamples) {
 23fc678:	6820      	ldr	r0, [r4, #0]
				completionCallback(buffer, bufferSize);
 23fc67a:	68c3      	ldr	r3, [r0, #12]
 23fc67c:	6842      	ldr	r2, [r0, #4]
 23fc67e:	e9cd 2300 	strd	r2, r3, [sp]
      if (_M_empty())
 23fc682:	69c3      	ldr	r3, [r0, #28]
 23fc684:	b90b      	cbnz	r3, 23fc68a <_ZNSt17_Function_handlerIFvPvjEZN29Microphone_PDM_BufferSampling4loopEvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x52>
	__throw_bad_function_call();
 23fc686:	f002 ffb5 	bl	23ff5f4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fc68a:	6a03      	ldr	r3, [r0, #32]
 23fc68c:	4669      	mov	r1, sp
 23fc68e:	aa01      	add	r2, sp, #4
 23fc690:	3014      	adds	r0, #20
 23fc692:	4798      	blx	r3
      }
 23fc694:	b002      	add	sp, #8
 23fc696:	bd70      	pop	{r4, r5, r6, pc}

023fc698 <_ZN29Microphone_PDM_BufferSamplingD1Ev>:
Microphone_PDM_BufferSampling::~Microphone_PDM_BufferSampling() {
 23fc698:	b510      	push	{r4, lr}
 23fc69a:	4b06      	ldr	r3, [pc, #24]	; (23fc6b4 <_ZN29Microphone_PDM_BufferSamplingD1Ev+0x1c>)
 23fc69c:	4604      	mov	r4, r0
 23fc69e:	6003      	str	r3, [r0, #0]
	if (buffer) {
 23fc6a0:	6840      	ldr	r0, [r0, #4]
 23fc6a2:	b108      	cbz	r0, 23fc6a8 <_ZN29Microphone_PDM_BufferSamplingD1Ev+0x10>
		delete[] buffer;		
 23fc6a4:	f7ff f8fb 	bl	23fb89e <_ZdaPv>
    class function<_Res(_ArgTypes...)>
 23fc6a8:	f104 0014 	add.w	r0, r4, #20
 23fc6ac:	f7ff fce8 	bl	23fc080 <_ZNSt14_Function_baseD1Ev>
}
 23fc6b0:	4620      	mov	r0, r4
 23fc6b2:	bd10      	pop	{r4, pc}
 23fc6b4:	023ffafc 	.word	0x023ffafc

023fc6b8 <_ZN29Microphone_PDM_BufferSamplingD0Ev>:
Microphone_PDM_BufferSampling::~Microphone_PDM_BufferSampling() {
 23fc6b8:	b510      	push	{r4, lr}
 23fc6ba:	4604      	mov	r4, r0
}
 23fc6bc:	f7ff ffec 	bl	23fc698 <_ZN29Microphone_PDM_BufferSamplingD1Ev>
 23fc6c0:	4620      	mov	r0, r4
 23fc6c2:	212c      	movs	r1, #44	; 0x2c
 23fc6c4:	f7ff f8ed 	bl	23fb8a2 <_ZdlPvj>
 23fc6c8:	4620      	mov	r0, r4
 23fc6ca:	bd10      	pop	{r4, pc}

023fc6cc <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE>:
    _Function_base() : _M_manager(nullptr) { }
 23fc6cc:	2300      	movs	r3, #0
	 * of data. The number of bytes will vary depending on the outputSize. 
	 * 
	 * You can skip calling samplesAvailable() and just call noCopySamples which will return false in the same cases
	 * where samplesAvailable() would have returned false.
	 */
	bool noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23fc6ce:	b530      	push	{r4, r5, lr}
 23fc6d0:	b085      	sub	sp, #20
 23fc6d2:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
 23fc6d4:	688b      	ldr	r3, [r1, #8]
 23fc6d6:	4605      	mov	r5, r0
 23fc6d8:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
 23fc6da:	b133      	cbz	r3, 23fc6ea <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fc6dc:	2202      	movs	r2, #2
 23fc6de:	4668      	mov	r0, sp
 23fc6e0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fc6e2:	68e3      	ldr	r3, [r4, #12]
 23fc6e4:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 23fc6e6:	68a3      	ldr	r3, [r4, #8]
 23fc6e8:	9302      	str	r3, [sp, #8]
		return Microphone_PDM_MCU::noCopySamples(callback);
 23fc6ea:	4669      	mov	r1, sp
 23fc6ec:	4628      	mov	r0, r5
 23fc6ee:	f7ff ff1e 	bl	23fc52e <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE>
 23fc6f2:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23fc6f4:	4668      	mov	r0, sp
 23fc6f6:	f7ff fcc3 	bl	23fc080 <_ZNSt14_Function_baseD1Ev>
	}
 23fc6fa:	4620      	mov	r0, r4
 23fc6fc:	b005      	add	sp, #20
 23fc6fe:	bd30      	pop	{r4, r5, pc}

023fc700 <_ZN14Microphone_PDMC1Ev>:
Microphone_PDM::Microphone_PDM() {
 23fc700:	b510      	push	{r4, lr}
 23fc702:	4604      	mov	r4, r0
 23fc704:	f7ff ff38 	bl	23fc578 <_ZN22Microphone_PDM_RTL872xC1Ev>
 23fc708:	4b02      	ldr	r3, [pc, #8]	; (23fc714 <_ZN14Microphone_PDMC1Ev+0x14>)
}
 23fc70a:	4620      	mov	r0, r4
Microphone_PDM::Microphone_PDM() {
 23fc70c:	6023      	str	r3, [r4, #0]
 23fc70e:	2300      	movs	r3, #0
 23fc710:	6223      	str	r3, [r4, #32]
}
 23fc712:	bd10      	pop	{r4, pc}
 23fc714:	023ffacc 	.word	0x023ffacc

023fc718 <_ZN14Microphone_PDM8instanceEv>:
Microphone_PDM &Microphone_PDM::instance() {
 23fc718:	b538      	push	{r3, r4, r5, lr}
	if (!_instance) {
 23fc71a:	4d06      	ldr	r5, [pc, #24]	; (23fc734 <_ZN14Microphone_PDM8instanceEv+0x1c>)
 23fc71c:	682b      	ldr	r3, [r5, #0]
 23fc71e:	b93b      	cbnz	r3, 23fc730 <_ZN14Microphone_PDM8instanceEv+0x18>
		_instance = new Microphone_PDM();
 23fc720:	2024      	movs	r0, #36	; 0x24
 23fc722:	f7ff f8b8 	bl	23fb896 <_Znwj>
 23fc726:	4604      	mov	r4, r0
 23fc728:	b108      	cbz	r0, 23fc72e <_ZN14Microphone_PDM8instanceEv+0x16>
 23fc72a:	f7ff ffe9 	bl	23fc700 <_ZN14Microphone_PDMC1Ev>
 23fc72e:	602c      	str	r4, [r5, #0]
}
 23fc730:	6828      	ldr	r0, [r5, #0]
 23fc732:	bd38      	pop	{r3, r4, r5, pc}
 23fc734:	1007ae58 	.word	0x1007ae58

023fc738 <_ZN29Microphone_PDM_BufferSampling4loopEv>:
void Microphone_PDM_BufferSampling::loop() {
 23fc738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (buffer && offset < bufferSize && Microphone_PDM::instance().samplesAvailable()) {
 23fc73a:	6843      	ldr	r3, [r0, #4]
void Microphone_PDM_BufferSampling::loop() {
 23fc73c:	4604      	mov	r4, r0
	if (buffer && offset < bufferSize && Microphone_PDM::instance().samplesAvailable()) {
 23fc73e:	b1bb      	cbz	r3, 23fc770 <_ZN29Microphone_PDM_BufferSampling4loopEv+0x38>
 23fc740:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 23fc744:	429a      	cmp	r2, r3
 23fc746:	d213      	bcs.n	23fc770 <_ZN29Microphone_PDM_BufferSampling4loopEv+0x38>
 23fc748:	f7ff ffe6 	bl	23fc718 <_ZN14Microphone_PDM8instanceEv>
 23fc74c:	6803      	ldr	r3, [r0, #0]
 23fc74e:	69db      	ldr	r3, [r3, #28]
 23fc750:	4798      	blx	r3
 23fc752:	b168      	cbz	r0, 23fc770 <_ZN29Microphone_PDM_BufferSampling4loopEv+0x38>
		Microphone_PDM::instance().noCopySamples([this](void *pSamples, size_t numSamples) {
 23fc754:	f7ff ffe0 	bl	23fc718 <_ZN14Microphone_PDM8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
 23fc758:	4a06      	ldr	r2, [pc, #24]	; (23fc774 <_ZN29Microphone_PDM_BufferSampling4loopEv+0x3c>)
		});
 23fc75a:	6803      	ldr	r3, [r0, #0]
 23fc75c:	9203      	str	r2, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fc75e:	4a06      	ldr	r2, [pc, #24]	; (23fc778 <_ZN29Microphone_PDM_BufferSampling4loopEv+0x40>)
		Microphone_PDM::instance().noCopySamples([this](void *pSamples, size_t numSamples) {
 23fc760:	4669      	mov	r1, sp
		});
 23fc762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23fc764:	9400      	str	r4, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
 23fc766:	9202      	str	r2, [sp, #8]
		Microphone_PDM::instance().noCopySamples([this](void *pSamples, size_t numSamples) {
 23fc768:	4798      	blx	r3
    class function<_Res(_ArgTypes...)>
 23fc76a:	4668      	mov	r0, sp
 23fc76c:	f7ff fc88 	bl	23fc080 <_ZNSt14_Function_baseD1Ev>
}
 23fc770:	b004      	add	sp, #16
 23fc772:	bd10      	pop	{r4, pc}
 23fc774:	023fc639 	.word	0x023fc639
 23fc778:	023fc625 	.word	0x023fc625

023fc77c <_ZN29Microphone_PDM_BufferSampling5startEv>:
bool Microphone_PDM_BufferSampling::start() {
 23fc77c:	b538      	push	{r3, r4, r5, lr}
 23fc77e:	4604      	mov	r4, r0
	sampleSizeInBytes = Microphone_PDM::instance().getSampleSizeInBytes();
 23fc780:	f7ff ffca 	bl	23fc718 <_ZN14Microphone_PDM8instanceEv>
	switch(outputSize) {
 23fc784:	6903      	ldr	r3, [r0, #16]
	offset = reserveHeaderSize;
 23fc786:	6a65      	ldr	r5, [r4, #36]	; 0x24
			return 2;
 23fc788:	2b00      	cmp	r3, #0
 23fc78a:	bf0c      	ite	eq
 23fc78c:	2301      	moveq	r3, #1
 23fc78e:	2302      	movne	r3, #2
	offset = reserveHeaderSize;
 23fc790:	60a5      	str	r5, [r4, #8]
	sampleSizeInBytes = Microphone_PDM::instance().getSampleSizeInBytes();
 23fc792:	62a3      	str	r3, [r4, #40]	; 0x28
	bufferSize = reserveHeaderSize + (Microphone_PDM::instance().getSampleRate() / 1000 * durationMs) * sampleSizeInBytes;
 23fc794:	f7ff ffc0 	bl	23fc718 <_ZN14Microphone_PDM8instanceEv>
 23fc798:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 23fc79a:	6923      	ldr	r3, [r4, #16]
 23fc79c:	68c0      	ldr	r0, [r0, #12]
 23fc79e:	4353      	muls	r3, r2
 23fc7a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23fc7a4:	fb90 f0f2 	sdiv	r0, r0, r2
 23fc7a8:	fb00 5003 	mla	r0, r0, r3, r5
 23fc7ac:	60e0      	str	r0, [r4, #12]
	buffer = new uint8_t[bufferSize];
 23fc7ae:	f7ff f874 	bl	23fb89a <_Znaj>
 23fc7b2:	6060      	str	r0, [r4, #4]
}
 23fc7b4:	3800      	subs	r0, #0
 23fc7b6:	bf18      	it	ne
 23fc7b8:	2001      	movne	r0, #1
 23fc7ba:	bd38      	pop	{r3, r4, r5, pc}

023fc7bc <_ZN14Microphone_PDM4loopEv>:
	if (sampling) {
 23fc7bc:	6a00      	ldr	r0, [r0, #32]
 23fc7be:	b110      	cbz	r0, 23fc7c6 <_ZN14Microphone_PDM4loopEv+0xa>
		sampling->loop();
 23fc7c0:	6803      	ldr	r3, [r0, #0]
 23fc7c2:	68db      	ldr	r3, [r3, #12]
 23fc7c4:	4718      	bx	r3
}
 23fc7c6:	4770      	bx	lr

023fc7c8 <_ZN14Microphone_PDM21releaseBufferSamplingEv>:
void Microphone_PDM::releaseBufferSampling() {
 23fc7c8:	b510      	push	{r4, lr}
 23fc7ca:	4604      	mov	r4, r0
	if (sampling) {
 23fc7cc:	6a00      	ldr	r0, [r0, #32]
 23fc7ce:	b110      	cbz	r0, 23fc7d6 <_ZN14Microphone_PDM21releaseBufferSamplingEv+0xe>
		delete sampling;
 23fc7d0:	6803      	ldr	r3, [r0, #0]
 23fc7d2:	685b      	ldr	r3, [r3, #4]
 23fc7d4:	4798      	blx	r3
	sampling = NULL;
 23fc7d6:	2300      	movs	r3, #0
 23fc7d8:	6223      	str	r3, [r4, #32]
}
 23fc7da:	bd10      	pop	{r4, pc}

023fc7dc <_ZN14Microphone_PDM19bufferSamplingStartEP29Microphone_PDM_BufferSampling>:
bool Microphone_PDM::bufferSamplingStart(Microphone_PDM_BufferSampling *sampling) {
 23fc7dc:	b570      	push	{r4, r5, r6, lr}
 23fc7de:	460c      	mov	r4, r1
 23fc7e0:	4605      	mov	r5, r0
	releaseBufferSampling();
 23fc7e2:	f7ff fff1 	bl	23fc7c8 <_ZN14Microphone_PDM21releaseBufferSamplingEv>
	this->sampling = sampling;
 23fc7e6:	622c      	str	r4, [r5, #32]
	return sampling->start();
 23fc7e8:	6823      	ldr	r3, [r4, #0]
 23fc7ea:	4620      	mov	r0, r4
}
 23fc7ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return sampling->start();
 23fc7f0:	689b      	ldr	r3, [r3, #8]
 23fc7f2:	4718      	bx	r3

023fc7f4 <_ZNK14Microphone_PDM20getSampleSizeInBytesEv>:
	switch(outputSize) {
 23fc7f4:	6903      	ldr	r3, [r0, #16]
			return 2;
 23fc7f6:	2b00      	cmp	r3, #0
}
 23fc7f8:	bf0c      	ite	eq
 23fc7fa:	2001      	moveq	r0, #1
 23fc7fc:	2002      	movne	r0, #2
 23fc7fe:	4770      	bx	lr

023fc800 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>:
void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
 23fc800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc802:	4607      	mov	r7, r0
	size_t increment = copySrcIncrement();
 23fc804:	6803      	ldr	r3, [r0, #0]
	const int16_t *srcEnd = &src[numSamples];
 23fc806:	6986      	ldr	r6, [r0, #24]
	size_t increment = copySrcIncrement();
 23fc808:	689b      	ldr	r3, [r3, #8]
void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
 23fc80a:	460c      	mov	r4, r1
 23fc80c:	4615      	mov	r5, r2
	const int16_t *srcEnd = &src[numSamples];
 23fc80e:	eb01 0646 	add.w	r6, r1, r6, lsl #1
	size_t increment = copySrcIncrement();
 23fc812:	4798      	blx	r3
	if (outputSize == OutputSize::UNSIGNED_8) {
 23fc814:	693b      	ldr	r3, [r7, #16]
 23fc816:	b9c3      	cbnz	r3, 23fc84a <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x4a>
		int16_t div = (int16_t)(1 << (size_t) range);
 23fc818:	2201      	movs	r2, #1
			*((uint8_t *)dst) = (uint8_t) (val + 128);
 23fc81a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
		int16_t div = (int16_t)(1 << (size_t) range);
 23fc81e:	697b      	ldr	r3, [r7, #20]
			src += increment;
 23fc820:	0040      	lsls	r0, r0, #1
		int16_t div = (int16_t)(1 << (size_t) range);
 23fc822:	409a      	lsls	r2, r3
 23fc824:	b212      	sxth	r2, r2
		while(src < srcEnd) {
 23fc826:	42b4      	cmp	r4, r6
 23fc828:	d236      	bcs.n	23fc898 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int16_t val = *src / div;
 23fc82a:	f9b4 3000 	ldrsh.w	r3, [r4]
			src += increment;
 23fc82e:	4404      	add	r4, r0
			int16_t val = *src / div;
 23fc830:	fb93 f3f2 	sdiv	r3, r3, r2
 23fc834:	b21b      	sxth	r3, r3
			if (val < -128) {
 23fc836:	2b7f      	cmp	r3, #127	; 0x7f
 23fc838:	bfa8      	it	ge
 23fc83a:	237f      	movge	r3, #127	; 0x7f
			*((uint8_t *)dst) = (uint8_t) (val + 128);
 23fc83c:	428b      	cmp	r3, r1
 23fc83e:	bfb8      	it	lt
 23fc840:	460b      	movlt	r3, r1
 23fc842:	3b80      	subs	r3, #128	; 0x80
 23fc844:	f805 3b01 	strb.w	r3, [r5], #1
		while(src < srcEnd) {
 23fc848:	e7ed      	b.n	23fc826 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x26>
	else if (outputSize == OutputSize::SIGNED_16) {		
 23fc84a:	2b01      	cmp	r3, #1
 23fc84c:	d117      	bne.n	23fc87e <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7e>
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
 23fc84e:	697a      	ldr	r2, [r7, #20]
				val = 32868;
 23fc850:	f248 0764 	movw	r7, #32868	; 0x8064
			if (val < -32767) {
 23fc854:	4911      	ldr	r1, [pc, #68]	; (23fc89c <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
 23fc856:	f1c2 0208 	rsb	r2, r2, #8
			src += increment;
 23fc85a:	0040      	lsls	r0, r0, #1
		while(src < srcEnd) {
 23fc85c:	42b4      	cmp	r4, r6
 23fc85e:	d21b      	bcs.n	23fc898 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int32_t val = (int32_t)*src * mult;
 23fc860:	f9b4 3000 	ldrsh.w	r3, [r4]
			src += increment;
 23fc864:	4404      	add	r4, r0
			int32_t val = (int32_t)*src * mult;
 23fc866:	4093      	lsls	r3, r2
			if (val < -32767) {
 23fc868:	428b      	cmp	r3, r1
 23fc86a:	db06      	blt.n	23fc87a <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7a>
				val = 32868;
 23fc86c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 23fc870:	bfc8      	it	gt
 23fc872:	463b      	movgt	r3, r7
			*((int16_t *)dst) = (int16_t) val;
 23fc874:	f825 3b02 	strh.w	r3, [r5], #2
		while(src < srcEnd) {
 23fc878:	e7f0      	b.n	23fc85c <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x5c>
				val = -32767;
 23fc87a:	4b08      	ldr	r3, [pc, #32]	; (23fc89c <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
 23fc87c:	e7fa      	b.n	23fc874 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x74>
		if (src != (int16_t *)dst || increment != 1) {
 23fc87e:	42ac      	cmp	r4, r5
 23fc880:	d101      	bne.n	23fc886 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x86>
 23fc882:	2801      	cmp	r0, #1
 23fc884:	d008      	beq.n	23fc898 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
				src += increment;
 23fc886:	0040      	lsls	r0, r0, #1
			while(src < srcEnd) {
 23fc888:	42b4      	cmp	r4, r6
 23fc88a:	d205      	bcs.n	23fc898 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
				*((int16_t *)dst) = *src;
 23fc88c:	f9b4 3000 	ldrsh.w	r3, [r4]
				src += increment;
 23fc890:	4404      	add	r4, r0
				*((int16_t *)dst) = *src;
 23fc892:	f825 3b02 	strh.w	r3, [r5], #2
			while(src < srcEnd) {
 23fc896:	e7f7      	b.n	23fc888 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x88>
}
 23fc898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc89a:	bf00      	nop
 23fc89c:	ffff8001 	.word	0xffff8001

023fc8a0 <_ZN29Microphone_PDM_BufferSamplingC1Ev>:
Microphone_PDM_BufferSampling::Microphone_PDM_BufferSampling() {
 23fc8a0:	4a04      	ldr	r2, [pc, #16]	; (23fc8b4 <_ZN29Microphone_PDM_BufferSamplingC1Ev+0x14>)
 23fc8a2:	6002      	str	r2, [r0, #0]
 23fc8a4:	2200      	movs	r2, #0
 23fc8a6:	e9c0 2201 	strd	r2, r2, [r0, #4]
 23fc8aa:	e9c0 2203 	strd	r2, r2, [r0, #12]
    _Function_base() : _M_manager(nullptr) { }
 23fc8ae:	61c2      	str	r2, [r0, #28]
 23fc8b0:	6242      	str	r2, [r0, #36]	; 0x24
}
 23fc8b2:	4770      	bx	lr
 23fc8b4:	023ffafc 	.word	0x023ffafc

023fc8b8 <_ZN16MicWavHeaderBaseD1Ev>:
MicWavHeaderBase::MicWavHeaderBase(uint8_t *buffer, size_t bufferSize) : buffer(buffer), bufferSize(bufferSize) {

}
MicWavHeaderBase::~MicWavHeaderBase() {

}
 23fc8b8:	4770      	bx	lr

023fc8ba <_ZN16MicWavHeaderBaseD0Ev>:
MicWavHeaderBase::~MicWavHeaderBase() {
 23fc8ba:	b510      	push	{r4, lr}
 23fc8bc:	4604      	mov	r4, r0
}
 23fc8be:	2110      	movs	r1, #16
 23fc8c0:	f7fe ffef 	bl	23fb8a2 <_ZdlPvj>
 23fc8c4:	4620      	mov	r0, r4
 23fc8c6:	bd10      	pop	{r4, pc}

023fc8c8 <_ZN33Microphone_PDM_BufferSampling_wavD1Ev>:
private:
	uint8_t staticBuffer[BUFFER_SIZE]; //!< static buffer to write to
};


class Microphone_PDM_BufferSampling_wav : public Microphone_PDM_BufferSampling {
 23fc8c8:	b510      	push	{r4, lr}
 23fc8ca:	4604      	mov	r4, r0
 23fc8cc:	4b02      	ldr	r3, [pc, #8]	; (23fc8d8 <_ZN33Microphone_PDM_BufferSampling_wavD1Ev+0x10>)
 23fc8ce:	6003      	str	r3, [r0, #0]
 23fc8d0:	f7ff fee2 	bl	23fc698 <_ZN29Microphone_PDM_BufferSamplingD1Ev>
 23fc8d4:	4620      	mov	r0, r4
 23fc8d6:	bd10      	pop	{r4, pc}
 23fc8d8:	023ffb64 	.word	0x023ffb64

023fc8dc <_ZN33Microphone_PDM_BufferSampling_wavD0Ev>:
 23fc8dc:	b510      	push	{r4, lr}
 23fc8de:	4604      	mov	r4, r0
 23fc8e0:	f7ff fff2 	bl	23fc8c8 <_ZN33Microphone_PDM_BufferSampling_wavD1Ev>
 23fc8e4:	4620      	mov	r0, r4
 23fc8e6:	212c      	movs	r1, #44	; 0x2c
 23fc8e8:	f7fe ffdb 	bl	23fb8a2 <_ZdlPvj>
 23fc8ec:	4620      	mov	r0, r4
 23fc8ee:	bd10      	pop	{r4, pc}

023fc8f0 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23fc8f0:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fc8f2:	f04f 0c20 	mov.w	ip, #32
 23fc8f6:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23fc8f8:	b500      	push	{lr}
 23fc8fa:	b08c      	sub	sp, #48	; 0x30
 23fc8fc:	aa0d      	add	r2, sp, #52	; 0x34
 23fc8fe:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fc902:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fc906:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fc90a:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fc90c:	6801      	ldr	r1, [r0, #0]
 23fc90e:	aa04      	add	r2, sp, #16
 23fc910:	201e      	movs	r0, #30
 23fc912:	f000 faff 	bl	23fcf14 <log_message_v>
}
 23fc916:	b00c      	add	sp, #48	; 0x30
 23fc918:	f85d eb04 	ldr.w	lr, [sp], #4
 23fc91c:	b003      	add	sp, #12
 23fc91e:	4770      	bx	lr

023fc920 <_ZN16MicWavHeaderBase21fourCharStringToValueEPKc>:
	value |= ((uint32_t)str[0]) << 24;
	value |= ((uint32_t)str[1]) << 16;
	value |= ((uint32_t)str[2]) << 8;
	value |= ((uint32_t)str[3]);

	return value;
 23fc920:	6800      	ldr	r0, [r0, #0]
}
 23fc922:	ba00      	rev	r0, r0
 23fc924:	4770      	bx	lr

023fc926 <_ZN16MicWavHeaderBase11setUint32BEEjm>:

void MicWavHeaderBase::setUint32BE(size_t offset, uint32_t value) {
	buffer[offset]     = (uint8_t) (value >> 24);
 23fc926:	6843      	ldr	r3, [r0, #4]
void MicWavHeaderBase::setUint32BE(size_t offset, uint32_t value) {
 23fc928:	b510      	push	{r4, lr}
	buffer[offset]     = (uint8_t) (value >> 24);
 23fc92a:	0e14      	lsrs	r4, r2, #24
 23fc92c:	545c      	strb	r4, [r3, r1]
	buffer[offset + 1] = (uint8_t) (value >> 16);
 23fc92e:	6843      	ldr	r3, [r0, #4]
 23fc930:	0c14      	lsrs	r4, r2, #16
 23fc932:	440b      	add	r3, r1
 23fc934:	705c      	strb	r4, [r3, #1]
	buffer[offset + 2] = (uint8_t) (value >> 8);
 23fc936:	6843      	ldr	r3, [r0, #4]
 23fc938:	0a14      	lsrs	r4, r2, #8
 23fc93a:	440b      	add	r3, r1
 23fc93c:	709c      	strb	r4, [r3, #2]
	buffer[offset + 3] = (uint8_t) value;
 23fc93e:	6843      	ldr	r3, [r0, #4]
 23fc940:	4419      	add	r1, r3
 23fc942:	70ca      	strb	r2, [r1, #3]
}
 23fc944:	bd10      	pop	{r4, pc}
	...

023fc948 <_ZN16MicWavHeaderBase11writeHeaderEhmhm>:
bool MicWavHeaderBase::writeHeader(uint8_t numChannels, uint32_t sampleRate, uint8_t bitsPerSample, uint32_t dataSizeInBytes) {
 23fc948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fc94c:	4615      	mov	r5, r2
	if (bufferSize < 44) {
 23fc94e:	6882      	ldr	r2, [r0, #8]
bool MicWavHeaderBase::writeHeader(uint8_t numChannels, uint32_t sampleRate, uint8_t bitsPerSample, uint32_t dataSizeInBytes) {
 23fc950:	4604      	mov	r4, r0
	if (bufferSize < 44) {
 23fc952:	2a2b      	cmp	r2, #43	; 0x2b
bool MicWavHeaderBase::writeHeader(uint8_t numChannels, uint32_t sampleRate, uint8_t bitsPerSample, uint32_t dataSizeInBytes) {
 23fc954:	460e      	mov	r6, r1
 23fc956:	4698      	mov	r8, r3
 23fc958:	f8dd 9020 	ldr.w	r9, [sp, #32]
	if (bufferSize < 44) {
 23fc95c:	d806      	bhi.n	23fc96c <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0x24>
		DEBUG_NORMAL(("buffer too small, was %d need 44", bufferSize));
 23fc95e:	4825      	ldr	r0, [pc, #148]	; (23fc9f4 <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0xac>)
 23fc960:	4925      	ldr	r1, [pc, #148]	; (23fc9f8 <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0xb0>)
 23fc962:	f7ff ffc5 	bl	23fc8f0 <_ZNK5spark6Logger4infoEPKcz>
		return false;
 23fc966:	2000      	movs	r0, #0
}
 23fc968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	setUint32BE(0, fourCharStringToValue("RIFF"));
 23fc96c:	4823      	ldr	r0, [pc, #140]	; (23fc9fc <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0xb4>)
 23fc96e:	f7ff ffd7 	bl	23fc920 <_ZN16MicWavHeaderBase21fourCharStringToValueEPKc>
 23fc972:	2100      	movs	r1, #0
 23fc974:	4602      	mov	r2, r0
 23fc976:	4620      	mov	r0, r4
 23fc978:	f7ff ffd5 	bl	23fc926 <_ZN16MicWavHeaderBase11setUint32BEEjm>
	memcpy(&buffer[offset], &value, 4);
 23fc97c:	6863      	ldr	r3, [r4, #4]
	setUint32LE(4, dataSizeInBytes + 36);
 23fc97e:	f109 0224 	add.w	r2, r9, #36	; 0x24
	memcpy(&buffer[offset], &value, 4);
 23fc982:	605a      	str	r2, [r3, #4]
	setUint32BE(8, fourCharStringToValue("WAVE"));
 23fc984:	481e      	ldr	r0, [pc, #120]	; (23fca00 <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0xb8>)
 23fc986:	f7ff ffcb 	bl	23fc920 <_ZN16MicWavHeaderBase21fourCharStringToValueEPKc>
 23fc98a:	2108      	movs	r1, #8
 23fc98c:	4602      	mov	r2, r0
 23fc98e:	4620      	mov	r0, r4
 23fc990:	f7ff ffc9 	bl	23fc926 <_ZN16MicWavHeaderBase11setUint32BEEjm>
	setUint32BE(12, fourCharStringToValue("fmt "));
 23fc994:	481b      	ldr	r0, [pc, #108]	; (23fca04 <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0xbc>)
 23fc996:	f7ff ffc3 	bl	23fc920 <_ZN16MicWavHeaderBase21fourCharStringToValueEPKc>
 23fc99a:	210c      	movs	r1, #12
 23fc99c:	4602      	mov	r2, r0
 23fc99e:	4620      	mov	r0, r4
 23fc9a0:	f7ff ffc1 	bl	23fc926 <_ZN16MicWavHeaderBase11setUint32BEEjm>
	memcpy(&buffer[offset], &value, 4);
 23fc9a4:	2210      	movs	r2, #16
	memcpy(&buffer[offset], &value, 2);
 23fc9a6:	2701      	movs	r7, #1
	memcpy(&buffer[offset], &value, 4);
 23fc9a8:	6863      	ldr	r3, [r4, #4]
	setUint32BE(36, fourCharStringToValue("data"));
 23fc9aa:	4817      	ldr	r0, [pc, #92]	; (23fca08 <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0xc0>)
	memcpy(&buffer[offset], &value, 4);
 23fc9ac:	611a      	str	r2, [r3, #16]
	memcpy(&buffer[offset], &value, 2);
 23fc9ae:	6863      	ldr	r3, [r4, #4]
	setUint32BE(36, fourCharStringToValue("data"));
 23fc9b0:	2124      	movs	r1, #36	; 0x24
	memcpy(&buffer[offset], &value, 2);
 23fc9b2:	829f      	strh	r7, [r3, #20]
 23fc9b4:	6863      	ldr	r3, [r4, #4]
 23fc9b6:	82de      	strh	r6, [r3, #22]
	memcpy(&buffer[offset], &value, 4);
 23fc9b8:	6863      	ldr	r3, [r4, #4]
 23fc9ba:	619d      	str	r5, [r3, #24]
	setUint32LE(28, sampleRate * numChannels * bitsPerSample / 8);
 23fc9bc:	fb05 f508 	mul.w	r5, r5, r8
 23fc9c0:	4375      	muls	r5, r6
	memcpy(&buffer[offset], &value, 4);
 23fc9c2:	6863      	ldr	r3, [r4, #4]
	setUint16LE(32, numChannels * bitsPerSample / 8);
 23fc9c4:	fb16 f608 	smulbb	r6, r6, r8
	setUint32LE(28, sampleRate * numChannels * bitsPerSample / 8);
 23fc9c8:	08ed      	lsrs	r5, r5, #3
	memcpy(&buffer[offset], &value, 4);
 23fc9ca:	61dd      	str	r5, [r3, #28]
	memcpy(&buffer[offset], &value, 2);
 23fc9cc:	6863      	ldr	r3, [r4, #4]
	setUint16LE(32, numChannels * bitsPerSample / 8);
 23fc9ce:	10f6      	asrs	r6, r6, #3
	memcpy(&buffer[offset], &value, 2);
 23fc9d0:	841e      	strh	r6, [r3, #32]
 23fc9d2:	6863      	ldr	r3, [r4, #4]
 23fc9d4:	f8a3 8022 	strh.w	r8, [r3, #34]	; 0x22
	setUint32BE(36, fourCharStringToValue("data"));
 23fc9d8:	f7ff ffa2 	bl	23fc920 <_ZN16MicWavHeaderBase21fourCharStringToValueEPKc>
 23fc9dc:	4602      	mov	r2, r0
 23fc9de:	4620      	mov	r0, r4
 23fc9e0:	f7ff ffa1 	bl	23fc926 <_ZN16MicWavHeaderBase11setUint32BEEjm>
	memcpy(&buffer[offset], &value, 4);
 23fc9e4:	6863      	ldr	r3, [r4, #4]
	bufferOffset = 44;
 23fc9e6:	4638      	mov	r0, r7
	memcpy(&buffer[offset], &value, 4);
 23fc9e8:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
	bufferOffset = 44;
 23fc9ec:	232c      	movs	r3, #44	; 0x2c
 23fc9ee:	60e3      	str	r3, [r4, #12]
	return true;
 23fc9f0:	e7ba      	b.n	23fc968 <_ZN16MicWavHeaderBase11writeHeaderEhmhm+0x20>
 23fc9f2:	bf00      	nop
 23fc9f4:	1007ae84 	.word	0x1007ae84
 23fc9f8:	023ffb14 	.word	0x023ffb14
 23fc9fc:	023ffb35 	.word	0x023ffb35
 23fca00:	023ffb3a 	.word	0x023ffb3a
 23fca04:	023ffb3f 	.word	0x023ffb3f
 23fca08:	023ffb44 	.word	0x023ffb44

023fca0c <_ZN33Microphone_PDM_BufferSampling_wav13preCompletionEv>:

Microphone_PDM_BufferSampling_wav::Microphone_PDM_BufferSampling_wav() {
	reserveHeaderSize = MicWavHeaderBase::STANDARD_SIZE;
}

void Microphone_PDM_BufferSampling_wav::preCompletion() {
 23fca0c:	b510      	push	{r4, lr}
	MicWavHeaderBase wav(buffer, bufferSize);
 23fca0e:	68c3      	ldr	r3, [r0, #12]
void Microphone_PDM_BufferSampling_wav::preCompletion() {
 23fca10:	b088      	sub	sp, #32
MicWavHeaderBase::MicWavHeaderBase(uint8_t *buffer, size_t bufferSize) : buffer(buffer), bufferSize(bufferSize) {
 23fca12:	9306      	str	r3, [sp, #24]
 23fca14:	2300      	movs	r3, #0
 23fca16:	4912      	ldr	r1, [pc, #72]	; (23fca60 <_ZN33Microphone_PDM_BufferSampling_wav13preCompletionEv+0x54>)
	MicWavHeaderBase wav(buffer, bufferSize);
 23fca18:	6842      	ldr	r2, [r0, #4]
void Microphone_PDM_BufferSampling_wav::preCompletion() {
 23fca1a:	4604      	mov	r4, r0
MicWavHeaderBase::MicWavHeaderBase(uint8_t *buffer, size_t bufferSize) : buffer(buffer), bufferSize(bufferSize) {
 23fca1c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 23fca20:	9307      	str	r3, [sp, #28]

	wav.writeHeader(
		Microphone_PDM::instance().getNumChannels(),
 23fca22:	f7ff fe79 	bl	23fc718 <_ZN14Microphone_PDM8instanceEv>
	/**
	 * @brief Get the number of channels, either 1 or 2
	 * 
	 * @return uint8_t 
	 */
	uint8_t getNumChannels() const { return stereoMode ? 2 : 1; };
 23fca26:	7a03      	ldrb	r3, [r0, #8]
 23fca28:	2b00      	cmp	r3, #0
 23fca2a:	bf14      	ite	ne
 23fca2c:	2102      	movne	r1, #2
 23fca2e:	2101      	moveq	r1, #1
 23fca30:	9103      	str	r1, [sp, #12]
		(uint32_t) Microphone_PDM::instance().getSampleRate(),
 23fca32:	f7ff fe71 	bl	23fc718 <_ZN14Microphone_PDM8instanceEv>
	wav.writeHeader(
 23fca36:	68c2      	ldr	r2, [r0, #12]
 23fca38:	9202      	str	r2, [sp, #8]
		Microphone_PDM::instance().getBitsPerSample(),
 23fca3a:	f7ff fe6d 	bl	23fc718 <_ZN14Microphone_PDM8instanceEv>
	/**
	 * @brief Get the number of bits per sample, 8 or 16
	 * 
	 * @return uint8_t bits per sample (8 or 16)
	 */
	uint8_t getBitsPerSample() const { return (uint8_t) getSampleSizeInBytes() * 8; };
 23fca3e:	f7ff fed9 	bl	23fc7f4 <_ZNK14Microphone_PDM20getSampleSizeInBytesEv>
	wav.writeHeader(
 23fca42:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
		bufferSize - reserveHeaderSize);
 23fca46:	68e3      	ldr	r3, [r4, #12]
 23fca48:	6a64      	ldr	r4, [r4, #36]	; 0x24
 23fca4a:	00c0      	lsls	r0, r0, #3
 23fca4c:	1b1b      	subs	r3, r3, r4
	wav.writeHeader(
 23fca4e:	9300      	str	r3, [sp, #0]
 23fca50:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 23fca54:	a804      	add	r0, sp, #16
 23fca56:	f7ff ff77 	bl	23fc948 <_ZN16MicWavHeaderBase11writeHeaderEhmhm>
}
 23fca5a:	b008      	add	sp, #32
 23fca5c:	bd10      	pop	{r4, pc}
 23fca5e:	bf00      	nop
 23fca60:	023ffb54 	.word	0x023ffb54

023fca64 <_ZN33Microphone_PDM_BufferSampling_wavC1Ev>:
Microphone_PDM_BufferSampling_wav::Microphone_PDM_BufferSampling_wav() {
 23fca64:	b510      	push	{r4, lr}
 23fca66:	4604      	mov	r4, r0
 23fca68:	f7ff ff1a 	bl	23fc8a0 <_ZN29Microphone_PDM_BufferSamplingC1Ev>
 23fca6c:	4b02      	ldr	r3, [pc, #8]	; (23fca78 <_ZN33Microphone_PDM_BufferSampling_wavC1Ev+0x14>)
}
 23fca6e:	4620      	mov	r0, r4
Microphone_PDM_BufferSampling_wav::Microphone_PDM_BufferSampling_wav() {
 23fca70:	6023      	str	r3, [r4, #0]
	reserveHeaderSize = MicWavHeaderBase::STANDARD_SIZE;
 23fca72:	232c      	movs	r3, #44	; 0x2c
 23fca74:	6263      	str	r3, [r4, #36]	; 0x24
}
 23fca76:	bd10      	pop	{r4, pc}
 23fca78:	023ffb64 	.word	0x023ffb64

023fca7c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fca7c:	b509      	push	{r0, r3, lr}
 23fca7e:	4804      	ldr	r0, [pc, #16]	; (23fca90 <netdb_freeaddrinfo+0x14>)
 23fca80:	6800      	ldr	r0, [r0, #0]
 23fca82:	4b04      	ldr	r3, [pc, #16]	; (23fca94 <netdb_freeaddrinfo+0x18>)
 23fca84:	4403      	add	r3, r0
 23fca86:	681b      	ldr	r3, [r3, #0]
 23fca88:	689b      	ldr	r3, [r3, #8]
 23fca8a:	9302      	str	r3, [sp, #8]
 23fca8c:	bd09      	pop	{r0, r3, pc}
 23fca8e:	0000      	.short	0x0000
 23fca90:	1007a458 	.word	0x1007a458
 23fca94:	00000050 	.word	0x00000050

023fca98 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fca98:	b509      	push	{r0, r3, lr}
 23fca9a:	4804      	ldr	r0, [pc, #16]	; (23fcaac <netdb_getaddrinfo+0x14>)
 23fca9c:	6800      	ldr	r0, [r0, #0]
 23fca9e:	4b04      	ldr	r3, [pc, #16]	; (23fcab0 <netdb_getaddrinfo+0x18>)
 23fcaa0:	4403      	add	r3, r0
 23fcaa2:	681b      	ldr	r3, [r3, #0]
 23fcaa4:	68db      	ldr	r3, [r3, #12]
 23fcaa6:	9302      	str	r3, [sp, #8]
 23fcaa8:	bd09      	pop	{r0, r3, pc}
 23fcaaa:	0000      	.short	0x0000
 23fcaac:	1007a458 	.word	0x1007a458
 23fcab0:	00000050 	.word	0x00000050

023fcab4 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fcab4:	b509      	push	{r0, r3, lr}
 23fcab6:	4804      	ldr	r0, [pc, #16]	; (23fcac8 <hal_gpio_mode+0x14>)
 23fcab8:	6800      	ldr	r0, [r0, #0]
 23fcaba:	4b04      	ldr	r3, [pc, #16]	; (23fcacc <hal_gpio_mode+0x18>)
 23fcabc:	4403      	add	r3, r0
 23fcabe:	681b      	ldr	r3, [r3, #0]
 23fcac0:	689b      	ldr	r3, [r3, #8]
 23fcac2:	9302      	str	r3, [sp, #8]
 23fcac4:	bd09      	pop	{r0, r3, pc}
 23fcac6:	0000      	.short	0x0000
 23fcac8:	1007a458 	.word	0x1007a458
 23fcacc:	00000014 	.word	0x00000014

023fcad0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fcad0:	b509      	push	{r0, r3, lr}
 23fcad2:	4804      	ldr	r0, [pc, #16]	; (23fcae4 <hal_gpio_get_mode+0x14>)
 23fcad4:	6800      	ldr	r0, [r0, #0]
 23fcad6:	4b04      	ldr	r3, [pc, #16]	; (23fcae8 <hal_gpio_get_mode+0x18>)
 23fcad8:	4403      	add	r3, r0
 23fcada:	681b      	ldr	r3, [r3, #0]
 23fcadc:	68db      	ldr	r3, [r3, #12]
 23fcade:	9302      	str	r3, [sp, #8]
 23fcae0:	bd09      	pop	{r0, r3, pc}
 23fcae2:	0000      	.short	0x0000
 23fcae4:	1007a458 	.word	0x1007a458
 23fcae8:	00000014 	.word	0x00000014

023fcaec <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fcaec:	b509      	push	{r0, r3, lr}
 23fcaee:	4804      	ldr	r0, [pc, #16]	; (23fcb00 <hal_gpio_write+0x14>)
 23fcaf0:	6800      	ldr	r0, [r0, #0]
 23fcaf2:	4b04      	ldr	r3, [pc, #16]	; (23fcb04 <hal_gpio_write+0x18>)
 23fcaf4:	4403      	add	r3, r0
 23fcaf6:	681b      	ldr	r3, [r3, #0]
 23fcaf8:	691b      	ldr	r3, [r3, #16]
 23fcafa:	9302      	str	r3, [sp, #8]
 23fcafc:	bd09      	pop	{r0, r3, pc}
 23fcafe:	0000      	.short	0x0000
 23fcb00:	1007a458 	.word	0x1007a458
 23fcb04:	00000014 	.word	0x00000014

023fcb08 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fcb08:	b509      	push	{r0, r3, lr}
 23fcb0a:	4804      	ldr	r0, [pc, #16]	; (23fcb1c <HAL_RNG_GetRandomNumber+0x14>)
 23fcb0c:	6800      	ldr	r0, [r0, #0]
 23fcb0e:	4b04      	ldr	r3, [pc, #16]	; (23fcb20 <HAL_RNG_GetRandomNumber+0x18>)
 23fcb10:	4403      	add	r3, r0
 23fcb12:	681b      	ldr	r3, [r3, #0]
 23fcb14:	685b      	ldr	r3, [r3, #4]
 23fcb16:	9302      	str	r3, [sp, #8]
 23fcb18:	bd09      	pop	{r0, r3, pc}
 23fcb1a:	0000      	.short	0x0000
 23fcb1c:	1007a458 	.word	0x1007a458
 23fcb20:	00000000 	.word	0x00000000

023fcb24 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fcb24:	b509      	push	{r0, r3, lr}
 23fcb26:	4804      	ldr	r0, [pc, #16]	; (23fcb38 <HAL_Delay_Microseconds+0x14>)
 23fcb28:	6800      	ldr	r0, [r0, #0]
 23fcb2a:	4b04      	ldr	r3, [pc, #16]	; (23fcb3c <HAL_Delay_Microseconds+0x18>)
 23fcb2c:	4403      	add	r3, r0
 23fcb2e:	681b      	ldr	r3, [r3, #0]
 23fcb30:	68db      	ldr	r3, [r3, #12]
 23fcb32:	9302      	str	r3, [sp, #8]
 23fcb34:	bd09      	pop	{r0, r3, pc}
 23fcb36:	0000      	.short	0x0000
 23fcb38:	1007a458 	.word	0x1007a458
 23fcb3c:	00000000 	.word	0x00000000

023fcb40 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fcb40:	b509      	push	{r0, r3, lr}
 23fcb42:	4804      	ldr	r0, [pc, #16]	; (23fcb54 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fcb44:	6800      	ldr	r0, [r0, #0]
 23fcb46:	4b04      	ldr	r3, [pc, #16]	; (23fcb58 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fcb48:	4403      	add	r3, r0
 23fcb4a:	681b      	ldr	r3, [r3, #0]
 23fcb4c:	695b      	ldr	r3, [r3, #20]
 23fcb4e:	9302      	str	r3, [sp, #8]
 23fcb50:	bd09      	pop	{r0, r3, pc}
 23fcb52:	0000      	.short	0x0000
 23fcb54:	1007a458 	.word	0x1007a458
 23fcb58:	00000000 	.word	0x00000000

023fcb5c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fcb5c:	b509      	push	{r0, r3, lr}
 23fcb5e:	4804      	ldr	r0, [pc, #16]	; (23fcb70 <os_mutex_recursive_create+0x14>)
 23fcb60:	6800      	ldr	r0, [r0, #0]
 23fcb62:	4b04      	ldr	r3, [pc, #16]	; (23fcb74 <os_mutex_recursive_create+0x18>)
 23fcb64:	4403      	add	r3, r0
 23fcb66:	681b      	ldr	r3, [r3, #0]
 23fcb68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcb6a:	9302      	str	r3, [sp, #8]
 23fcb6c:	bd09      	pop	{r0, r3, pc}
 23fcb6e:	0000      	.short	0x0000
 23fcb70:	1007a458 	.word	0x1007a458
 23fcb74:	00000030 	.word	0x00000030

023fcb78 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fcb78:	b509      	push	{r0, r3, lr}
 23fcb7a:	4804      	ldr	r0, [pc, #16]	; (23fcb8c <os_mutex_recursive_destroy+0x14>)
 23fcb7c:	6800      	ldr	r0, [r0, #0]
 23fcb7e:	4b04      	ldr	r3, [pc, #16]	; (23fcb90 <os_mutex_recursive_destroy+0x18>)
 23fcb80:	4403      	add	r3, r0
 23fcb82:	681b      	ldr	r3, [r3, #0]
 23fcb84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fcb86:	9302      	str	r3, [sp, #8]
 23fcb88:	bd09      	pop	{r0, r3, pc}
 23fcb8a:	0000      	.short	0x0000
 23fcb8c:	1007a458 	.word	0x1007a458
 23fcb90:	00000030 	.word	0x00000030

023fcb94 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fcb94:	b509      	push	{r0, r3, lr}
 23fcb96:	4804      	ldr	r0, [pc, #16]	; (23fcba8 <os_mutex_recursive_lock+0x14>)
 23fcb98:	6800      	ldr	r0, [r0, #0]
 23fcb9a:	4b04      	ldr	r3, [pc, #16]	; (23fcbac <os_mutex_recursive_lock+0x18>)
 23fcb9c:	4403      	add	r3, r0
 23fcb9e:	681b      	ldr	r3, [r3, #0]
 23fcba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fcba2:	9302      	str	r3, [sp, #8]
 23fcba4:	bd09      	pop	{r0, r3, pc}
 23fcba6:	0000      	.short	0x0000
 23fcba8:	1007a458 	.word	0x1007a458
 23fcbac:	00000030 	.word	0x00000030

023fcbb0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fcbb0:	b509      	push	{r0, r3, lr}
 23fcbb2:	4804      	ldr	r0, [pc, #16]	; (23fcbc4 <os_mutex_recursive_unlock+0x14>)
 23fcbb4:	6800      	ldr	r0, [r0, #0]
 23fcbb6:	4b04      	ldr	r3, [pc, #16]	; (23fcbc8 <os_mutex_recursive_unlock+0x18>)
 23fcbb8:	4403      	add	r3, r0
 23fcbba:	681b      	ldr	r3, [r3, #0]
 23fcbbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fcbbe:	9302      	str	r3, [sp, #8]
 23fcbc0:	bd09      	pop	{r0, r3, pc}
 23fcbc2:	0000      	.short	0x0000
 23fcbc4:	1007a458 	.word	0x1007a458
 23fcbc8:	00000030 	.word	0x00000030

023fcbcc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fcbcc:	b509      	push	{r0, r3, lr}
 23fcbce:	4804      	ldr	r0, [pc, #16]	; (23fcbe0 <inet_inet_ntop+0x14>)
 23fcbd0:	6800      	ldr	r0, [r0, #0]
 23fcbd2:	4b04      	ldr	r3, [pc, #16]	; (23fcbe4 <inet_inet_ntop+0x18>)
 23fcbd4:	4403      	add	r3, r0
 23fcbd6:	681b      	ldr	r3, [r3, #0]
 23fcbd8:	695b      	ldr	r3, [r3, #20]
 23fcbda:	9302      	str	r3, [sp, #8]
 23fcbdc:	bd09      	pop	{r0, r3, pc}
 23fcbde:	0000      	.short	0x0000
 23fcbe0:	1007a458 	.word	0x1007a458
 23fcbe4:	0000004c 	.word	0x0000004c

023fcbe8 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fcbe8:	b509      	push	{r0, r3, lr}
 23fcbea:	4804      	ldr	r0, [pc, #16]	; (23fcbfc <hal_usart_end+0x14>)
 23fcbec:	6800      	ldr	r0, [r0, #0]
 23fcbee:	4b04      	ldr	r3, [pc, #16]	; (23fcc00 <hal_usart_end+0x18>)
 23fcbf0:	4403      	add	r3, r0
 23fcbf2:	681b      	ldr	r3, [r3, #0]
 23fcbf4:	689b      	ldr	r3, [r3, #8]
 23fcbf6:	9302      	str	r3, [sp, #8]
 23fcbf8:	bd09      	pop	{r0, r3, pc}
 23fcbfa:	0000      	.short	0x0000
 23fcbfc:	1007a458 	.word	0x1007a458
 23fcc00:	00000024 	.word	0x00000024

023fcc04 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fcc04:	b509      	push	{r0, r3, lr}
 23fcc06:	4804      	ldr	r0, [pc, #16]	; (23fcc18 <hal_usart_write+0x14>)
 23fcc08:	6800      	ldr	r0, [r0, #0]
 23fcc0a:	4b04      	ldr	r3, [pc, #16]	; (23fcc1c <hal_usart_write+0x18>)
 23fcc0c:	4403      	add	r3, r0
 23fcc0e:	681b      	ldr	r3, [r3, #0]
 23fcc10:	68db      	ldr	r3, [r3, #12]
 23fcc12:	9302      	str	r3, [sp, #8]
 23fcc14:	bd09      	pop	{r0, r3, pc}
 23fcc16:	0000      	.short	0x0000
 23fcc18:	1007a458 	.word	0x1007a458
 23fcc1c:	00000024 	.word	0x00000024

023fcc20 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fcc20:	b509      	push	{r0, r3, lr}
 23fcc22:	4804      	ldr	r0, [pc, #16]	; (23fcc34 <hal_usart_available+0x14>)
 23fcc24:	6800      	ldr	r0, [r0, #0]
 23fcc26:	4b04      	ldr	r3, [pc, #16]	; (23fcc38 <hal_usart_available+0x18>)
 23fcc28:	4403      	add	r3, r0
 23fcc2a:	681b      	ldr	r3, [r3, #0]
 23fcc2c:	691b      	ldr	r3, [r3, #16]
 23fcc2e:	9302      	str	r3, [sp, #8]
 23fcc30:	bd09      	pop	{r0, r3, pc}
 23fcc32:	0000      	.short	0x0000
 23fcc34:	1007a458 	.word	0x1007a458
 23fcc38:	00000024 	.word	0x00000024

023fcc3c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fcc3c:	b509      	push	{r0, r3, lr}
 23fcc3e:	4804      	ldr	r0, [pc, #16]	; (23fcc50 <hal_usart_read+0x14>)
 23fcc40:	6800      	ldr	r0, [r0, #0]
 23fcc42:	4b04      	ldr	r3, [pc, #16]	; (23fcc54 <hal_usart_read+0x18>)
 23fcc44:	4403      	add	r3, r0
 23fcc46:	681b      	ldr	r3, [r3, #0]
 23fcc48:	695b      	ldr	r3, [r3, #20]
 23fcc4a:	9302      	str	r3, [sp, #8]
 23fcc4c:	bd09      	pop	{r0, r3, pc}
 23fcc4e:	0000      	.short	0x0000
 23fcc50:	1007a458 	.word	0x1007a458
 23fcc54:	00000024 	.word	0x00000024

023fcc58 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fcc58:	b509      	push	{r0, r3, lr}
 23fcc5a:	4804      	ldr	r0, [pc, #16]	; (23fcc6c <hal_usart_peek+0x14>)
 23fcc5c:	6800      	ldr	r0, [r0, #0]
 23fcc5e:	4b04      	ldr	r3, [pc, #16]	; (23fcc70 <hal_usart_peek+0x18>)
 23fcc60:	4403      	add	r3, r0
 23fcc62:	681b      	ldr	r3, [r3, #0]
 23fcc64:	699b      	ldr	r3, [r3, #24]
 23fcc66:	9302      	str	r3, [sp, #8]
 23fcc68:	bd09      	pop	{r0, r3, pc}
 23fcc6a:	0000      	.short	0x0000
 23fcc6c:	1007a458 	.word	0x1007a458
 23fcc70:	00000024 	.word	0x00000024

023fcc74 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fcc74:	b509      	push	{r0, r3, lr}
 23fcc76:	4804      	ldr	r0, [pc, #16]	; (23fcc88 <hal_usart_flush+0x14>)
 23fcc78:	6800      	ldr	r0, [r0, #0]
 23fcc7a:	4b04      	ldr	r3, [pc, #16]	; (23fcc8c <hal_usart_flush+0x18>)
 23fcc7c:	4403      	add	r3, r0
 23fcc7e:	681b      	ldr	r3, [r3, #0]
 23fcc80:	69db      	ldr	r3, [r3, #28]
 23fcc82:	9302      	str	r3, [sp, #8]
 23fcc84:	bd09      	pop	{r0, r3, pc}
 23fcc86:	0000      	.short	0x0000
 23fcc88:	1007a458 	.word	0x1007a458
 23fcc8c:	00000024 	.word	0x00000024

023fcc90 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fcc90:	b509      	push	{r0, r3, lr}
 23fcc92:	4804      	ldr	r0, [pc, #16]	; (23fcca4 <hal_usart_is_enabled+0x14>)
 23fcc94:	6800      	ldr	r0, [r0, #0]
 23fcc96:	4b04      	ldr	r3, [pc, #16]	; (23fcca8 <hal_usart_is_enabled+0x18>)
 23fcc98:	4403      	add	r3, r0
 23fcc9a:	681b      	ldr	r3, [r3, #0]
 23fcc9c:	6a1b      	ldr	r3, [r3, #32]
 23fcc9e:	9302      	str	r3, [sp, #8]
 23fcca0:	bd09      	pop	{r0, r3, pc}
 23fcca2:	0000      	.short	0x0000
 23fcca4:	1007a458 	.word	0x1007a458
 23fcca8:	00000024 	.word	0x00000024

023fccac <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fccac:	b509      	push	{r0, r3, lr}
 23fccae:	4804      	ldr	r0, [pc, #16]	; (23fccc0 <hal_usart_available_data_for_write+0x14>)
 23fccb0:	6800      	ldr	r0, [r0, #0]
 23fccb2:	4b04      	ldr	r3, [pc, #16]	; (23fccc4 <hal_usart_available_data_for_write+0x18>)
 23fccb4:	4403      	add	r3, r0
 23fccb6:	681b      	ldr	r3, [r3, #0]
 23fccb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fccba:	9302      	str	r3, [sp, #8]
 23fccbc:	bd09      	pop	{r0, r3, pc}
 23fccbe:	0000      	.short	0x0000
 23fccc0:	1007a458 	.word	0x1007a458
 23fccc4:	00000024 	.word	0x00000024

023fccc8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fccc8:	b509      	push	{r0, r3, lr}
 23fccca:	4804      	ldr	r0, [pc, #16]	; (23fccdc <hal_usart_begin_config+0x14>)
 23fcccc:	6800      	ldr	r0, [r0, #0]
 23fccce:	4b04      	ldr	r3, [pc, #16]	; (23fcce0 <hal_usart_begin_config+0x18>)
 23fccd0:	4403      	add	r3, r0
 23fccd2:	681b      	ldr	r3, [r3, #0]
 23fccd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fccd6:	9302      	str	r3, [sp, #8]
 23fccd8:	bd09      	pop	{r0, r3, pc}
 23fccda:	0000      	.short	0x0000
 23fccdc:	1007a458 	.word	0x1007a458
 23fcce0:	00000024 	.word	0x00000024

023fcce4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fcce4:	b509      	push	{r0, r3, lr}
 23fcce6:	4804      	ldr	r0, [pc, #16]	; (23fccf8 <hal_usart_init_ex+0x14>)
 23fcce8:	6800      	ldr	r0, [r0, #0]
 23fccea:	4b04      	ldr	r3, [pc, #16]	; (23fccfc <hal_usart_init_ex+0x18>)
 23fccec:	4403      	add	r3, r0
 23fccee:	681b      	ldr	r3, [r3, #0]
 23fccf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fccf2:	9302      	str	r3, [sp, #8]
 23fccf4:	bd09      	pop	{r0, r3, pc}
 23fccf6:	0000      	.short	0x0000
 23fccf8:	1007a458 	.word	0x1007a458
 23fccfc:	00000024 	.word	0x00000024

023fcd00 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fcd00:	b509      	push	{r0, r3, lr}
 23fcd02:	4804      	ldr	r0, [pc, #16]	; (23fcd14 <hal_i2c_write+0x14>)
 23fcd04:	6800      	ldr	r0, [r0, #0]
 23fcd06:	4b04      	ldr	r3, [pc, #16]	; (23fcd18 <hal_i2c_write+0x18>)
 23fcd08:	4403      	add	r3, r0
 23fcd0a:	681b      	ldr	r3, [r3, #0]
 23fcd0c:	6a1b      	ldr	r3, [r3, #32]
 23fcd0e:	9302      	str	r3, [sp, #8]
 23fcd10:	bd09      	pop	{r0, r3, pc}
 23fcd12:	0000      	.short	0x0000
 23fcd14:	1007a458 	.word	0x1007a458
 23fcd18:	00000010 	.word	0x00000010

023fcd1c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fcd1c:	b509      	push	{r0, r3, lr}
 23fcd1e:	4804      	ldr	r0, [pc, #16]	; (23fcd30 <hal_i2c_available+0x14>)
 23fcd20:	6800      	ldr	r0, [r0, #0]
 23fcd22:	4b04      	ldr	r3, [pc, #16]	; (23fcd34 <hal_i2c_available+0x18>)
 23fcd24:	4403      	add	r3, r0
 23fcd26:	681b      	ldr	r3, [r3, #0]
 23fcd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fcd2a:	9302      	str	r3, [sp, #8]
 23fcd2c:	bd09      	pop	{r0, r3, pc}
 23fcd2e:	0000      	.short	0x0000
 23fcd30:	1007a458 	.word	0x1007a458
 23fcd34:	00000010 	.word	0x00000010

023fcd38 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fcd38:	b509      	push	{r0, r3, lr}
 23fcd3a:	4804      	ldr	r0, [pc, #16]	; (23fcd4c <hal_i2c_read+0x14>)
 23fcd3c:	6800      	ldr	r0, [r0, #0]
 23fcd3e:	4b04      	ldr	r3, [pc, #16]	; (23fcd50 <hal_i2c_read+0x18>)
 23fcd40:	4403      	add	r3, r0
 23fcd42:	681b      	ldr	r3, [r3, #0]
 23fcd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcd46:	9302      	str	r3, [sp, #8]
 23fcd48:	bd09      	pop	{r0, r3, pc}
 23fcd4a:	0000      	.short	0x0000
 23fcd4c:	1007a458 	.word	0x1007a458
 23fcd50:	00000010 	.word	0x00000010

023fcd54 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fcd54:	b509      	push	{r0, r3, lr}
 23fcd56:	4804      	ldr	r0, [pc, #16]	; (23fcd68 <hal_i2c_peek+0x14>)
 23fcd58:	6800      	ldr	r0, [r0, #0]
 23fcd5a:	4b04      	ldr	r3, [pc, #16]	; (23fcd6c <hal_i2c_peek+0x18>)
 23fcd5c:	4403      	add	r3, r0
 23fcd5e:	681b      	ldr	r3, [r3, #0]
 23fcd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcd62:	9302      	str	r3, [sp, #8]
 23fcd64:	bd09      	pop	{r0, r3, pc}
 23fcd66:	0000      	.short	0x0000
 23fcd68:	1007a458 	.word	0x1007a458
 23fcd6c:	00000010 	.word	0x00000010

023fcd70 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fcd70:	b509      	push	{r0, r3, lr}
 23fcd72:	4804      	ldr	r0, [pc, #16]	; (23fcd84 <hal_i2c_flush+0x14>)
 23fcd74:	6800      	ldr	r0, [r0, #0]
 23fcd76:	4b04      	ldr	r3, [pc, #16]	; (23fcd88 <hal_i2c_flush+0x18>)
 23fcd78:	4403      	add	r3, r0
 23fcd7a:	681b      	ldr	r3, [r3, #0]
 23fcd7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fcd7e:	9302      	str	r3, [sp, #8]
 23fcd80:	bd09      	pop	{r0, r3, pc}
 23fcd82:	0000      	.short	0x0000
 23fcd84:	1007a458 	.word	0x1007a458
 23fcd88:	00000010 	.word	0x00000010

023fcd8c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fcd8c:	b509      	push	{r0, r3, lr}
 23fcd8e:	4804      	ldr	r0, [pc, #16]	; (23fcda0 <hal_i2c_is_enabled+0x14>)
 23fcd90:	6800      	ldr	r0, [r0, #0]
 23fcd92:	4b04      	ldr	r3, [pc, #16]	; (23fcda4 <hal_i2c_is_enabled+0x18>)
 23fcd94:	4403      	add	r3, r0
 23fcd96:	681b      	ldr	r3, [r3, #0]
 23fcd98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fcd9a:	9302      	str	r3, [sp, #8]
 23fcd9c:	bd09      	pop	{r0, r3, pc}
 23fcd9e:	0000      	.short	0x0000
 23fcda0:	1007a458 	.word	0x1007a458
 23fcda4:	00000010 	.word	0x00000010

023fcda8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fcda8:	b509      	push	{r0, r3, lr}
 23fcdaa:	4804      	ldr	r0, [pc, #16]	; (23fcdbc <hal_i2c_init+0x14>)
 23fcdac:	6800      	ldr	r0, [r0, #0]
 23fcdae:	4b04      	ldr	r3, [pc, #16]	; (23fcdc0 <hal_i2c_init+0x18>)
 23fcdb0:	4403      	add	r3, r0
 23fcdb2:	681b      	ldr	r3, [r3, #0]
 23fcdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcdb6:	9302      	str	r3, [sp, #8]
 23fcdb8:	bd09      	pop	{r0, r3, pc}
 23fcdba:	0000      	.short	0x0000
 23fcdbc:	1007a458 	.word	0x1007a458
 23fcdc0:	00000010 	.word	0x00000010

023fcdc4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fcdc4:	b509      	push	{r0, r3, lr}
 23fcdc6:	4804      	ldr	r0, [pc, #16]	; (23fcdd8 <hal_spi_init+0x14>)
 23fcdc8:	6800      	ldr	r0, [r0, #0]
 23fcdca:	4b04      	ldr	r3, [pc, #16]	; (23fcddc <hal_spi_init+0x18>)
 23fcdcc:	4403      	add	r3, r0
 23fcdce:	681b      	ldr	r3, [r3, #0]
 23fcdd0:	69db      	ldr	r3, [r3, #28]
 23fcdd2:	9302      	str	r3, [sp, #8]
 23fcdd4:	bd09      	pop	{r0, r3, pc}
 23fcdd6:	0000      	.short	0x0000
 23fcdd8:	1007a458 	.word	0x1007a458
 23fcddc:	00000018 	.word	0x00000018

023fcde0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fcde0:	b509      	push	{r0, r3, lr}
 23fcde2:	4804      	ldr	r0, [pc, #16]	; (23fcdf4 <hal_spi_is_enabled+0x14>)
 23fcde4:	6800      	ldr	r0, [r0, #0]
 23fcde6:	4b04      	ldr	r3, [pc, #16]	; (23fcdf8 <hal_spi_is_enabled+0x18>)
 23fcde8:	4403      	add	r3, r0
 23fcdea:	681b      	ldr	r3, [r3, #0]
 23fcdec:	6a1b      	ldr	r3, [r3, #32]
 23fcdee:	9302      	str	r3, [sp, #8]
 23fcdf0:	bd09      	pop	{r0, r3, pc}
 23fcdf2:	0000      	.short	0x0000
 23fcdf4:	1007a458 	.word	0x1007a458
 23fcdf8:	00000018 	.word	0x00000018

023fcdfc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fcdfc:	b509      	push	{r0, r3, lr}
 23fcdfe:	4804      	ldr	r0, [pc, #16]	; (23fce10 <HAL_USB_USART_Init+0x14>)
 23fce00:	6800      	ldr	r0, [r0, #0]
 23fce02:	4b04      	ldr	r3, [pc, #16]	; (23fce14 <HAL_USB_USART_Init+0x18>)
 23fce04:	4403      	add	r3, r0
 23fce06:	681b      	ldr	r3, [r3, #0]
 23fce08:	681b      	ldr	r3, [r3, #0]
 23fce0a:	9302      	str	r3, [sp, #8]
 23fce0c:	bd09      	pop	{r0, r3, pc}
 23fce0e:	0000      	.short	0x0000
 23fce10:	1007a458 	.word	0x1007a458
 23fce14:	00000034 	.word	0x00000034

023fce18 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fce18:	b509      	push	{r0, r3, lr}
 23fce1a:	4804      	ldr	r0, [pc, #16]	; (23fce2c <HAL_USB_USART_Begin+0x14>)
 23fce1c:	6800      	ldr	r0, [r0, #0]
 23fce1e:	4b04      	ldr	r3, [pc, #16]	; (23fce30 <HAL_USB_USART_Begin+0x18>)
 23fce20:	4403      	add	r3, r0
 23fce22:	681b      	ldr	r3, [r3, #0]
 23fce24:	685b      	ldr	r3, [r3, #4]
 23fce26:	9302      	str	r3, [sp, #8]
 23fce28:	bd09      	pop	{r0, r3, pc}
 23fce2a:	0000      	.short	0x0000
 23fce2c:	1007a458 	.word	0x1007a458
 23fce30:	00000034 	.word	0x00000034

023fce34 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fce34:	b509      	push	{r0, r3, lr}
 23fce36:	4804      	ldr	r0, [pc, #16]	; (23fce48 <HAL_USB_USART_End+0x14>)
 23fce38:	6800      	ldr	r0, [r0, #0]
 23fce3a:	4b04      	ldr	r3, [pc, #16]	; (23fce4c <HAL_USB_USART_End+0x18>)
 23fce3c:	4403      	add	r3, r0
 23fce3e:	681b      	ldr	r3, [r3, #0]
 23fce40:	689b      	ldr	r3, [r3, #8]
 23fce42:	9302      	str	r3, [sp, #8]
 23fce44:	bd09      	pop	{r0, r3, pc}
 23fce46:	0000      	.short	0x0000
 23fce48:	1007a458 	.word	0x1007a458
 23fce4c:	00000034 	.word	0x00000034

023fce50 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fce50:	b509      	push	{r0, r3, lr}
 23fce52:	4804      	ldr	r0, [pc, #16]	; (23fce64 <HAL_USB_USART_Available_Data+0x14>)
 23fce54:	6800      	ldr	r0, [r0, #0]
 23fce56:	4b04      	ldr	r3, [pc, #16]	; (23fce68 <HAL_USB_USART_Available_Data+0x18>)
 23fce58:	4403      	add	r3, r0
 23fce5a:	681b      	ldr	r3, [r3, #0]
 23fce5c:	691b      	ldr	r3, [r3, #16]
 23fce5e:	9302      	str	r3, [sp, #8]
 23fce60:	bd09      	pop	{r0, r3, pc}
 23fce62:	0000      	.short	0x0000
 23fce64:	1007a458 	.word	0x1007a458
 23fce68:	00000034 	.word	0x00000034

023fce6c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fce6c:	b509      	push	{r0, r3, lr}
 23fce6e:	4804      	ldr	r0, [pc, #16]	; (23fce80 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fce70:	6800      	ldr	r0, [r0, #0]
 23fce72:	4b04      	ldr	r3, [pc, #16]	; (23fce84 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fce74:	4403      	add	r3, r0
 23fce76:	681b      	ldr	r3, [r3, #0]
 23fce78:	695b      	ldr	r3, [r3, #20]
 23fce7a:	9302      	str	r3, [sp, #8]
 23fce7c:	bd09      	pop	{r0, r3, pc}
 23fce7e:	0000      	.short	0x0000
 23fce80:	1007a458 	.word	0x1007a458
 23fce84:	00000034 	.word	0x00000034

023fce88 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fce88:	b509      	push	{r0, r3, lr}
 23fce8a:	4804      	ldr	r0, [pc, #16]	; (23fce9c <HAL_USB_USART_Receive_Data+0x14>)
 23fce8c:	6800      	ldr	r0, [r0, #0]
 23fce8e:	4b04      	ldr	r3, [pc, #16]	; (23fcea0 <HAL_USB_USART_Receive_Data+0x18>)
 23fce90:	4403      	add	r3, r0
 23fce92:	681b      	ldr	r3, [r3, #0]
 23fce94:	699b      	ldr	r3, [r3, #24]
 23fce96:	9302      	str	r3, [sp, #8]
 23fce98:	bd09      	pop	{r0, r3, pc}
 23fce9a:	0000      	.short	0x0000
 23fce9c:	1007a458 	.word	0x1007a458
 23fcea0:	00000034 	.word	0x00000034

023fcea4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fcea4:	b509      	push	{r0, r3, lr}
 23fcea6:	4804      	ldr	r0, [pc, #16]	; (23fceb8 <HAL_USB_USART_Send_Data+0x14>)
 23fcea8:	6800      	ldr	r0, [r0, #0]
 23fceaa:	4b04      	ldr	r3, [pc, #16]	; (23fcebc <HAL_USB_USART_Send_Data+0x18>)
 23fceac:	4403      	add	r3, r0
 23fceae:	681b      	ldr	r3, [r3, #0]
 23fceb0:	69db      	ldr	r3, [r3, #28]
 23fceb2:	9302      	str	r3, [sp, #8]
 23fceb4:	bd09      	pop	{r0, r3, pc}
 23fceb6:	0000      	.short	0x0000
 23fceb8:	1007a458 	.word	0x1007a458
 23fcebc:	00000034 	.word	0x00000034

023fcec0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fcec0:	b509      	push	{r0, r3, lr}
 23fcec2:	4804      	ldr	r0, [pc, #16]	; (23fced4 <HAL_USB_USART_Flush_Data+0x14>)
 23fcec4:	6800      	ldr	r0, [r0, #0]
 23fcec6:	4b04      	ldr	r3, [pc, #16]	; (23fced8 <HAL_USB_USART_Flush_Data+0x18>)
 23fcec8:	4403      	add	r3, r0
 23fceca:	681b      	ldr	r3, [r3, #0]
 23fcecc:	6a1b      	ldr	r3, [r3, #32]
 23fcece:	9302      	str	r3, [sp, #8]
 23fced0:	bd09      	pop	{r0, r3, pc}
 23fced2:	0000      	.short	0x0000
 23fced4:	1007a458 	.word	0x1007a458
 23fced8:	00000034 	.word	0x00000034

023fcedc <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 23fcedc:	b509      	push	{r0, r3, lr}
 23fcede:	4804      	ldr	r0, [pc, #16]	; (23fcef0 <HAL_USB_USART_Is_Enabled+0x14>)
 23fcee0:	6800      	ldr	r0, [r0, #0]
 23fcee2:	4b04      	ldr	r3, [pc, #16]	; (23fcef4 <HAL_USB_USART_Is_Enabled+0x18>)
 23fcee4:	4403      	add	r3, r0
 23fcee6:	681b      	ldr	r3, [r3, #0]
 23fcee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fceea:	9302      	str	r3, [sp, #8]
 23fceec:	bd09      	pop	{r0, r3, pc}
 23fceee:	0000      	.short	0x0000
 23fcef0:	1007a458 	.word	0x1007a458
 23fcef4:	00000034 	.word	0x00000034

023fcef8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fcef8:	b509      	push	{r0, r3, lr}
 23fcefa:	4804      	ldr	r0, [pc, #16]	; (23fcf0c <panic_+0x14>)
 23fcefc:	6800      	ldr	r0, [r0, #0]
 23fcefe:	4b04      	ldr	r3, [pc, #16]	; (23fcf10 <panic_+0x18>)
 23fcf00:	4403      	add	r3, r0
 23fcf02:	681b      	ldr	r3, [r3, #0]
 23fcf04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fcf06:	9302      	str	r3, [sp, #8]
 23fcf08:	bd09      	pop	{r0, r3, pc}
 23fcf0a:	0000      	.short	0x0000
 23fcf0c:	1007a458 	.word	0x1007a458
 23fcf10:	00000048 	.word	0x00000048

023fcf14 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fcf14:	b509      	push	{r0, r3, lr}
 23fcf16:	4804      	ldr	r0, [pc, #16]	; (23fcf28 <log_message_v+0x14>)
 23fcf18:	6800      	ldr	r0, [r0, #0]
 23fcf1a:	4b04      	ldr	r3, [pc, #16]	; (23fcf2c <log_message_v+0x18>)
 23fcf1c:	4403      	add	r3, r0
 23fcf1e:	681b      	ldr	r3, [r3, #0]
 23fcf20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fcf22:	9302      	str	r3, [sp, #8]
 23fcf24:	bd09      	pop	{r0, r3, pc}
 23fcf26:	0000      	.short	0x0000
 23fcf28:	1007a458 	.word	0x1007a458
 23fcf2c:	00000048 	.word	0x00000048

023fcf30 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fcf30:	b509      	push	{r0, r3, lr}
 23fcf32:	4804      	ldr	r0, [pc, #16]	; (23fcf44 <log_level_name+0x14>)
 23fcf34:	6800      	ldr	r0, [r0, #0]
 23fcf36:	4b04      	ldr	r3, [pc, #16]	; (23fcf48 <log_level_name+0x18>)
 23fcf38:	4403      	add	r3, r0
 23fcf3a:	681b      	ldr	r3, [r3, #0]
 23fcf3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fcf3e:	9302      	str	r3, [sp, #8]
 23fcf40:	bd09      	pop	{r0, r3, pc}
 23fcf42:	0000      	.short	0x0000
 23fcf44:	1007a458 	.word	0x1007a458
 23fcf48:	00000048 	.word	0x00000048

023fcf4c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fcf4c:	b509      	push	{r0, r3, lr}
 23fcf4e:	4804      	ldr	r0, [pc, #16]	; (23fcf60 <log_set_callbacks+0x14>)
 23fcf50:	6800      	ldr	r0, [r0, #0]
 23fcf52:	4b04      	ldr	r3, [pc, #16]	; (23fcf64 <log_set_callbacks+0x18>)
 23fcf54:	4403      	add	r3, r0
 23fcf56:	681b      	ldr	r3, [r3, #0]
 23fcf58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fcf5a:	9302      	str	r3, [sp, #8]
 23fcf5c:	bd09      	pop	{r0, r3, pc}
 23fcf5e:	0000      	.short	0x0000
 23fcf60:	1007a458 	.word	0x1007a458
 23fcf64:	00000048 	.word	0x00000048

023fcf68 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fcf68:	b509      	push	{r0, r3, lr}
 23fcf6a:	4804      	ldr	r0, [pc, #16]	; (23fcf7c <set_system_mode+0x14>)
 23fcf6c:	6800      	ldr	r0, [r0, #0]
 23fcf6e:	4b04      	ldr	r3, [pc, #16]	; (23fcf80 <set_system_mode+0x18>)
 23fcf70:	4403      	add	r3, r0
 23fcf72:	681b      	ldr	r3, [r3, #0]
 23fcf74:	685b      	ldr	r3, [r3, #4]
 23fcf76:	9302      	str	r3, [sp, #8]
 23fcf78:	bd09      	pop	{r0, r3, pc}
 23fcf7a:	0000      	.short	0x0000
 23fcf7c:	1007a458 	.word	0x1007a458
 23fcf80:	00000008 	.word	0x00000008

023fcf84 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fcf84:	b509      	push	{r0, r3, lr}
 23fcf86:	4804      	ldr	r0, [pc, #16]	; (23fcf98 <system_delay_ms+0x14>)
 23fcf88:	6800      	ldr	r0, [r0, #0]
 23fcf8a:	4b04      	ldr	r3, [pc, #16]	; (23fcf9c <system_delay_ms+0x18>)
 23fcf8c:	4403      	add	r3, r0
 23fcf8e:	681b      	ldr	r3, [r3, #0]
 23fcf90:	695b      	ldr	r3, [r3, #20]
 23fcf92:	9302      	str	r3, [sp, #8]
 23fcf94:	bd09      	pop	{r0, r3, pc}
 23fcf96:	0000      	.short	0x0000
 23fcf98:	1007a458 	.word	0x1007a458
 23fcf9c:	00000008 	.word	0x00000008

023fcfa0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fcfa0:	b509      	push	{r0, r3, lr}
 23fcfa2:	4804      	ldr	r0, [pc, #16]	; (23fcfb4 <system_thread_set_state+0x14>)
 23fcfa4:	6800      	ldr	r0, [r0, #0]
 23fcfa6:	4b04      	ldr	r3, [pc, #16]	; (23fcfb8 <system_thread_set_state+0x18>)
 23fcfa8:	4403      	add	r3, r0
 23fcfaa:	681b      	ldr	r3, [r3, #0]
 23fcfac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcfae:	9302      	str	r3, [sp, #8]
 23fcfb0:	bd09      	pop	{r0, r3, pc}
 23fcfb2:	0000      	.short	0x0000
 23fcfb4:	1007a458 	.word	0x1007a458
 23fcfb8:	00000008 	.word	0x00000008

023fcfbc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fcfbc:	b509      	push	{r0, r3, lr}
 23fcfbe:	4804      	ldr	r0, [pc, #16]	; (23fcfd0 <system_ctrl_set_app_request_handler+0x14>)
 23fcfc0:	6800      	ldr	r0, [r0, #0]
 23fcfc2:	4b04      	ldr	r3, [pc, #16]	; (23fcfd4 <system_ctrl_set_app_request_handler+0x18>)
 23fcfc4:	4403      	add	r3, r0
 23fcfc6:	681b      	ldr	r3, [r3, #0]
 23fcfc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fcfcc:	9302      	str	r3, [sp, #8]
 23fcfce:	bd09      	pop	{r0, r3, pc}
 23fcfd0:	1007a458 	.word	0x1007a458
 23fcfd4:	00000008 	.word	0x00000008

023fcfd8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fcfd8:	b509      	push	{r0, r3, lr}
 23fcfda:	4804      	ldr	r0, [pc, #16]	; (23fcfec <system_ctrl_set_result+0x14>)
 23fcfdc:	6800      	ldr	r0, [r0, #0]
 23fcfde:	4b04      	ldr	r3, [pc, #16]	; (23fcff0 <system_ctrl_set_result+0x18>)
 23fcfe0:	4403      	add	r3, r0
 23fcfe2:	681b      	ldr	r3, [r3, #0]
 23fcfe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fcfe8:	9302      	str	r3, [sp, #8]
 23fcfea:	bd09      	pop	{r0, r3, pc}
 23fcfec:	1007a458 	.word	0x1007a458
 23fcff0:	00000008 	.word	0x00000008

023fcff4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fcff4:	b509      	push	{r0, r3, lr}
 23fcff6:	4804      	ldr	r0, [pc, #16]	; (23fd008 <network_connect+0x14>)
 23fcff8:	6800      	ldr	r0, [r0, #0]
 23fcffa:	4b04      	ldr	r3, [pc, #16]	; (23fd00c <network_connect+0x18>)
 23fcffc:	4403      	add	r3, r0
 23fcffe:	681b      	ldr	r3, [r3, #0]
 23fd000:	685b      	ldr	r3, [r3, #4]
 23fd002:	9302      	str	r3, [sp, #8]
 23fd004:	bd09      	pop	{r0, r3, pc}
 23fd006:	0000      	.short	0x0000
 23fd008:	1007a458 	.word	0x1007a458
 23fd00c:	00000028 	.word	0x00000028

023fd010 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fd010:	b509      	push	{r0, r3, lr}
 23fd012:	4804      	ldr	r0, [pc, #16]	; (23fd024 <network_connecting+0x14>)
 23fd014:	6800      	ldr	r0, [r0, #0]
 23fd016:	4b04      	ldr	r3, [pc, #16]	; (23fd028 <network_connecting+0x18>)
 23fd018:	4403      	add	r3, r0
 23fd01a:	681b      	ldr	r3, [r3, #0]
 23fd01c:	689b      	ldr	r3, [r3, #8]
 23fd01e:	9302      	str	r3, [sp, #8]
 23fd020:	bd09      	pop	{r0, r3, pc}
 23fd022:	0000      	.short	0x0000
 23fd024:	1007a458 	.word	0x1007a458
 23fd028:	00000028 	.word	0x00000028

023fd02c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fd02c:	b509      	push	{r0, r3, lr}
 23fd02e:	4804      	ldr	r0, [pc, #16]	; (23fd040 <network_disconnect+0x14>)
 23fd030:	6800      	ldr	r0, [r0, #0]
 23fd032:	4b04      	ldr	r3, [pc, #16]	; (23fd044 <network_disconnect+0x18>)
 23fd034:	4403      	add	r3, r0
 23fd036:	681b      	ldr	r3, [r3, #0]
 23fd038:	68db      	ldr	r3, [r3, #12]
 23fd03a:	9302      	str	r3, [sp, #8]
 23fd03c:	bd09      	pop	{r0, r3, pc}
 23fd03e:	0000      	.short	0x0000
 23fd040:	1007a458 	.word	0x1007a458
 23fd044:	00000028 	.word	0x00000028

023fd048 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fd048:	b509      	push	{r0, r3, lr}
 23fd04a:	4804      	ldr	r0, [pc, #16]	; (23fd05c <network_ready+0x14>)
 23fd04c:	6800      	ldr	r0, [r0, #0]
 23fd04e:	4b04      	ldr	r3, [pc, #16]	; (23fd060 <network_ready+0x18>)
 23fd050:	4403      	add	r3, r0
 23fd052:	681b      	ldr	r3, [r3, #0]
 23fd054:	691b      	ldr	r3, [r3, #16]
 23fd056:	9302      	str	r3, [sp, #8]
 23fd058:	bd09      	pop	{r0, r3, pc}
 23fd05a:	0000      	.short	0x0000
 23fd05c:	1007a458 	.word	0x1007a458
 23fd060:	00000028 	.word	0x00000028

023fd064 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd064:	b509      	push	{r0, r3, lr}
 23fd066:	4804      	ldr	r0, [pc, #16]	; (23fd078 <network_on+0x14>)
 23fd068:	6800      	ldr	r0, [r0, #0]
 23fd06a:	4b04      	ldr	r3, [pc, #16]	; (23fd07c <network_on+0x18>)
 23fd06c:	4403      	add	r3, r0
 23fd06e:	681b      	ldr	r3, [r3, #0]
 23fd070:	695b      	ldr	r3, [r3, #20]
 23fd072:	9302      	str	r3, [sp, #8]
 23fd074:	bd09      	pop	{r0, r3, pc}
 23fd076:	0000      	.short	0x0000
 23fd078:	1007a458 	.word	0x1007a458
 23fd07c:	00000028 	.word	0x00000028

023fd080 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd080:	b509      	push	{r0, r3, lr}
 23fd082:	4804      	ldr	r0, [pc, #16]	; (23fd094 <network_off+0x14>)
 23fd084:	6800      	ldr	r0, [r0, #0]
 23fd086:	4b04      	ldr	r3, [pc, #16]	; (23fd098 <network_off+0x18>)
 23fd088:	4403      	add	r3, r0
 23fd08a:	681b      	ldr	r3, [r3, #0]
 23fd08c:	699b      	ldr	r3, [r3, #24]
 23fd08e:	9302      	str	r3, [sp, #8]
 23fd090:	bd09      	pop	{r0, r3, pc}
 23fd092:	0000      	.short	0x0000
 23fd094:	1007a458 	.word	0x1007a458
 23fd098:	00000028 	.word	0x00000028

023fd09c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fd09c:	b509      	push	{r0, r3, lr}
 23fd09e:	4804      	ldr	r0, [pc, #16]	; (23fd0b0 <network_listen+0x14>)
 23fd0a0:	6800      	ldr	r0, [r0, #0]
 23fd0a2:	4b04      	ldr	r3, [pc, #16]	; (23fd0b4 <network_listen+0x18>)
 23fd0a4:	4403      	add	r3, r0
 23fd0a6:	681b      	ldr	r3, [r3, #0]
 23fd0a8:	69db      	ldr	r3, [r3, #28]
 23fd0aa:	9302      	str	r3, [sp, #8]
 23fd0ac:	bd09      	pop	{r0, r3, pc}
 23fd0ae:	0000      	.short	0x0000
 23fd0b0:	1007a458 	.word	0x1007a458
 23fd0b4:	00000028 	.word	0x00000028

023fd0b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fd0b8:	b509      	push	{r0, r3, lr}
 23fd0ba:	4804      	ldr	r0, [pc, #16]	; (23fd0cc <network_listening+0x14>)
 23fd0bc:	6800      	ldr	r0, [r0, #0]
 23fd0be:	4b04      	ldr	r3, [pc, #16]	; (23fd0d0 <network_listening+0x18>)
 23fd0c0:	4403      	add	r3, r0
 23fd0c2:	681b      	ldr	r3, [r3, #0]
 23fd0c4:	6a1b      	ldr	r3, [r3, #32]
 23fd0c6:	9302      	str	r3, [sp, #8]
 23fd0c8:	bd09      	pop	{r0, r3, pc}
 23fd0ca:	0000      	.short	0x0000
 23fd0cc:	1007a458 	.word	0x1007a458
 23fd0d0:	00000028 	.word	0x00000028

023fd0d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fd0d4:	b509      	push	{r0, r3, lr}
 23fd0d6:	4804      	ldr	r0, [pc, #16]	; (23fd0e8 <network_set_listen_timeout+0x14>)
 23fd0d8:	6800      	ldr	r0, [r0, #0]
 23fd0da:	4b04      	ldr	r3, [pc, #16]	; (23fd0ec <network_set_listen_timeout+0x18>)
 23fd0dc:	4403      	add	r3, r0
 23fd0de:	681b      	ldr	r3, [r3, #0]
 23fd0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd0e2:	9302      	str	r3, [sp, #8]
 23fd0e4:	bd09      	pop	{r0, r3, pc}
 23fd0e6:	0000      	.short	0x0000
 23fd0e8:	1007a458 	.word	0x1007a458
 23fd0ec:	00000028 	.word	0x00000028

023fd0f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fd0f0:	b509      	push	{r0, r3, lr}
 23fd0f2:	4804      	ldr	r0, [pc, #16]	; (23fd104 <network_get_listen_timeout+0x14>)
 23fd0f4:	6800      	ldr	r0, [r0, #0]
 23fd0f6:	4b04      	ldr	r3, [pc, #16]	; (23fd108 <network_get_listen_timeout+0x18>)
 23fd0f8:	4403      	add	r3, r0
 23fd0fa:	681b      	ldr	r3, [r3, #0]
 23fd0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd0fe:	9302      	str	r3, [sp, #8]
 23fd100:	bd09      	pop	{r0, r3, pc}
 23fd102:	0000      	.short	0x0000
 23fd104:	1007a458 	.word	0x1007a458
 23fd108:	00000028 	.word	0x00000028

023fd10c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fd10c:	b509      	push	{r0, r3, lr}
 23fd10e:	4804      	ldr	r0, [pc, #16]	; (23fd120 <network_is_on+0x14>)
 23fd110:	6800      	ldr	r0, [r0, #0]
 23fd112:	4b04      	ldr	r3, [pc, #16]	; (23fd124 <network_is_on+0x18>)
 23fd114:	4403      	add	r3, r0
 23fd116:	681b      	ldr	r3, [r3, #0]
 23fd118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd11a:	9302      	str	r3, [sp, #8]
 23fd11c:	bd09      	pop	{r0, r3, pc}
 23fd11e:	0000      	.short	0x0000
 23fd120:	1007a458 	.word	0x1007a458
 23fd124:	00000028 	.word	0x00000028

023fd128 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fd128:	b509      	push	{r0, r3, lr}
 23fd12a:	4804      	ldr	r0, [pc, #16]	; (23fd13c <network_is_off+0x14>)
 23fd12c:	6800      	ldr	r0, [r0, #0]
 23fd12e:	4b04      	ldr	r3, [pc, #16]	; (23fd140 <network_is_off+0x18>)
 23fd130:	4403      	add	r3, r0
 23fd132:	681b      	ldr	r3, [r3, #0]
 23fd134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd136:	9302      	str	r3, [sp, #8]
 23fd138:	bd09      	pop	{r0, r3, pc}
 23fd13a:	0000      	.short	0x0000
 23fd13c:	1007a458 	.word	0x1007a458
 23fd140:	00000028 	.word	0x00000028

023fd144 <network_preferred>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_preferred, network_handle_t(network_handle_t, bool, void*))
 23fd144:	b509      	push	{r0, r3, lr}
 23fd146:	4804      	ldr	r0, [pc, #16]	; (23fd158 <network_preferred+0x14>)
 23fd148:	6800      	ldr	r0, [r0, #0]
 23fd14a:	4b04      	ldr	r3, [pc, #16]	; (23fd15c <network_preferred+0x18>)
 23fd14c:	4403      	add	r3, r0
 23fd14e:	681b      	ldr	r3, [r3, #0]
 23fd150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fd152:	9302      	str	r3, [sp, #8]
 23fd154:	bd09      	pop	{r0, r3, pc}
 23fd156:	0000      	.short	0x0000
 23fd158:	1007a458 	.word	0x1007a458
 23fd15c:	00000028 	.word	0x00000028

023fd160 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23fd160:	b509      	push	{r0, r3, lr}
 23fd162:	4804      	ldr	r0, [pc, #16]	; (23fd174 <network_is_preferred+0x14>)
 23fd164:	6800      	ldr	r0, [r0, #0]
 23fd166:	4b04      	ldr	r3, [pc, #16]	; (23fd178 <network_is_preferred+0x18>)
 23fd168:	4403      	add	r3, r0
 23fd16a:	681b      	ldr	r3, [r3, #0]
 23fd16c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fd16e:	9302      	str	r3, [sp, #8]
 23fd170:	bd09      	pop	{r0, r3, pc}
 23fd172:	0000      	.short	0x0000
 23fd174:	1007a458 	.word	0x1007a458
 23fd178:	00000028 	.word	0x00000028

023fd17c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fd17c:	b509      	push	{r0, r3, lr}
 23fd17e:	4804      	ldr	r0, [pc, #16]	; (23fd190 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fd180:	6800      	ldr	r0, [r0, #0]
 23fd182:	4b04      	ldr	r3, [pc, #16]	; (23fd194 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fd184:	4403      	add	r3, r0
 23fd186:	681b      	ldr	r3, [r3, #0]
 23fd188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd18a:	9302      	str	r3, [sp, #8]
 23fd18c:	bd09      	pop	{r0, r3, pc}
 23fd18e:	0000      	.short	0x0000
 23fd190:	1007a458 	.word	0x1007a458
 23fd194:	0000002c 	.word	0x0000002c

023fd198 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fd198:	b509      	push	{r0, r3, lr}
 23fd19a:	4804      	ldr	r0, [pc, #16]	; (23fd1ac <malloc+0x14>)
 23fd19c:	6800      	ldr	r0, [r0, #0]
 23fd19e:	4b04      	ldr	r3, [pc, #16]	; (23fd1b0 <malloc+0x18>)
 23fd1a0:	4403      	add	r3, r0
 23fd1a2:	681b      	ldr	r3, [r3, #0]
 23fd1a4:	681b      	ldr	r3, [r3, #0]
 23fd1a6:	9302      	str	r3, [sp, #8]
 23fd1a8:	bd09      	pop	{r0, r3, pc}
 23fd1aa:	0000      	.short	0x0000
 23fd1ac:	1007a458 	.word	0x1007a458
 23fd1b0:	00000004 	.word	0x00000004

023fd1b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fd1b4:	b509      	push	{r0, r3, lr}
 23fd1b6:	4804      	ldr	r0, [pc, #16]	; (23fd1c8 <free+0x14>)
 23fd1b8:	6800      	ldr	r0, [r0, #0]
 23fd1ba:	4b04      	ldr	r3, [pc, #16]	; (23fd1cc <free+0x18>)
 23fd1bc:	4403      	add	r3, r0
 23fd1be:	681b      	ldr	r3, [r3, #0]
 23fd1c0:	685b      	ldr	r3, [r3, #4]
 23fd1c2:	9302      	str	r3, [sp, #8]
 23fd1c4:	bd09      	pop	{r0, r3, pc}
 23fd1c6:	0000      	.short	0x0000
 23fd1c8:	1007a458 	.word	0x1007a458
 23fd1cc:	00000004 	.word	0x00000004

023fd1d0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fd1d0:	b509      	push	{r0, r3, lr}
 23fd1d2:	4804      	ldr	r0, [pc, #16]	; (23fd1e4 <realloc+0x14>)
 23fd1d4:	6800      	ldr	r0, [r0, #0]
 23fd1d6:	4b04      	ldr	r3, [pc, #16]	; (23fd1e8 <realloc+0x18>)
 23fd1d8:	4403      	add	r3, r0
 23fd1da:	681b      	ldr	r3, [r3, #0]
 23fd1dc:	689b      	ldr	r3, [r3, #8]
 23fd1de:	9302      	str	r3, [sp, #8]
 23fd1e0:	bd09      	pop	{r0, r3, pc}
 23fd1e2:	0000      	.short	0x0000
 23fd1e4:	1007a458 	.word	0x1007a458
 23fd1e8:	00000004 	.word	0x00000004

023fd1ec <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fd1ec:	b509      	push	{r0, r3, lr}
 23fd1ee:	4804      	ldr	r0, [pc, #16]	; (23fd200 <vsnprintf+0x14>)
 23fd1f0:	6800      	ldr	r0, [r0, #0]
 23fd1f2:	4b04      	ldr	r3, [pc, #16]	; (23fd204 <vsnprintf+0x18>)
 23fd1f4:	4403      	add	r3, r0
 23fd1f6:	681b      	ldr	r3, [r3, #0]
 23fd1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd1fa:	9302      	str	r3, [sp, #8]
 23fd1fc:	bd09      	pop	{r0, r3, pc}
 23fd1fe:	0000      	.short	0x0000
 23fd200:	1007a458 	.word	0x1007a458
 23fd204:	00000004 	.word	0x00000004

023fd208 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fd208:	b509      	push	{r0, r3, lr}
 23fd20a:	4804      	ldr	r0, [pc, #16]	; (23fd21c <abort+0x14>)
 23fd20c:	6800      	ldr	r0, [r0, #0]
 23fd20e:	4b04      	ldr	r3, [pc, #16]	; (23fd220 <abort+0x18>)
 23fd210:	4403      	add	r3, r0
 23fd212:	681b      	ldr	r3, [r3, #0]
 23fd214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd216:	9302      	str	r3, [sp, #8]
 23fd218:	bd09      	pop	{r0, r3, pc}
 23fd21a:	0000      	.short	0x0000
 23fd21c:	1007a458 	.word	0x1007a458
 23fd220:	00000004 	.word	0x00000004

023fd224 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fd224:	b509      	push	{r0, r3, lr}
 23fd226:	4804      	ldr	r0, [pc, #16]	; (23fd238 <__errno+0x14>)
 23fd228:	6800      	ldr	r0, [r0, #0]
 23fd22a:	4b04      	ldr	r3, [pc, #16]	; (23fd23c <__errno+0x18>)
 23fd22c:	4403      	add	r3, r0
 23fd22e:	681b      	ldr	r3, [r3, #0]
 23fd230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd232:	9302      	str	r3, [sp, #8]
 23fd234:	bd09      	pop	{r0, r3, pc}
 23fd236:	0000      	.short	0x0000
 23fd238:	1007a458 	.word	0x1007a458
 23fd23c:	00000004 	.word	0x00000004

023fd240 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fd240:	b509      	push	{r0, r3, lr}
 23fd242:	4804      	ldr	r0, [pc, #16]	; (23fd254 <__assert_func+0x14>)
 23fd244:	6800      	ldr	r0, [r0, #0]
 23fd246:	4b04      	ldr	r3, [pc, #16]	; (23fd258 <__assert_func+0x18>)
 23fd248:	4403      	add	r3, r0
 23fd24a:	681b      	ldr	r3, [r3, #0]
 23fd24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd24e:	9302      	str	r3, [sp, #8]
 23fd250:	bd09      	pop	{r0, r3, pc}
 23fd252:	0000      	.short	0x0000
 23fd254:	1007a458 	.word	0x1007a458
 23fd258:	00000004 	.word	0x00000004

023fd25c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fd25c:	b509      	push	{r0, r3, lr}
 23fd25e:	4804      	ldr	r0, [pc, #16]	; (23fd270 <newlib_impure_ptr_callback+0x14>)
 23fd260:	6800      	ldr	r0, [r0, #0]
 23fd262:	4b04      	ldr	r3, [pc, #16]	; (23fd274 <newlib_impure_ptr_callback+0x18>)
 23fd264:	4403      	add	r3, r0
 23fd266:	681b      	ldr	r3, [r3, #0]
 23fd268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd26a:	9302      	str	r3, [sp, #8]
 23fd26c:	bd09      	pop	{r0, r3, pc}
 23fd26e:	0000      	.short	0x0000
 23fd270:	1007a458 	.word	0x1007a458
 23fd274:	00000004 	.word	0x00000004

023fd278 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd278:	2200      	movs	r2, #0
 23fd27a:	6840      	ldr	r0, [r0, #4]
 23fd27c:	4611      	mov	r1, r2
 23fd27e:	f7ff bf1b 	b.w	23fd0b8 <network_listening>

023fd282 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd282:	2200      	movs	r2, #0
 23fd284:	6840      	ldr	r0, [r0, #4]
 23fd286:	4611      	mov	r1, r2
 23fd288:	f7ff bf32 	b.w	23fd0f0 <network_get_listen_timeout>

023fd28c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd28c:	2200      	movs	r2, #0
 23fd28e:	6840      	ldr	r0, [r0, #4]
 23fd290:	f7ff bf20 	b.w	23fd0d4 <network_set_listen_timeout>

023fd294 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd294:	2200      	movs	r2, #0
 23fd296:	6840      	ldr	r0, [r0, #4]
 23fd298:	f081 0101 	eor.w	r1, r1, #1
 23fd29c:	f7ff befe 	b.w	23fd09c <network_listen>

023fd2a0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd2a0:	2300      	movs	r3, #0
 23fd2a2:	6840      	ldr	r0, [r0, #4]
 23fd2a4:	461a      	mov	r2, r3
 23fd2a6:	4619      	mov	r1, r3
 23fd2a8:	f7ff beea 	b.w	23fd080 <network_off>

023fd2ac <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd2ac:	2300      	movs	r3, #0
 23fd2ae:	6840      	ldr	r0, [r0, #4]
 23fd2b0:	461a      	mov	r2, r3
 23fd2b2:	4619      	mov	r1, r3
 23fd2b4:	f7ff bed6 	b.w	23fd064 <network_on>

023fd2b8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd2b8:	2200      	movs	r2, #0
 23fd2ba:	6840      	ldr	r0, [r0, #4]
 23fd2bc:	4611      	mov	r1, r2
 23fd2be:	f7ff bec3 	b.w	23fd048 <network_ready>

023fd2c2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd2c2:	2200      	movs	r2, #0
 23fd2c4:	6840      	ldr	r0, [r0, #4]
 23fd2c6:	4611      	mov	r1, r2
 23fd2c8:	f7ff bea2 	b.w	23fd010 <network_connecting>

023fd2cc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd2cc:	2200      	movs	r2, #0
 23fd2ce:	2102      	movs	r1, #2
 23fd2d0:	6840      	ldr	r0, [r0, #4]
 23fd2d2:	f7ff beab 	b.w	23fd02c <network_disconnect>

023fd2d6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd2d6:	2300      	movs	r3, #0
 23fd2d8:	6840      	ldr	r0, [r0, #4]
 23fd2da:	461a      	mov	r2, r3
 23fd2dc:	f7ff be8a 	b.w	23fcff4 <network_connect>

023fd2e0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd2e0:	2203      	movs	r2, #3
 23fd2e2:	4b02      	ldr	r3, [pc, #8]	; (23fd2ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd2e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd2e6:	4a02      	ldr	r2, [pc, #8]	; (23fd2f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd2e8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd2ea:	4770      	bx	lr
 23fd2ec:	1007ae5c 	.word	0x1007ae5c
 23fd2f0:	023ffb84 	.word	0x023ffb84

023fd2f4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fd2f4:	b510      	push	{r4, lr}
 23fd2f6:	4604      	mov	r4, r0
 23fd2f8:	4608      	mov	r0, r1
{
    _spi = spi;
 23fd2fa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fd2fc:	f7ff fd62 	bl	23fcdc4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd300:	2300      	movs	r3, #0
}
 23fd302:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd304:	6063      	str	r3, [r4, #4]
}
 23fd306:	bd10      	pop	{r4, pc}

023fd308 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fd308:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fd30a:	2000      	movs	r0, #0
 23fd30c:	4b04      	ldr	r3, [pc, #16]	; (23fd320 <_GLOBAL__sub_I_System+0x18>)
 23fd30e:	601a      	str	r2, [r3, #0]
 23fd310:	4b04      	ldr	r3, [pc, #16]	; (23fd324 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fd312:	4a05      	ldr	r2, [pc, #20]	; (23fd328 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fd314:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fd318:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fd31a:	f7ff be25 	b.w	23fcf68 <set_system_mode>
 23fd31e:	bf00      	nop
 23fd320:	1007ae70 	.word	0x1007ae70
 23fd324:	1007ae64 	.word	0x1007ae64
 23fd328:	ffff0000 	.word	0xffff0000

023fd32c <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fd32c:	b510      	push	{r4, lr}
 23fd32e:	4604      	mov	r4, r0
{
    free(buffer);
 23fd330:	6800      	ldr	r0, [r0, #0]
 23fd332:	f7ff ff3f 	bl	23fd1b4 <free>
}
 23fd336:	4620      	mov	r0, r4
 23fd338:	bd10      	pop	{r4, pc}

023fd33a <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fd33a:	b510      	push	{r4, lr}
 23fd33c:	4604      	mov	r4, r0
    if (buffer) {
 23fd33e:	6800      	ldr	r0, [r0, #0]
 23fd340:	b108      	cbz	r0, 23fd346 <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fd342:	f7ff ff37 	bl	23fd1b4 <free>
    }
    buffer = nullptr;
 23fd346:	2300      	movs	r3, #0
    capacity = len = 0;
 23fd348:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fd34c:	6023      	str	r3, [r4, #0]
}
 23fd34e:	bd10      	pop	{r4, pc}

023fd350 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fd350:	b538      	push	{r3, r4, r5, lr}
 23fd352:	4604      	mov	r4, r0
 23fd354:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fd356:	6800      	ldr	r0, [r0, #0]
 23fd358:	3101      	adds	r1, #1
 23fd35a:	f7ff ff39 	bl	23fd1d0 <realloc>
    if (newbuffer) {
 23fd35e:	b110      	cbz	r0, 23fd366 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
 23fd360:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fd364:	2001      	movs	r0, #1
    }
    return 0;
}
 23fd366:	bd38      	pop	{r3, r4, r5, pc}

023fd368 <_ZN6String7reserveEj>:
{
 23fd368:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
 23fd36a:	6803      	ldr	r3, [r0, #0]
{
 23fd36c:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
 23fd36e:	b123      	cbz	r3, 23fd37a <_ZN6String7reserveEj+0x12>
 23fd370:	6843      	ldr	r3, [r0, #4]
 23fd372:	428b      	cmp	r3, r1
 23fd374:	d301      	bcc.n	23fd37a <_ZN6String7reserveEj+0x12>
 23fd376:	2001      	movs	r0, #1
}
 23fd378:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fd37a:	4620      	mov	r0, r4
 23fd37c:	f7ff ffe8 	bl	23fd350 <_ZN6String12changeBufferEj>
 23fd380:	2800      	cmp	r0, #0
 23fd382:	d0f9      	beq.n	23fd378 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fd384:	68a3      	ldr	r3, [r4, #8]
 23fd386:	2b00      	cmp	r3, #0
 23fd388:	d1f5      	bne.n	23fd376 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fd38a:	6822      	ldr	r2, [r4, #0]
 23fd38c:	7013      	strb	r3, [r2, #0]
 23fd38e:	e7f2      	b.n	23fd376 <_ZN6String7reserveEj+0xe>

023fd390 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fd390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd392:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fd394:	4611      	mov	r1, r2
 23fd396:	9201      	str	r2, [sp, #4]
{
 23fd398:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fd39a:	f7ff ffe5 	bl	23fd368 <_ZN6String7reserveEj>
 23fd39e:	9a01      	ldr	r2, [sp, #4]
 23fd3a0:	b928      	cbnz	r0, 23fd3ae <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fd3a2:	4620      	mov	r0, r4
 23fd3a4:	f7ff ffc9 	bl	23fd33a <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fd3a8:	4620      	mov	r0, r4
 23fd3aa:	b003      	add	sp, #12
 23fd3ac:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fd3ae:	4629      	mov	r1, r5
    len = length;
 23fd3b0:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fd3b2:	6820      	ldr	r0, [r4, #0]
 23fd3b4:	f002 f930 	bl	23ff618 <memcpy>
    buffer[len] = 0;
 23fd3b8:	2100      	movs	r1, #0
 23fd3ba:	6822      	ldr	r2, [r4, #0]
 23fd3bc:	68a3      	ldr	r3, [r4, #8]
 23fd3be:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fd3c0:	e7f2      	b.n	23fd3a8 <_ZN6String4copyEPKcj+0x18>

023fd3c2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fd3c2:	b538      	push	{r3, r4, r5, lr}
 23fd3c4:	4605      	mov	r5, r0
    if (buffer) {
 23fd3c6:	6800      	ldr	r0, [r0, #0]
{
 23fd3c8:	460c      	mov	r4, r1
    if (buffer) {
 23fd3ca:	b170      	cbz	r0, 23fd3ea <_ZN6String4moveERS_+0x28>
        if (capacity >= rhs.len && rhs.buffer) {
 23fd3cc:	686a      	ldr	r2, [r5, #4]
 23fd3ce:	688b      	ldr	r3, [r1, #8]
 23fd3d0:	429a      	cmp	r2, r3
 23fd3d2:	d308      	bcc.n	23fd3e6 <_ZN6String4moveERS_+0x24>
 23fd3d4:	6809      	ldr	r1, [r1, #0]
 23fd3d6:	b131      	cbz	r1, 23fd3e6 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
 23fd3d8:	f002 f993 	bl	23ff702 <strcpy>
            len = rhs.len;
 23fd3dc:	68a3      	ldr	r3, [r4, #8]
 23fd3de:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
 23fd3e0:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity = 0;
    rhs.len = 0;
 23fd3e2:	60a3      	str	r3, [r4, #8]
}
 23fd3e4:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
 23fd3e6:	f7ff fee5 	bl	23fd1b4 <free>
    buffer = rhs.buffer;
 23fd3ea:	6823      	ldr	r3, [r4, #0]
 23fd3ec:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
 23fd3ee:	6863      	ldr	r3, [r4, #4]
 23fd3f0:	606b      	str	r3, [r5, #4]
    len = rhs.len;
 23fd3f2:	68a3      	ldr	r3, [r4, #8]
 23fd3f4:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
 23fd3f6:	2300      	movs	r3, #0
    rhs.capacity = 0;
 23fd3f8:	e9c4 3300 	strd	r3, r3, [r4]
 23fd3fc:	e7f1      	b.n	23fd3e2 <_ZN6String4moveERS_+0x20>

023fd3fe <_ZN6StringC1EOS_>:
    buffer = nullptr;
 23fd3fe:	2300      	movs	r3, #0
String::String(String &&rval)
 23fd400:	b510      	push	{r4, lr}
 23fd402:	4604      	mov	r4, r0
    capacity = 0;
 23fd404:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fd408:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fd40a:	7303      	strb	r3, [r0, #12]
    move(rval);
 23fd40c:	f7ff ffd9 	bl	23fd3c2 <_ZN6String4moveERS_>
}
 23fd410:	4620      	mov	r0, r4
 23fd412:	bd10      	pop	{r4, pc}

023fd414 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23fd414:	4288      	cmp	r0, r1
{
 23fd416:	b510      	push	{r4, lr}
 23fd418:	4604      	mov	r4, r0
    if (this == &rhs) {
 23fd41a:	d005      	beq.n	23fd428 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23fd41c:	680b      	ldr	r3, [r1, #0]
 23fd41e:	b12b      	cbz	r3, 23fd42c <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23fd420:	688a      	ldr	r2, [r1, #8]
 23fd422:	4619      	mov	r1, r3
 23fd424:	f7ff ffb4 	bl	23fd390 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fd428:	4620      	mov	r0, r4
 23fd42a:	bd10      	pop	{r4, pc}
        invalidate();
 23fd42c:	f7ff ff85 	bl	23fd33a <_ZN6String10invalidateEv>
 23fd430:	e7fa      	b.n	23fd428 <_ZN6StringaSERKS_+0x14>

023fd432 <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23fd432:	2300      	movs	r3, #0
String::String(const String &value)
 23fd434:	b510      	push	{r4, lr}
 23fd436:	4604      	mov	r4, r0
    capacity = 0;
 23fd438:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fd43c:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fd43e:	7303      	strb	r3, [r0, #12]
    *this = value;
 23fd440:	f7ff ffe8 	bl	23fd414 <_ZN6StringaSERKS_>
}
 23fd444:	4620      	mov	r0, r4
 23fd446:	bd10      	pop	{r4, pc}

023fd448 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 23fd448:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fd44a:	6843      	ldr	r3, [r0, #4]
    {
 23fd44c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fd44e:	3b01      	subs	r3, #1
 23fd450:	6043      	str	r3, [r0, #4]
 23fd452:	b963      	cbnz	r3, 23fd46e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
 23fd454:	6803      	ldr	r3, [r0, #0]
 23fd456:	689b      	ldr	r3, [r3, #8]
 23fd458:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fd45a:	68a3      	ldr	r3, [r4, #8]
 23fd45c:	3b01      	subs	r3, #1
 23fd45e:	60a3      	str	r3, [r4, #8]
 23fd460:	b92b      	cbnz	r3, 23fd46e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fd462:	6823      	ldr	r3, [r4, #0]
 23fd464:	4620      	mov	r0, r4
        }
    }
 23fd466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fd46a:	68db      	ldr	r3, [r3, #12]
 23fd46c:	4718      	bx	r3
    }
 23fd46e:	bd10      	pop	{r4, pc}

023fd470 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd470:	b570      	push	{r4, r5, r6, lr}
 23fd472:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd474:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fd478:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fd47c:	42ae      	cmp	r6, r5
 23fd47e:	d004      	beq.n	23fd48a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fd480:	4628      	mov	r0, r5
 23fd482:	f7ff ff53 	bl	23fd32c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fd486:	3510      	adds	r5, #16
 23fd488:	e7f8      	b.n	23fd47c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fd48a:	6820      	ldr	r0, [r4, #0]
 23fd48c:	f7ff fe92 	bl	23fd1b4 <free>
    AllocatorT::free(data_);
}
 23fd490:	4620      	mov	r0, r4
 23fd492:	bd70      	pop	{r4, r5, r6, pc}

023fd494 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fd494:	b510      	push	{r4, lr}
 23fd496:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
 23fd498:	6800      	ldr	r0, [r0, #0]
 23fd49a:	b108      	cbz	r0, 23fd4a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23fd49c:	f7ff ffd4 	bl	23fd448 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23fd4a0:	4620      	mov	r0, r4
 23fd4a2:	bd10      	pop	{r4, pc}

023fd4a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fd4a4:	2300      	movs	r3, #0
 23fd4a6:	4802      	ldr	r0, [pc, #8]	; (23fd4b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fd4a8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fd4aa:	f7ff bb57 	b.w	23fcb5c <os_mutex_recursive_create>
 23fd4ae:	bf00      	nop
 23fd4b0:	1007ae74 	.word	0x1007ae74

023fd4b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fd4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd4b6:	4606      	mov	r6, r0
 23fd4b8:	460d      	mov	r5, r1
  size_t n = 0;
 23fd4ba:	2400      	movs	r4, #0
 23fd4bc:	188f      	adds	r7, r1, r2
  while (size--) {
 23fd4be:	42bd      	cmp	r5, r7
 23fd4c0:	d00c      	beq.n	23fd4dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fd4c2:	6833      	ldr	r3, [r6, #0]
 23fd4c4:	4630      	mov	r0, r6
 23fd4c6:	689b      	ldr	r3, [r3, #8]
 23fd4c8:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fd4cc:	4798      	blx	r3
     if (chunk>=0)
 23fd4ce:	1e03      	subs	r3, r0, #0
 23fd4d0:	db01      	blt.n	23fd4d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fd4d2:	441c      	add	r4, r3
  while (size--) {
 23fd4d4:	e7f3      	b.n	23fd4be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fd4d6:	2c00      	cmp	r4, #0
 23fd4d8:	bf08      	it	eq
 23fd4da:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fd4dc:	4620      	mov	r0, r4
 23fd4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd4e0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 23fd4e0:	b513      	push	{r0, r1, r4, lr}
 23fd4e2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
 23fd4e4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fd4e6:	b159      	cbz	r1, 23fd500 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fd4e8:	9101      	str	r1, [sp, #4]
 23fd4ea:	f7fe f9af 	bl	23fb84c <strlen>
 23fd4ee:	4602      	mov	r2, r0
 23fd4f0:	4620      	mov	r0, r4
 23fd4f2:	6823      	ldr	r3, [r4, #0]
 23fd4f4:	9901      	ldr	r1, [sp, #4]
 23fd4f6:	68db      	ldr	r3, [r3, #12]
    }
 23fd4f8:	b002      	add	sp, #8
 23fd4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fd4fe:	4718      	bx	r3
    }
 23fd500:	b002      	add	sp, #8
 23fd502:	bd10      	pop	{r4, pc}

023fd504 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fd504:	6803      	ldr	r3, [r0, #0]
 23fd506:	689b      	ldr	r3, [r3, #8]
 23fd508:	4718      	bx	r3

023fd50a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fd50a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fd50c:	210d      	movs	r1, #13
{
 23fd50e:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fd510:	f7ff fff8 	bl	23fd504 <_ZN5Print5printEc>
  n += print('\n');
 23fd514:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fd516:	4604      	mov	r4, r0
  n += print('\n');
 23fd518:	4628      	mov	r0, r5
 23fd51a:	f7ff fff3 	bl	23fd504 <_ZN5Print5printEc>
  return n;
}
 23fd51e:	4420      	add	r0, r4
 23fd520:	bd38      	pop	{r3, r4, r5, pc}

023fd522 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23fd522:	b538      	push	{r3, r4, r5, lr}
 23fd524:	4605      	mov	r5, r0
  return write(str);
 23fd526:	f7ff ffdb 	bl	23fd4e0 <_ZN5Print5writeEPKc>
 23fd52a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23fd52c:	4628      	mov	r0, r5
 23fd52e:	f7ff ffec 	bl	23fd50a <_ZN5Print7printlnEv>
  return n;
}
 23fd532:	4420      	add	r0, r4
 23fd534:	bd38      	pop	{r3, r4, r5, pc}

023fd536 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fd536:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fd538:	2a01      	cmp	r2, #1
 23fd53a:	bf98      	it	ls
 23fd53c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fd53e:	b530      	push	{r4, r5, lr}
 23fd540:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fd542:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fd546:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fd548:	460d      	mov	r5, r1
 23fd54a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fd54e:	fb01 5312 	mls	r3, r1, r2, r5
 23fd552:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd556:	2b09      	cmp	r3, #9
 23fd558:	bf94      	ite	ls
 23fd55a:	3330      	addls	r3, #48	; 0x30
 23fd55c:	3337      	addhi	r3, #55	; 0x37
 23fd55e:	b2db      	uxtb	r3, r3
  } while(n);
 23fd560:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd562:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fd566:	d9ef      	bls.n	23fd548 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fd568:	4621      	mov	r1, r4
 23fd56a:	f7ff ffb9 	bl	23fd4e0 <_ZN5Print5writeEPKc>
}
 23fd56e:	b00b      	add	sp, #44	; 0x2c
 23fd570:	bd30      	pop	{r4, r5, pc}

023fd572 <_ZN5Print7vprintfEbPKcSt9__va_list>:
  return n;
}
#endif // PARTICLE_WIRING_PRINT_NO_FLOAT

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 23fd572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd576:	b086      	sub	sp, #24
 23fd578:	af00      	add	r7, sp, #0
 23fd57a:	4605      	mov	r5, r0
 23fd57c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 23fd57e:	1d38      	adds	r0, r7, #4
 23fd580:	2114      	movs	r1, #20
{
 23fd582:	4614      	mov	r4, r2
    va_copy(args2, args);
 23fd584:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23fd586:	f7ff fe31 	bl	23fd1ec <vsnprintf>

    if (n<bufsize)
 23fd58a:	2813      	cmp	r0, #19
 23fd58c:	d80e      	bhi.n	23fd5ac <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23fd58e:	4628      	mov	r0, r5
 23fd590:	1d39      	adds	r1, r7, #4
 23fd592:	f7ff ffa5 	bl	23fd4e0 <_ZN5Print5writeEPKc>
 23fd596:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 23fd598:	b11e      	cbz	r6, 23fd5a2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23fd59a:	4628      	mov	r0, r5
 23fd59c:	f7ff ffb5 	bl	23fd50a <_ZN5Print7printlnEv>
 23fd5a0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 23fd5a2:	4620      	mov	r0, r4
 23fd5a4:	3718      	adds	r7, #24
 23fd5a6:	46bd      	mov	sp, r7
 23fd5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23fd5ac:	f100 0308 	add.w	r3, r0, #8
 23fd5b0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23fd5b4:	46e8      	mov	r8, sp
        char bigger[n+1];
 23fd5b6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23fd5ba:	4622      	mov	r2, r4
 23fd5bc:	1c41      	adds	r1, r0, #1
 23fd5be:	683b      	ldr	r3, [r7, #0]
 23fd5c0:	4668      	mov	r0, sp
 23fd5c2:	f7ff fe13 	bl	23fd1ec <vsnprintf>
  return write(str);
 23fd5c6:	4669      	mov	r1, sp
 23fd5c8:	4628      	mov	r0, r5
 23fd5ca:	f7ff ff89 	bl	23fd4e0 <_ZN5Print5writeEPKc>
 23fd5ce:	4604      	mov	r4, r0
 23fd5d0:	46c5      	mov	sp, r8
 23fd5d2:	e7e1      	b.n	23fd598 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023fd5d4 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fd5d4:	6880      	ldr	r0, [r0, #8]
 23fd5d6:	6803      	ldr	r3, [r0, #0]
 23fd5d8:	68db      	ldr	r3, [r3, #12]
 23fd5da:	4718      	bx	r3

023fd5dc <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fd5dc:	4770      	bx	lr

023fd5de <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fd5de:	4608      	mov	r0, r1
 23fd5e0:	b111      	cbz	r1, 23fd5e8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fd5e2:	680b      	ldr	r3, [r1, #0]
 23fd5e4:	685b      	ldr	r3, [r3, #4]
 23fd5e6:	4718      	bx	r3
}
 23fd5e8:	4770      	bx	lr

023fd5ea <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fd5ea:	4770      	bx	lr

023fd5ec <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd5ec:	4770      	bx	lr

023fd5ee <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fd5ee:	4770      	bx	lr

023fd5f0 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fd5f0:	4770      	bx	lr

023fd5f2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fd5f2:	b538      	push	{r3, r4, r5, lr}
 23fd5f4:	4604      	mov	r4, r0
 23fd5f6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fd5f8:	6800      	ldr	r0, [r0, #0]
 23fd5fa:	212e      	movs	r1, #46	; 0x2e
 23fd5fc:	f002 f877 	bl	23ff6ee <strchrnul>
    size = s - category;
 23fd600:	6823      	ldr	r3, [r4, #0]
 23fd602:	1ac3      	subs	r3, r0, r3
 23fd604:	602b      	str	r3, [r5, #0]
    if (size) {
 23fd606:	b123      	cbz	r3, 23fd612 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fd608:	7803      	ldrb	r3, [r0, #0]
 23fd60a:	b103      	cbz	r3, 23fd60e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fd60c:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23fd60e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd610:	6020      	str	r0, [r4, #0]
}
 23fd612:	4618      	mov	r0, r3
 23fd614:	bd38      	pop	{r3, r4, r5, pc}

023fd616 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fd616:	b510      	push	{r4, lr}
 23fd618:	4604      	mov	r4, r0
 23fd61a:	210c      	movs	r1, #12
 23fd61c:	f7fe f941 	bl	23fb8a2 <_ZdlPvj>
 23fd620:	4620      	mov	r0, r4
 23fd622:	bd10      	pop	{r4, pc}

023fd624 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fd624:	b510      	push	{r4, lr}
 23fd626:	4604      	mov	r4, r0
 23fd628:	2104      	movs	r1, #4
 23fd62a:	f7fe f93a 	bl	23fb8a2 <_ZdlPvj>
 23fd62e:	4620      	mov	r0, r4
 23fd630:	bd10      	pop	{r4, pc}

023fd632 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd632:	b510      	push	{r4, lr}
 23fd634:	4604      	mov	r4, r0
 23fd636:	2104      	movs	r1, #4
 23fd638:	f7fe f933 	bl	23fb8a2 <_ZdlPvj>
 23fd63c:	4620      	mov	r0, r4
 23fd63e:	bd10      	pop	{r4, pc}

023fd640 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fd640:	f7ff baa8 	b.w	23fcb94 <os_mutex_recursive_lock>

023fd644 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fd644:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fd646:	f7fe f8f7 	bl	23fb838 <strcmp>
}
 23fd64a:	fab0 f080 	clz	r0, r0
 23fd64e:	0940      	lsrs	r0, r0, #5
 23fd650:	bd08      	pop	{r3, pc}

023fd652 <__tcf_1>:
 23fd652:	4770      	bx	lr

023fd654 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fd654:	b510      	push	{r4, lr}
 23fd656:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fd658:	f001 f912 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fd65c:	4284      	cmp	r4, r0
 23fd65e:	d105      	bne.n	23fd66c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fd660:	f001 f90e 	bl	23fe880 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fd664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fd668:	f001 b8fa 	b.w	23fe860 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fd66c:	f001 fd50 	bl	23ff110 <_Z22__fetch_global_Serial1v>
 23fd670:	4284      	cmp	r4, r0
 23fd672:	d105      	bne.n	23fd680 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fd674:	f001 fd4c 	bl	23ff110 <_Z22__fetch_global_Serial1v>
}
 23fd678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fd67c:	f001 b97d 	b.w	23fe97a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fd680:	b12c      	cbz	r4, 23fd68e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fd682:	6823      	ldr	r3, [r4, #0]
 23fd684:	4620      	mov	r0, r4
}
 23fd686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd68a:	685b      	ldr	r3, [r3, #4]
 23fd68c:	4718      	bx	r3
 23fd68e:	bd10      	pop	{r4, pc}

023fd690 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd690:	680b      	ldr	r3, [r1, #0]
 23fd692:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fd694:	684b      	ldr	r3, [r1, #4]
 23fd696:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fd698:	b113      	cbz	r3, 23fd6a0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fd69a:	685a      	ldr	r2, [r3, #4]
 23fd69c:	3201      	adds	r2, #1
 23fd69e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd6a0:	4770      	bx	lr

023fd6a2 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fd6a2:	b513      	push	{r0, r1, r4, lr}
 23fd6a4:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fd6a6:	4608      	mov	r0, r1
 23fd6a8:	9101      	str	r1, [sp, #4]
 23fd6aa:	f7fe f8cf 	bl	23fb84c <strlen>
 23fd6ae:	4602      	mov	r2, r0
 23fd6b0:	4620      	mov	r0, r4
 23fd6b2:	9901      	ldr	r1, [sp, #4]
}
 23fd6b4:	b002      	add	sp, #8
 23fd6b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fd6ba:	f001 bc81 	b.w	23fefc0 <_ZN5spark10JSONWriter5valueEPKcj>

023fd6be <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fd6be:	b513      	push	{r0, r1, r4, lr}
 23fd6c0:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fd6c2:	4608      	mov	r0, r1
 23fd6c4:	9101      	str	r1, [sp, #4]
 23fd6c6:	f7fe f8c1 	bl	23fb84c <strlen>
 23fd6ca:	4602      	mov	r2, r0
 23fd6cc:	4620      	mov	r0, r4
 23fd6ce:	6823      	ldr	r3, [r4, #0]
 23fd6d0:	9901      	ldr	r1, [sp, #4]
 23fd6d2:	68db      	ldr	r3, [r3, #12]
}
 23fd6d4:	b002      	add	sp, #8
 23fd6d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fd6da:	4718      	bx	r3

023fd6dc <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fd6dc:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd6de:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fd6e0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fd6e4:	2201      	movs	r2, #1
 23fd6e6:	68db      	ldr	r3, [r3, #12]
 23fd6e8:	f10d 0107 	add.w	r1, sp, #7
 23fd6ec:	4798      	blx	r3
}
 23fd6ee:	b003      	add	sp, #12
 23fd6f0:	f85d fb04 	ldr.w	pc, [sp], #4

023fd6f4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fd6f4:	680a      	ldr	r2, [r1, #0]
 23fd6f6:	b510      	push	{r4, lr}
 23fd6f8:	6002      	str	r2, [r0, #0]
 23fd6fa:	684a      	ldr	r2, [r1, #4]
 23fd6fc:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fd6fe:	2200      	movs	r2, #0
 23fd700:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fd704:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd706:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd708:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd70a:	6084      	str	r4, [r0, #8]
 23fd70c:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd70e:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd710:	60c4      	str	r4, [r0, #12]
 23fd712:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd714:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd716:	6104      	str	r4, [r0, #16]
 23fd718:	bd10      	pop	{r4, pc}
	...

023fd71c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd71c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fd720:	f04f 0a14 	mov.w	sl, #20
 23fd724:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fd728:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fd72a:	4645      	mov	r5, r8
 23fd72c:	fb0a f404 	mul.w	r4, sl, r4
 23fd730:	9300      	str	r3, [sp, #0]
 23fd732:	4b17      	ldr	r3, [pc, #92]	; (23fd790 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd734:	10a4      	asrs	r4, r4, #2
 23fd736:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fd738:	2c00      	cmp	r4, #0
 23fd73a:	dd21      	ble.n	23fd780 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fd73c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fd73e:	fb0a f006 	mul.w	r0, sl, r6
 23fd742:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fd746:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fd74a:	463a      	mov	r2, r7
 23fd74c:	455f      	cmp	r7, fp
 23fd74e:	bf28      	it	cs
 23fd750:	465a      	movcs	r2, fp
 23fd752:	5828      	ldr	r0, [r5, r0]
 23fd754:	9101      	str	r1, [sp, #4]
 23fd756:	f001 ffdc 	bl	23ff712 <strncmp>
                if (cmp == 0) {
 23fd75a:	2800      	cmp	r0, #0
 23fd75c:	f04f 0301 	mov.w	r3, #1
 23fd760:	9901      	ldr	r1, [sp, #4]
 23fd762:	d10b      	bne.n	23fd77c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fd764:	455f      	cmp	r7, fp
 23fd766:	d103      	bne.n	23fd770 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fd768:	9a00      	ldr	r2, [sp, #0]
 23fd76a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd76c:	4634      	mov	r4, r6
 23fd76e:	e7e3      	b.n	23fd738 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fd770:	d9fc      	bls.n	23fd76c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fd772:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fd774:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fd778:	3e01      	subs	r6, #1
 23fd77a:	e7f7      	b.n	23fd76c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fd77c:	dbf9      	blt.n	23fd772 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fd77e:	e7f5      	b.n	23fd76c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fd780:	eba5 0508 	sub.w	r5, r5, r8
}
 23fd784:	4802      	ldr	r0, [pc, #8]	; (23fd790 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd786:	10ad      	asrs	r5, r5, #2
 23fd788:	4368      	muls	r0, r5
 23fd78a:	b003      	add	sp, #12
 23fd78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd790:	cccccccd 	.word	0xcccccccd

023fd794 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd794:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fd796:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fd798:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd79a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fd79c:	b303      	cbz	r3, 23fd7e0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fd79e:	b1f9      	cbz	r1, 23fd7e0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fd7a0:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fd7a2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fd7a6:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fd7a8:	a903      	add	r1, sp, #12
 23fd7aa:	a801      	add	r0, sp, #4
 23fd7ac:	f7ff ff21 	bl	23fd5f2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd7b0:	4601      	mov	r1, r0
 23fd7b2:	b1a8      	cbz	r0, 23fd7e0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd7b4:	f10d 030b 	add.w	r3, sp, #11
 23fd7b8:	4620      	mov	r0, r4
 23fd7ba:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fd7bc:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd7c0:	f7ff ffac 	bl	23fd71c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fd7c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fd7c8:	b153      	cbz	r3, 23fd7e0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fd7ca:	6823      	ldr	r3, [r4, #0]
 23fd7cc:	2414      	movs	r4, #20
 23fd7ce:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fd7d2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fd7d6:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fd7d8:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fd7da:	bfa8      	it	ge
 23fd7dc:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fd7de:	e7e3      	b.n	23fd7a8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fd7e0:	4628      	mov	r0, r5
 23fd7e2:	b004      	add	sp, #16
 23fd7e4:	bd70      	pop	{r4, r5, r6, pc}

023fd7e6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fd7e6:	b40e      	push	{r1, r2, r3}
 23fd7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd7ea:	b08c      	sub	sp, #48	; 0x30
 23fd7ec:	af00      	add	r7, sp, #0
 23fd7ee:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fd7f2:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd7f6:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd7f8:	462b      	mov	r3, r5
 23fd7fa:	2120      	movs	r1, #32
 23fd7fc:	f107 0010 	add.w	r0, r7, #16
 23fd800:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd802:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd804:	f7ff fcf2 	bl	23fd1ec <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fd808:	281f      	cmp	r0, #31
 23fd80a:	687a      	ldr	r2, [r7, #4]
 23fd80c:	d91a      	bls.n	23fd844 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fd80e:	f100 0308 	add.w	r3, r0, #8
 23fd812:	f023 0307 	bic.w	r3, r3, #7
        }
 23fd816:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fd818:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd81c:	1c41      	adds	r1, r0, #1
 23fd81e:	462b      	mov	r3, r5
 23fd820:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd822:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd824:	f7ff fce2 	bl	23fd1ec <vsnprintf>
        if (n > 0) {
 23fd828:	1e02      	subs	r2, r0, #0
 23fd82a:	dd04      	ble.n	23fd836 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fd82c:	6823      	ldr	r3, [r4, #0]
 23fd82e:	4669      	mov	r1, sp
 23fd830:	4620      	mov	r0, r4
 23fd832:	68db      	ldr	r3, [r3, #12]
 23fd834:	4798      	blx	r3
 23fd836:	46b5      	mov	sp, r6
}
 23fd838:	3730      	adds	r7, #48	; 0x30
 23fd83a:	46bd      	mov	sp, r7
 23fd83c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd840:	b003      	add	sp, #12
 23fd842:	4770      	bx	lr
    } else if (n > 0) {
 23fd844:	2800      	cmp	r0, #0
 23fd846:	d0f7      	beq.n	23fd838 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fd848:	6823      	ldr	r3, [r4, #0]
 23fd84a:	4602      	mov	r2, r0
 23fd84c:	68db      	ldr	r3, [r3, #12]
 23fd84e:	4620      	mov	r0, r4
 23fd850:	f107 0110 	add.w	r1, r7, #16
 23fd854:	4798      	blx	r3
}
 23fd856:	e7ef      	b.n	23fd838 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fd858 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fd858:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fd85a:	4c08      	ldr	r4, [pc, #32]	; (23fd87c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fd85c:	e8d4 3f8f 	ldab	r3, [r4]
 23fd860:	07db      	lsls	r3, r3, #31
 23fd862:	d409      	bmi.n	23fd878 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd864:	4620      	mov	r0, r4
 23fd866:	f7fe f82b 	bl	23fb8c0 <__cxa_guard_acquire>
 23fd86a:	b128      	cbz	r0, 23fd878 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd86c:	4620      	mov	r0, r4
 23fd86e:	f7fe f82c 	bl	23fb8ca <__cxa_guard_release>
 23fd872:	4803      	ldr	r0, [pc, #12]	; (23fd880 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fd874:	f001 fec1 	bl	23ff5fa <atexit>
}
 23fd878:	4802      	ldr	r0, [pc, #8]	; (23fd884 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fd87a:	bd10      	pop	{r4, pc}
 23fd87c:	1007ae7c 	.word	0x1007ae7c
 23fd880:	023fd5eb 	.word	0x023fd5eb
 23fd884:	1007a45c 	.word	0x1007a45c

023fd888 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fd888:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fd88a:	4c08      	ldr	r4, [pc, #32]	; (23fd8ac <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fd88c:	e8d4 3f8f 	ldab	r3, [r4]
 23fd890:	07db      	lsls	r3, r3, #31
 23fd892:	d409      	bmi.n	23fd8a8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd894:	4620      	mov	r0, r4
 23fd896:	f7fe f813 	bl	23fb8c0 <__cxa_guard_acquire>
 23fd89a:	b128      	cbz	r0, 23fd8a8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd89c:	4620      	mov	r0, r4
 23fd89e:	f7fe f814 	bl	23fb8ca <__cxa_guard_release>
 23fd8a2:	4803      	ldr	r0, [pc, #12]	; (23fd8b0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fd8a4:	f001 fea9 	bl	23ff5fa <atexit>
    return &factory;
}
 23fd8a8:	4802      	ldr	r0, [pc, #8]	; (23fd8b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fd8aa:	bd10      	pop	{r4, pc}
 23fd8ac:	1007ae80 	.word	0x1007ae80
 23fd8b0:	023fd653 	.word	0x023fd653
 23fd8b4:	1007a460 	.word	0x1007a460

023fd8b8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fd8b8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fd8ba:	2500      	movs	r5, #0
 23fd8bc:	4604      	mov	r4, r0
 23fd8be:	e9c0 5500 	strd	r5, r5, [r0]
 23fd8c2:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fd8c6:	6085      	str	r5, [r0, #8]
 23fd8c8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fd8ca:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fd8ce:	f7ff f945 	bl	23fcb5c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fd8d2:	f7ff ffc1 	bl	23fd858 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fd8d6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd8d8:	f7ff ffd6 	bl	23fd888 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fd8dc:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd8de:	6220      	str	r0, [r4, #32]
}
 23fd8e0:	4620      	mov	r0, r4
 23fd8e2:	bd38      	pop	{r3, r4, r5, pc}

023fd8e4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fd8e4:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fd8e6:	4c0a      	ldr	r4, [pc, #40]	; (23fd910 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fd8e8:	e8d4 3f8f 	ldab	r3, [r4]
 23fd8ec:	07db      	lsls	r3, r3, #31
 23fd8ee:	d40c      	bmi.n	23fd90a <_ZN5spark10LogManager8instanceEv+0x26>
 23fd8f0:	4620      	mov	r0, r4
 23fd8f2:	f7fd ffe5 	bl	23fb8c0 <__cxa_guard_acquire>
 23fd8f6:	b140      	cbz	r0, 23fd90a <_ZN5spark10LogManager8instanceEv+0x26>
 23fd8f8:	4806      	ldr	r0, [pc, #24]	; (23fd914 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd8fa:	f7ff ffdd 	bl	23fd8b8 <_ZN5spark10LogManagerC1Ev>
 23fd8fe:	4620      	mov	r0, r4
 23fd900:	f7fd ffe3 	bl	23fb8ca <__cxa_guard_release>
 23fd904:	4804      	ldr	r0, [pc, #16]	; (23fd918 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fd906:	f001 fe78 	bl	23ff5fa <atexit>
    return &mgr;
}
 23fd90a:	4802      	ldr	r0, [pc, #8]	; (23fd914 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd90c:	bd10      	pop	{r4, pc}
 23fd90e:	bf00      	nop
 23fd910:	1007ae78 	.word	0x1007ae78
 23fd914:	1007ae88 	.word	0x1007ae88
 23fd918:	023fde35 	.word	0x023fde35

023fd91c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fd91c:	2300      	movs	r3, #0
 23fd91e:	4a02      	ldr	r2, [pc, #8]	; (23fd928 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fd920:	4902      	ldr	r1, [pc, #8]	; (23fd92c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fd922:	4803      	ldr	r0, [pc, #12]	; (23fd930 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fd924:	f7ff bb12 	b.w	23fcf4c <log_set_callbacks>
 23fd928:	023fdc1d 	.word	0x023fdc1d
 23fd92c:	023fdba9 	.word	0x023fdba9
 23fd930:	023fdb29 	.word	0x023fdb29

023fd934 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fd934:	2300      	movs	r3, #0
 23fd936:	461a      	mov	r2, r3
 23fd938:	4619      	mov	r1, r3
 23fd93a:	4618      	mov	r0, r3
 23fd93c:	f7ff bb06 	b.w	23fcf4c <log_set_callbacks>

023fd940 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fd940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd942:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fd944:	688d      	ldr	r5, [r1, #8]
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fd946:	4668      	mov	r0, sp
 23fd948:	f7ff fea2 	bl	23fd690 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd94c:	466a      	mov	r2, sp
 23fd94e:	4629      	mov	r1, r5
 23fd950:	4620      	mov	r0, r4
 23fd952:	f001 fa55 	bl	23fee00 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 23fd956:	a801      	add	r0, sp, #4
 23fd958:	f7ff fd9c 	bl	23fd494 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd95c:	4620      	mov	r0, r4
 23fd95e:	b003      	add	sp, #12
 23fd960:	bd30      	pop	{r4, r5, pc}

023fd962 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fd962:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd964:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fd966:	68cd      	ldr	r5, [r1, #12]
 23fd968:	4668      	mov	r0, sp
 23fd96a:	f7ff fe91 	bl	23fd690 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd96e:	466a      	mov	r2, sp
 23fd970:	4629      	mov	r1, r5
 23fd972:	4620      	mov	r0, r4
 23fd974:	f001 fa20 	bl	23fedb8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd978:	a801      	add	r0, sp, #4
 23fd97a:	f7ff fd8b 	bl	23fd494 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd97e:	4620      	mov	r0, r4
 23fd980:	b003      	add	sp, #12
 23fd982:	bd30      	pop	{r4, r5, pc}

023fd984 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fd984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd986:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fd988:	690d      	ldr	r5, [r1, #16]
 23fd98a:	4668      	mov	r0, sp
 23fd98c:	f7ff fe80 	bl	23fd690 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd990:	466a      	mov	r2, sp
 23fd992:	4629      	mov	r1, r5
 23fd994:	4620      	mov	r0, r4
 23fd996:	f001 f9b8 	bl	23fed0a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd99a:	a801      	add	r0, sp, #4
 23fd99c:	f7ff fd7a 	bl	23fd494 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd9a0:	4620      	mov	r0, r4
 23fd9a2:	b003      	add	sp, #12
 23fd9a4:	bd30      	pop	{r4, r5, pc}
	...

023fd9a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fd9a8:	b570      	push	{r4, r5, r6, lr}
 23fd9aa:	b08a      	sub	sp, #40	; 0x28
 23fd9ac:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fd9ae:	4601      	mov	r1, r0
 23fd9b0:	a804      	add	r0, sp, #16
 23fd9b2:	f7ff ffc5 	bl	23fd940 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fd9b6:	4e14      	ldr	r6, [pc, #80]	; (23fda08 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fd9b8:	a804      	add	r0, sp, #16
 23fd9ba:	f001 fa39 	bl	23fee30 <_ZN5spark18JSONObjectIterator4nextEv>
 23fd9be:	b1e8      	cbz	r0, 23fd9fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fd9c0:	4668      	mov	r0, sp
 23fd9c2:	a904      	add	r1, sp, #16
 23fd9c4:	f7ff ffcd 	bl	23fd962 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fd9c8:	4631      	mov	r1, r6
 23fd9ca:	9802      	ldr	r0, [sp, #8]
 23fd9cc:	f7ff fe3a 	bl	23fd644 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fd9d0:	4604      	mov	r4, r0
 23fd9d2:	b110      	cbz	r0, 23fd9da <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fd9d4:	1e2c      	subs	r4, r5, #0
 23fd9d6:	bf18      	it	ne
 23fd9d8:	2401      	movne	r4, #1
 23fd9da:	a801      	add	r0, sp, #4
 23fd9dc:	f7ff fd5a 	bl	23fd494 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd9e0:	2c00      	cmp	r4, #0
 23fd9e2:	d0e9      	beq.n	23fd9b8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fd9e4:	4668      	mov	r0, sp
 23fd9e6:	a904      	add	r1, sp, #16
 23fd9e8:	f7ff ffcc 	bl	23fd984 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fd9ec:	4668      	mov	r0, sp
 23fd9ee:	f001 f9c2 	bl	23fed76 <_ZNK5spark9JSONValue5toIntEv>
 23fd9f2:	6028      	str	r0, [r5, #0]
 23fd9f4:	a801      	add	r0, sp, #4
 23fd9f6:	f7ff fd4d 	bl	23fd494 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd9fa:	e7dd      	b.n	23fd9b8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fd9fc:	a805      	add	r0, sp, #20
 23fd9fe:	f7ff fd49 	bl	23fd494 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fda02:	b00a      	add	sp, #40	; 0x28
 23fda04:	bd70      	pop	{r4, r5, r6, pc}
 23fda06:	bf00      	nop
 23fda08:	023ffbc0 	.word	0x023ffbc0

023fda0c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fda0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fda0e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fda10:	4913      	ldr	r1, [pc, #76]	; (23fda60 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fda12:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fda14:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fda16:	f7fd ff0f 	bl	23fb838 <strcmp>
 23fda1a:	b950      	cbnz	r0, 23fda32 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fda1c:	f000 ff30 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fda20:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fda24:	f000 ff18 	bl	23fe858 <_ZN9USBSerial5beginEl>
}
 23fda28:	b003      	add	sp, #12
 23fda2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fda2e:	f000 bf27 	b.w	23fe880 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fda32:	4620      	mov	r0, r4
 23fda34:	490b      	ldr	r1, [pc, #44]	; (23fda64 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fda36:	f7fd feff 	bl	23fb838 <strcmp>
 23fda3a:	b978      	cbnz	r0, 23fda5c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fda3c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fda40:	a901      	add	r1, sp, #4
 23fda42:	4628      	mov	r0, r5
        int baud = 9600;
 23fda44:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fda46:	f7ff ffaf 	bl	23fd9a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fda4a:	f001 fb61 	bl	23ff110 <_Z22__fetch_global_Serial1v>
 23fda4e:	9901      	ldr	r1, [sp, #4]
 23fda50:	f000 ff90 	bl	23fe974 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fda54:	f001 fb5c 	bl	23ff110 <_Z22__fetch_global_Serial1v>
}
 23fda58:	b003      	add	sp, #12
 23fda5a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fda5c:	2000      	movs	r0, #0
 23fda5e:	e7fb      	b.n	23fda58 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fda60:	023ffbc5 	.word	0x023ffbc5
 23fda64:	023ffbcc 	.word	0x023ffbcc

023fda68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fda68:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fda6a:	2614      	movs	r6, #20
 23fda6c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fda70:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fda72:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fda76:	42ae      	cmp	r6, r5
 23fda78:	d005      	beq.n	23fda86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fda7a:	f105 0008 	add.w	r0, r5, #8
 23fda7e:	f7ff fff3 	bl	23fda68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fda82:	3514      	adds	r5, #20
 23fda84:	e7f7      	b.n	23fda76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fda86:	6820      	ldr	r0, [r4, #0]
 23fda88:	f7ff fb94 	bl	23fd1b4 <free>
}
 23fda8c:	4620      	mov	r0, r4
 23fda8e:	bd70      	pop	{r4, r5, r6, pc}

023fda90 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fda90:	b510      	push	{r4, lr}
 23fda92:	4604      	mov	r4, r0
 23fda94:	300c      	adds	r0, #12
 23fda96:	f7ff ffe7 	bl	23fda68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fda9a:	4620      	mov	r0, r4
 23fda9c:	f7ff fce8 	bl	23fd470 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fdaa0:	4620      	mov	r0, r4
 23fdaa2:	bd10      	pop	{r4, pc}

023fdaa4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fdaa4:	b510      	push	{r4, lr}
 23fdaa6:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fdaa8:	4b03      	ldr	r3, [pc, #12]	; (23fdab8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fdaaa:	f840 3b04 	str.w	r3, [r0], #4
 23fdaae:	f7ff ffef 	bl	23fda90 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fdab2:	4620      	mov	r0, r4
 23fdab4:	bd10      	pop	{r4, pc}
 23fdab6:	bf00      	nop
 23fdab8:	023ffa3c 	.word	0x023ffa3c

023fdabc <_ZN5spark16StreamLogHandlerD0Ev>:
 23fdabc:	b510      	push	{r4, lr}
 23fdabe:	4604      	mov	r4, r0
 23fdac0:	f7ff fff0 	bl	23fdaa4 <_ZN5spark16StreamLogHandlerD1Ev>
 23fdac4:	4620      	mov	r0, r4
 23fdac6:	2124      	movs	r1, #36	; 0x24
 23fdac8:	f7fd feeb 	bl	23fb8a2 <_ZdlPvj>
 23fdacc:	4620      	mov	r0, r4
 23fdace:	bd10      	pop	{r4, pc}

023fdad0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fdad0:	b510      	push	{r4, lr}
 23fdad2:	4604      	mov	r4, r0
 23fdad4:	4b02      	ldr	r3, [pc, #8]	; (23fdae0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fdad6:	6003      	str	r3, [r0, #0]
 23fdad8:	f7ff ffe4 	bl	23fdaa4 <_ZN5spark16StreamLogHandlerD1Ev>
 23fdadc:	4620      	mov	r0, r4
 23fdade:	bd10      	pop	{r4, pc}
 23fdae0:	023ffc6c 	.word	0x023ffc6c

023fdae4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fdae4:	b510      	push	{r4, lr}
 23fdae6:	4604      	mov	r4, r0
 23fdae8:	f7ff fff2 	bl	23fdad0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fdaec:	4620      	mov	r0, r4
 23fdaee:	2124      	movs	r1, #36	; 0x24
 23fdaf0:	f7fd fed7 	bl	23fb8a2 <_ZdlPvj>
 23fdaf4:	4620      	mov	r0, r4
 23fdaf6:	bd10      	pop	{r4, pc}

023fdaf8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fdaf8:	2200      	movs	r2, #0
 23fdafa:	e9c0 2200 	strd	r2, r2, [r0]
 23fdafe:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fdb00:	b510      	push	{r4, lr}
 23fdb02:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdb04:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fdb06:	6004      	str	r4, [r0, #0]
 23fdb08:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdb0a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fdb0c:	6044      	str	r4, [r0, #4]
 23fdb0e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdb10:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fdb12:	6084      	str	r4, [r0, #8]
}
 23fdb14:	bd10      	pop	{r4, pc}

023fdb16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fdb16:	b510      	push	{r4, lr}
 23fdb18:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fdb1a:	6803      	ldr	r3, [r0, #0]
 23fdb1c:	6818      	ldr	r0, [r3, #0]
 23fdb1e:	f7ff f847 	bl	23fcbb0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fdb22:	4620      	mov	r0, r4
 23fdb24:	bd10      	pop	{r4, pc}
	...

023fdb28 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fdb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdb2c:	b087      	sub	sp, #28
 23fdb2e:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fdb30:	4b1c      	ldr	r3, [pc, #112]	; (23fdba4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fdb32:	4680      	mov	r8, r0
 23fdb34:	685b      	ldr	r3, [r3, #4]
 23fdb36:	4689      	mov	r9, r1
 23fdb38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fdb3c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fdb3e:	b96b      	cbnz	r3, 23fdb5c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fdb40:	f7ff fed0 	bl	23fd8e4 <_ZN5spark10LogManager8instanceEv>
 23fdb44:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdb46:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fdb4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdb4c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fdb4e:	f7ff fd77 	bl	23fd640 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fdb52:	7b23      	ldrb	r3, [r4, #12]
 23fdb54:	b12b      	cbz	r3, 23fdb62 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fdb56:	a805      	add	r0, sp, #20
 23fdb58:	f7ff ffdd 	bl	23fdb16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fdb5c:	b007      	add	sp, #28
 23fdb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fdb62:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fdb64:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fdb68:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fdb6a:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fdb6e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdb72:	45aa      	cmp	sl, r5
 23fdb74:	d012      	beq.n	23fdb9c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fdb76:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fdb7a:	4631      	mov	r1, r6
 23fdb7c:	1d38      	adds	r0, r7, #4
 23fdb7e:	f7ff fe09 	bl	23fd794 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fdb82:	4581      	cmp	r9, r0
 23fdb84:	d3f5      	bcc.n	23fdb72 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fdb86:	9a03      	ldr	r2, [sp, #12]
 23fdb88:	683b      	ldr	r3, [r7, #0]
 23fdb8a:	9200      	str	r2, [sp, #0]
 23fdb8c:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fdb90:	464a      	mov	r2, r9
 23fdb92:	4633      	mov	r3, r6
 23fdb94:	4641      	mov	r1, r8
 23fdb96:	4638      	mov	r0, r7
 23fdb98:	47d8      	blx	fp
 23fdb9a:	e7ea      	b.n	23fdb72 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fdb9c:	2300      	movs	r3, #0
 23fdb9e:	7323      	strb	r3, [r4, #12]
 23fdba0:	e7d9      	b.n	23fdb56 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fdba2:	bf00      	nop
 23fdba4:	e000ed00 	.word	0xe000ed00

023fdba8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fdba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdbac:	469b      	mov	fp, r3
 23fdbae:	4b1a      	ldr	r3, [pc, #104]	; (23fdc18 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fdbb0:	4680      	mov	r8, r0
 23fdbb2:	685b      	ldr	r3, [r3, #4]
 23fdbb4:	4689      	mov	r9, r1
 23fdbb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fdbba:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fdbbc:	b96b      	cbnz	r3, 23fdbda <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fdbbe:	f7ff fe91 	bl	23fd8e4 <_ZN5spark10LogManager8instanceEv>
 23fdbc2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdbc4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdbc8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdbca:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdbcc:	f7ff fd38 	bl	23fd640 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fdbd0:	7b23      	ldrb	r3, [r4, #12]
 23fdbd2:	b12b      	cbz	r3, 23fdbe0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fdbd4:	a801      	add	r0, sp, #4
 23fdbd6:	f7ff ff9e 	bl	23fdb16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fdbda:	b003      	add	sp, #12
 23fdbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fdbe0:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fdbe2:	b2f6      	uxtb	r6, r6
 23fdbe4:	7323      	strb	r3, [r4, #12]
 23fdbe6:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fdbea:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdbee:	4555      	cmp	r5, sl
 23fdbf0:	d00e      	beq.n	23fdc10 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fdbf2:	f855 7b04 	ldr.w	r7, [r5], #4
 23fdbf6:	4659      	mov	r1, fp
 23fdbf8:	1d38      	adds	r0, r7, #4
 23fdbfa:	f7ff fdcb 	bl	23fd794 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fdbfe:	4286      	cmp	r6, r0
 23fdc00:	d3f5      	bcc.n	23fdbee <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fdc02:	683b      	ldr	r3, [r7, #0]
 23fdc04:	464a      	mov	r2, r9
 23fdc06:	4641      	mov	r1, r8
 23fdc08:	4638      	mov	r0, r7
 23fdc0a:	68db      	ldr	r3, [r3, #12]
 23fdc0c:	4798      	blx	r3
 23fdc0e:	e7ee      	b.n	23fdbee <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fdc10:	2300      	movs	r3, #0
 23fdc12:	7323      	strb	r3, [r4, #12]
 23fdc14:	e7de      	b.n	23fdbd4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fdc16:	bf00      	nop
 23fdc18:	e000ed00 	.word	0xe000ed00

023fdc1c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fdc1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fdc20:	4b16      	ldr	r3, [pc, #88]	; (23fdc7c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fdc22:	4605      	mov	r5, r0
 23fdc24:	685b      	ldr	r3, [r3, #4]
 23fdc26:	460f      	mov	r7, r1
 23fdc28:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fdc2c:	bb1b      	cbnz	r3, 23fdc76 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fdc2e:	f7ff fe59 	bl	23fd8e4 <_ZN5spark10LogManager8instanceEv>
 23fdc32:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdc34:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdc38:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdc3a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdc3c:	f7ff fd00 	bl	23fd640 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fdc40:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fdc44:	2446      	movs	r4, #70	; 0x46
 23fdc46:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdc4a:	45b0      	cmp	r8, r6
 23fdc4c:	d109      	bne.n	23fdc62 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fdc4e:	a801      	add	r0, sp, #4
 23fdc50:	f7ff ff61 	bl	23fdb16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fdc54:	42a5      	cmp	r5, r4
 23fdc56:	bfb4      	ite	lt
 23fdc58:	2000      	movlt	r0, #0
 23fdc5a:	2001      	movge	r0, #1
}
 23fdc5c:	b002      	add	sp, #8
 23fdc5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fdc62:	f856 0b04 	ldr.w	r0, [r6], #4
 23fdc66:	4639      	mov	r1, r7
 23fdc68:	3004      	adds	r0, #4
 23fdc6a:	f7ff fd93 	bl	23fd794 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fdc6e:	4284      	cmp	r4, r0
 23fdc70:	bfa8      	it	ge
 23fdc72:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fdc74:	e7e9      	b.n	23fdc4a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fdc76:	2000      	movs	r0, #0
 23fdc78:	e7f0      	b.n	23fdc5c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fdc7a:	bf00      	nop
 23fdc7c:	e000ed00 	.word	0xe000ed00

023fdc80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fdc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdc82:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fdc86:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fdc88:	4604      	mov	r4, r0
 23fdc8a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdc8c:	db0d      	blt.n	23fdcaa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fdc8e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fdc90:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fdc92:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fdc94:	dd04      	ble.n	23fdca0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fdc96:	00b9      	lsls	r1, r7, #2
 23fdc98:	f7ff fa9a 	bl	23fd1d0 <realloc>
            if (!d) {
 23fdc9c:	b918      	cbnz	r0, 23fdca6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fdc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fdca0:	f7ff fa88 	bl	23fd1b4 <free>
        T* d = nullptr;
 23fdca4:	2000      	movs	r0, #0
        data_ = d;
 23fdca6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fdca8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fdcaa:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fdcac:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fdcae:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fdcb2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdcb4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fdcb8:	1d08      	adds	r0, r1, #4
 23fdcba:	f001 fcba 	bl	23ff632 <memmove>
    new(p) T(std::move(value));
 23fdcbe:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fdcc2:	6863      	ldr	r3, [r4, #4]
    return true;
 23fdcc4:	2001      	movs	r0, #1
    ++size_;
 23fdcc6:	3301      	adds	r3, #1
 23fdcc8:	6063      	str	r3, [r4, #4]
    return true;
 23fdcca:	e7e8      	b.n	23fdc9e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fdccc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fdccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdcce:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fdcd0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdcd4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdcd6:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fdcd8:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fdcda:	f7ff fcb1 	bl	23fd640 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fdcde:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fdce2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fdce6:	4293      	cmp	r3, r2
 23fdce8:	4619      	mov	r1, r3
 23fdcea:	d00a      	beq.n	23fdd02 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fdcec:	6809      	ldr	r1, [r1, #0]
 23fdcee:	3304      	adds	r3, #4
 23fdcf0:	42a9      	cmp	r1, r5
 23fdcf2:	d1f8      	bne.n	23fdce6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fdcf4:	a801      	add	r0, sp, #4
 23fdcf6:	f7ff ff0e 	bl	23fdb16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fdcfa:	2500      	movs	r5, #0
}
 23fdcfc:	4628      	mov	r0, r5
 23fdcfe:	b003      	add	sp, #12
 23fdd00:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fdd02:	4629      	mov	r1, r5
 23fdd04:	4620      	mov	r0, r4
 23fdd06:	f7ff ffbb 	bl	23fdc80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fdd0a:	4605      	mov	r5, r0
 23fdd0c:	2800      	cmp	r0, #0
 23fdd0e:	d0f1      	beq.n	23fdcf4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fdd10:	6863      	ldr	r3, [r4, #4]
 23fdd12:	2b01      	cmp	r3, #1
 23fdd14:	d101      	bne.n	23fdd1a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fdd16:	f7ff fe01 	bl	23fd91c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdd1a:	a801      	add	r0, sp, #4
 23fdd1c:	f7ff fefb 	bl	23fdb16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fdd20:	e7ec      	b.n	23fdcfc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fdd22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fdd22:	460b      	mov	r3, r1
 23fdd24:	b570      	push	{r4, r5, r6, lr}
 23fdd26:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fdd28:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fdd2c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fdd30:	4282      	cmp	r2, r0
 23fdd32:	d00f      	beq.n	23fdd54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fdd34:	4601      	mov	r1, r0
            if (*p == value) {
 23fdd36:	681d      	ldr	r5, [r3, #0]
 23fdd38:	f851 6b04 	ldr.w	r6, [r1], #4
 23fdd3c:	42ae      	cmp	r6, r5
 23fdd3e:	d107      	bne.n	23fdd50 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdd40:	1a52      	subs	r2, r2, r1
 23fdd42:	f001 fc76 	bl	23ff632 <memmove>
    return true;
 23fdd46:	2001      	movs	r0, #1
    --size_;
 23fdd48:	6863      	ldr	r3, [r4, #4]
 23fdd4a:	3b01      	subs	r3, #1
 23fdd4c:	6063      	str	r3, [r4, #4]
}
 23fdd4e:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fdd50:	4608      	mov	r0, r1
 23fdd52:	e7ed      	b.n	23fdd30 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fdd54:	2000      	movs	r0, #0
 23fdd56:	e7fa      	b.n	23fdd4e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fdd58 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fdd58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fdd5a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fdd5c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdd60:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fdd62:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdd64:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fdd66:	f7ff fc6b 	bl	23fd640 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fdd6a:	4620      	mov	r0, r4
 23fdd6c:	a901      	add	r1, sp, #4
 23fdd6e:	f7ff ffd8 	bl	23fdd22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fdd72:	b118      	cbz	r0, 23fdd7c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fdd74:	6863      	ldr	r3, [r4, #4]
 23fdd76:	b90b      	cbnz	r3, 23fdd7c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fdd78:	f7ff fddc 	bl	23fd934 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdd7c:	a803      	add	r0, sp, #12
 23fdd7e:	f7ff feca 	bl	23fdb16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fdd82:	b004      	add	sp, #16
 23fdd84:	bd10      	pop	{r4, pc}

023fdd86 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fdd86:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fdd88:	b570      	push	{r4, r5, r6, lr}
 23fdd8a:	4604      	mov	r4, r0
 23fdd8c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fdd90:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fdd94:	42ae      	cmp	r6, r5
 23fdd96:	d015      	beq.n	23fddc4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fdd98:	4620      	mov	r0, r4
 23fdd9a:	f105 0110 	add.w	r1, r5, #16
 23fdd9e:	f7ff ffc0 	bl	23fdd22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fdda2:	6863      	ldr	r3, [r4, #4]
 23fdda4:	b90b      	cbnz	r3, 23fddaa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fdda6:	f7ff fdc5 	bl	23fd934 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fddaa:	69e0      	ldr	r0, [r4, #28]
 23fddac:	6929      	ldr	r1, [r5, #16]
 23fddae:	6803      	ldr	r3, [r0, #0]
 23fddb0:	68db      	ldr	r3, [r3, #12]
 23fddb2:	4798      	blx	r3
        if (h.stream) {
 23fddb4:	6969      	ldr	r1, [r5, #20]
 23fddb6:	b119      	cbz	r1, 23fddc0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fddb8:	6a20      	ldr	r0, [r4, #32]
 23fddba:	6803      	ldr	r3, [r0, #0]
 23fddbc:	68db      	ldr	r3, [r3, #12]
 23fddbe:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fddc0:	3518      	adds	r5, #24
 23fddc2:	e7e7      	b.n	23fdd94 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fddc4:	2618      	movs	r6, #24
 23fddc6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fddca:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fddce:	42ae      	cmp	r6, r5
 23fddd0:	d004      	beq.n	23fdddc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fddd2:	4628      	mov	r0, r5
 23fddd4:	f7ff faaa 	bl	23fd32c <_ZN6StringD1Ev>
 23fddd8:	3518      	adds	r5, #24
 23fddda:	e7f8      	b.n	23fddce <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fdddc:	2300      	movs	r3, #0
 23fddde:	6163      	str	r3, [r4, #20]
}
 23fdde0:	bd70      	pop	{r4, r5, r6, pc}

023fdde2 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fdde2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fdde4:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fdde6:	f7ff fda5 	bl	23fd934 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fddea:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fddee:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fddf0:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fddf2:	f7ff fc25 	bl	23fd640 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fddf6:	4620      	mov	r0, r4
 23fddf8:	f7ff ffc5 	bl	23fdd86 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fddfc:	a801      	add	r0, sp, #4
 23fddfe:	f7ff fe8a 	bl	23fdb16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fde02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fde04:	b108      	cbz	r0, 23fde0a <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fde06:	f7fe feb7 	bl	23fcb78 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fde0a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fde0e:	2618      	movs	r6, #24
 23fde10:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fde14:	42ae      	cmp	r6, r5
 23fde16:	d004      	beq.n	23fde22 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fde18:	4628      	mov	r0, r5
 23fde1a:	f7ff fa87 	bl	23fd32c <_ZN6StringD1Ev>
 23fde1e:	3518      	adds	r5, #24
 23fde20:	e7f8      	b.n	23fde14 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fde22:	6920      	ldr	r0, [r4, #16]
 23fde24:	f7ff f9c6 	bl	23fd1b4 <free>
 23fde28:	6820      	ldr	r0, [r4, #0]
 23fde2a:	f7ff f9c3 	bl	23fd1b4 <free>
}
 23fde2e:	4620      	mov	r0, r4
 23fde30:	b002      	add	sp, #8
 23fde32:	bd70      	pop	{r4, r5, r6, pc}

023fde34 <__tcf_2>:
    static LogManager mgr;
 23fde34:	4801      	ldr	r0, [pc, #4]	; (23fde3c <__tcf_2+0x8>)
 23fde36:	f7ff bfd4 	b.w	23fdde2 <_ZN5spark10LogManagerD1Ev>
 23fde3a:	bf00      	nop
 23fde3c:	1007ae88 	.word	0x1007ae88

023fde40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fde40:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fde42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fde44:	4604      	mov	r4, r0
 23fde46:	460d      	mov	r5, r1
 23fde48:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fde4a:	d915      	bls.n	23fde78 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fde4c:	4290      	cmp	r0, r2
 23fde4e:	d214      	bcs.n	23fde7a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fde50:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fde54:	1a75      	subs	r5, r6, r1
 23fde56:	f1a1 0714 	sub.w	r7, r1, #20
 23fde5a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fde5c:	42b7      	cmp	r7, r6
 23fde5e:	d01a      	beq.n	23fde96 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fde60:	b11c      	cbz	r4, 23fde6a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fde62:	4631      	mov	r1, r6
 23fde64:	4620      	mov	r0, r4
 23fde66:	f7ff fc45 	bl	23fd6f4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fde6a:	f106 0008 	add.w	r0, r6, #8
 23fde6e:	f7ff fdfb 	bl	23fda68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fde72:	3e14      	subs	r6, #20
 23fde74:	3c14      	subs	r4, #20
 23fde76:	e7f1      	b.n	23fde5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fde78:	d00d      	beq.n	23fde96 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fde7a:	42b5      	cmp	r5, r6
 23fde7c:	d00b      	beq.n	23fde96 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fde7e:	b11c      	cbz	r4, 23fde88 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fde80:	4629      	mov	r1, r5
 23fde82:	4620      	mov	r0, r4
 23fde84:	f7ff fc36 	bl	23fd6f4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fde88:	f105 0008 	add.w	r0, r5, #8
 23fde8c:	f7ff fdec 	bl	23fda68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fde90:	3514      	adds	r5, #20
 23fde92:	3414      	adds	r4, #20
 23fde94:	e7f1      	b.n	23fde7a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fde96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fde98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fde98:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fde9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fde9c:	4604      	mov	r4, r0
 23fde9e:	460d      	mov	r5, r1
 23fdea0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fdea2:	d914      	bls.n	23fdece <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fdea4:	4290      	cmp	r0, r2
 23fdea6:	d213      	bcs.n	23fded0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fdea8:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fdeac:	1a75      	subs	r5, r6, r1
 23fdeae:	f1a1 0710 	sub.w	r7, r1, #16
 23fdeb2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fdeb4:	42b7      	cmp	r7, r6
 23fdeb6:	d018      	beq.n	23fdeea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fdeb8:	b11c      	cbz	r4, 23fdec2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fdeba:	4631      	mov	r1, r6
 23fdebc:	4620      	mov	r0, r4
 23fdebe:	f7ff fa9e 	bl	23fd3fe <_ZN6StringC1EOS_>
                end->~T();
 23fdec2:	4630      	mov	r0, r6
 23fdec4:	f7ff fa32 	bl	23fd32c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fdec8:	3e10      	subs	r6, #16
 23fdeca:	3c10      	subs	r4, #16
 23fdecc:	e7f2      	b.n	23fdeb4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fdece:	d00c      	beq.n	23fdeea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fded0:	42b5      	cmp	r5, r6
 23fded2:	d00a      	beq.n	23fdeea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fded4:	b11c      	cbz	r4, 23fdede <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fded6:	4629      	mov	r1, r5
 23fded8:	4620      	mov	r0, r4
 23fdeda:	f7ff fa90 	bl	23fd3fe <_ZN6StringC1EOS_>
                p->~T();
 23fdede:	4628      	mov	r0, r5
 23fdee0:	f7ff fa24 	bl	23fd32c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fdee4:	3510      	adds	r5, #16
 23fdee6:	3410      	adds	r4, #16
 23fdee8:	e7f2      	b.n	23fded0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fdeea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fdeec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fdeec:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fdeee:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fdef0:	4605      	mov	r5, r0
        if (n > 0) {
 23fdef2:	dd11      	ble.n	23fdf18 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fdef4:	0130      	lsls	r0, r6, #4
 23fdef6:	f7ff f94f 	bl	23fd198 <malloc>
            if (!d) {
 23fdefa:	4604      	mov	r4, r0
 23fdefc:	b158      	cbz	r0, 23fdf16 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fdefe:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fdf02:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fdf06:	f7ff ffc7 	bl	23fde98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fdf0a:	6828      	ldr	r0, [r5, #0]
 23fdf0c:	f7ff f952 	bl	23fd1b4 <free>
        return true;
 23fdf10:	2001      	movs	r0, #1
        data_ = d;
 23fdf12:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fdf14:	60ae      	str	r6, [r5, #8]
    }
 23fdf16:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fdf18:	2400      	movs	r4, #0
 23fdf1a:	e7f6      	b.n	23fdf0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fdf1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fdf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdf20:	4690      	mov	r8, r2
        capacity_(0) {
 23fdf22:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fdf24:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fdf26:	b095      	sub	sp, #84	; 0x54
 23fdf28:	9103      	str	r1, [sp, #12]
    return size_;
 23fdf2a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fdf2e:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fdf30:	4299      	cmp	r1, r3
        capacity_(0) {
 23fdf32:	e9c0 3300 	strd	r3, r3, [r0]
 23fdf36:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fdf3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fdf3e:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fdf42:	7602      	strb	r2, [r0, #24]
 23fdf44:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fdf46:	dc23      	bgt.n	23fdf90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fdf48:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fdf4c:	2314      	movs	r3, #20
 23fdf4e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fdf52:	42af      	cmp	r7, r5
 23fdf54:	d03b      	beq.n	23fdfce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fdf56:	4629      	mov	r1, r5
 23fdf58:	a80b      	add	r0, sp, #44	; 0x2c
 23fdf5a:	f7ff fa50 	bl	23fd3fe <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fdf5e:	a90b      	add	r1, sp, #44	; 0x2c
 23fdf60:	a80f      	add	r0, sp, #60	; 0x3c
 23fdf62:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fdf64:	f7ff fa4b 	bl	23fd3fe <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdf68:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fdf6c:	4299      	cmp	r1, r3
 23fdf6e:	da1b      	bge.n	23fdfa8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fdf70:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fdf72:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fdf74:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fdf78:	4631      	mov	r1, r6
 23fdf7a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fdf7e:	f106 0010 	add.w	r0, r6, #16
 23fdf82:	f7ff ff89 	bl	23fde98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fdf86:	b9ee      	cbnz	r6, 23fdfc4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fdf88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fdf8a:	3301      	adds	r3, #1
 23fdf8c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fdf8e:	e011      	b.n	23fdfb4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fdf90:	a808      	add	r0, sp, #32
 23fdf92:	f7ff ffab 	bl	23fdeec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fdf96:	2800      	cmp	r0, #0
 23fdf98:	d1d6      	bne.n	23fdf48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fdf9a:	a808      	add	r0, sp, #32
 23fdf9c:	f7ff fa68 	bl	23fd470 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fdfa0:	4620      	mov	r0, r4
 23fdfa2:	b015      	add	sp, #84	; 0x54
 23fdfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdfa8:	3101      	adds	r1, #1
 23fdfaa:	a808      	add	r0, sp, #32
 23fdfac:	f7ff ff9e 	bl	23fdeec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fdfb0:	2800      	cmp	r0, #0
 23fdfb2:	d1dd      	bne.n	23fdf70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fdfb4:	a80f      	add	r0, sp, #60	; 0x3c
 23fdfb6:	f7ff f9b9 	bl	23fd32c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fdfba:	a80b      	add	r0, sp, #44	; 0x2c
 23fdfbc:	f7ff f9b6 	bl	23fd32c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fdfc0:	3514      	adds	r5, #20
 23fdfc2:	e7c6      	b.n	23fdf52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fdfc4:	4630      	mov	r0, r6
 23fdfc6:	a90f      	add	r1, sp, #60	; 0x3c
 23fdfc8:	f7ff fa19 	bl	23fd3fe <_ZN6StringC1EOS_>
 23fdfcc:	e7dc      	b.n	23fdf88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fdfce:	2600      	movs	r6, #0
 23fdfd0:	f04f 0914 	mov.w	r9, #20
 23fdfd4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fdfd8:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fdfda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fdfde:	429e      	cmp	r6, r3
 23fdfe0:	da7c      	bge.n	23fe0dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23fdfe2:	0133      	lsls	r3, r6, #4
 23fdfe4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fdfe6:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fdfe8:	b90b      	cbnz	r3, 23fdfee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fdfea:	3601      	adds	r6, #1
 23fdfec:	e7f5      	b.n	23fdfda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fdfee:	2300      	movs	r3, #0
 23fdff0:	9307      	str	r3, [sp, #28]
 23fdff2:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fdff6:	ad0b      	add	r5, sp, #44	; 0x2c
 23fdff8:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fdffa:	a907      	add	r1, sp, #28
 23fdffc:	a806      	add	r0, sp, #24
 23fdffe:	f7ff faf8 	bl	23fd5f2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fe002:	4682      	mov	sl, r0
 23fe004:	2800      	cmp	r0, #0
 23fe006:	d0f0      	beq.n	23fdfea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fe008:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe00c:	4601      	mov	r1, r0
            bool found = false;
 23fe00e:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe012:	4628      	mov	r0, r5
 23fe014:	9a07      	ldr	r2, [sp, #28]
 23fe016:	f10d 0317 	add.w	r3, sp, #23
 23fe01a:	f7ff fb7f 	bl	23fd71c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe01e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe022:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe024:	2f00      	cmp	r7, #0
 23fe026:	d14a      	bne.n	23fe0be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fe028:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fe02c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fe030:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fe034:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fe038:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fe03c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fe040:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe042:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fe046:	4293      	cmp	r3, r2
 23fe048:	db17      	blt.n	23fe07a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fe04a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fe04e:	f1ba 0f00 	cmp.w	sl, #0
 23fe052:	dd30      	ble.n	23fe0b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fe054:	fb09 f00a 	mul.w	r0, r9, sl
 23fe058:	f7ff f89e 	bl	23fd198 <malloc>
            if (!d) {
 23fe05c:	4683      	mov	fp, r0
 23fe05e:	b360      	cbz	r0, 23fe0ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fe060:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe064:	fb09 1202 	mla	r2, r9, r2, r1
 23fe068:	f7ff feea 	bl	23fde40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fe06c:	6828      	ldr	r0, [r5, #0]
 23fe06e:	f7ff f8a1 	bl	23fd1b4 <free>
        data_ = d;
 23fe072:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fe076:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fe07a:	682b      	ldr	r3, [r5, #0]
 23fe07c:	9a01      	ldr	r2, [sp, #4]
 23fe07e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fe082:	686a      	ldr	r2, [r5, #4]
 23fe084:	4651      	mov	r1, sl
 23fe086:	fb09 3202 	mla	r2, r9, r2, r3
 23fe08a:	f10a 0014 	add.w	r0, sl, #20
 23fe08e:	f7ff fed7 	bl	23fde40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fe092:	f1ba 0f00 	cmp.w	sl, #0
 23fe096:	d003      	beq.n	23fe0a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fe098:	4650      	mov	r0, sl
 23fe09a:	a90f      	add	r1, sp, #60	; 0x3c
 23fe09c:	f7ff fb2a 	bl	23fd6f4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fe0a0:	686b      	ldr	r3, [r5, #4]
 23fe0a2:	3301      	adds	r3, #1
 23fe0a4:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fe0a6:	a811      	add	r0, sp, #68	; 0x44
 23fe0a8:	f7ff fcde 	bl	23fda68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe0ac:	b13f      	cbz	r7, 23fe0be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fe0ae:	a80b      	add	r0, sp, #44	; 0x2c
 23fe0b0:	f7ff fcda 	bl	23fda68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe0b4:	e771      	b.n	23fdf9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fe0b6:	46bb      	mov	fp, r7
 23fe0b8:	e7d8      	b.n	23fe06c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe0ba:	2701      	movs	r7, #1
 23fe0bc:	e7f3      	b.n	23fe0a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fe0be:	9b01      	ldr	r3, [sp, #4]
 23fe0c0:	682d      	ldr	r5, [r5, #0]
 23fe0c2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fe0c6:	9b06      	ldr	r3, [sp, #24]
 23fe0c8:	781b      	ldrb	r3, [r3, #0]
 23fe0ca:	b92b      	cbnz	r3, 23fe0d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fe0cc:	f8d8 3000 	ldr.w	r3, [r8]
 23fe0d0:	9a02      	ldr	r2, [sp, #8]
 23fe0d2:	4413      	add	r3, r2
 23fe0d4:	7c1b      	ldrb	r3, [r3, #16]
 23fe0d6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fe0d8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fe0da:	e78e      	b.n	23fdffa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe0dc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe0de:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe0e0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe0e2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe0e4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe0e6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fe0e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fe0ea:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe0ec:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe0ee:	60a2      	str	r2, [r4, #8]
 23fe0f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fe0f2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe0f4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe0f6:	60e2      	str	r2, [r4, #12]
 23fe0f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fe0fa:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe0fc:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe0fe:	6122      	str	r2, [r4, #16]
 23fe100:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fe102:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fe104:	9b03      	ldr	r3, [sp, #12]
 23fe106:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fe108:	6162      	str	r2, [r4, #20]
 23fe10a:	7623      	strb	r3, [r4, #24]
 23fe10c:	e7cf      	b.n	23fe0ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fe110 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe110:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe112:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fe114:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe116:	4617      	mov	r7, r2
 23fe118:	b087      	sub	sp, #28
 23fe11a:	460d      	mov	r5, r1
        stream_(&stream) {
 23fe11c:	4668      	mov	r0, sp
 23fe11e:	4619      	mov	r1, r3
 23fe120:	f7fe f92f 	bl	23fc382 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fe124:	4b0b      	ldr	r3, [pc, #44]	; (23fe154 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fe126:	4669      	mov	r1, sp
 23fe128:	f846 3b04 	str.w	r3, [r6], #4
 23fe12c:	a803      	add	r0, sp, #12
 23fe12e:	f7fe f928 	bl	23fc382 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fe132:	4639      	mov	r1, r7
 23fe134:	aa03      	add	r2, sp, #12
 23fe136:	4630      	mov	r0, r6
 23fe138:	f7ff fef0 	bl	23fdf1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe13c:	a803      	add	r0, sp, #12
 23fe13e:	f7fe f8df 	bl	23fc300 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fe142:	4668      	mov	r0, sp
 23fe144:	f7fe f8dc 	bl	23fc300 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fe148:	4620      	mov	r0, r4
        stream_(&stream) {
 23fe14a:	4b03      	ldr	r3, [pc, #12]	; (23fe158 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fe14c:	6225      	str	r5, [r4, #32]
 23fe14e:	6023      	str	r3, [r4, #0]
}
 23fe150:	b007      	add	sp, #28
 23fe152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fe154:	023ffa3c 	.word	0x023ffa3c
 23fe158:	023ffc54 	.word	0x023ffc54

023fe15c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fe15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe15e:	460f      	mov	r7, r1
 23fe160:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe162:	4638      	mov	r0, r7
 23fe164:	491c      	ldr	r1, [pc, #112]	; (23fe1d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fe166:	4616      	mov	r6, r2
 23fe168:	461d      	mov	r5, r3
 23fe16a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe16c:	f7fd fb64 	bl	23fb838 <strcmp>
 23fe170:	b9c0      	cbnz	r0, 23fe1a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fe172:	b1a4      	cbz	r4, 23fe19e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fe174:	4629      	mov	r1, r5
 23fe176:	a801      	add	r0, sp, #4
 23fe178:	f7ff fcbe 	bl	23fdaf8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe17c:	2024      	movs	r0, #36	; 0x24
 23fe17e:	4917      	ldr	r1, [pc, #92]	; (23fe1dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe180:	f001 fa34 	bl	23ff5ec <_ZnwjRKSt9nothrow_t>
 23fe184:	4605      	mov	r5, r0
 23fe186:	b130      	cbz	r0, 23fe196 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fe188:	ab01      	add	r3, sp, #4
 23fe18a:	4632      	mov	r2, r6
 23fe18c:	4621      	mov	r1, r4
 23fe18e:	f7ff ffbf 	bl	23fe110 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe192:	4b13      	ldr	r3, [pc, #76]	; (23fe1e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fe194:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe196:	a801      	add	r0, sp, #4
 23fe198:	f7fe f8b2 	bl	23fc300 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fe19c:	462c      	mov	r4, r5
}
 23fe19e:	4620      	mov	r0, r4
 23fe1a0:	b005      	add	sp, #20
 23fe1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fe1a4:	4638      	mov	r0, r7
 23fe1a6:	490f      	ldr	r1, [pc, #60]	; (23fe1e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fe1a8:	f7fd fb46 	bl	23fb838 <strcmp>
 23fe1ac:	b990      	cbnz	r0, 23fe1d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fe1ae:	2c00      	cmp	r4, #0
 23fe1b0:	d0f5      	beq.n	23fe19e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe1b2:	4629      	mov	r1, r5
 23fe1b4:	a801      	add	r0, sp, #4
 23fe1b6:	f7ff fc9f 	bl	23fdaf8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe1ba:	2024      	movs	r0, #36	; 0x24
 23fe1bc:	4907      	ldr	r1, [pc, #28]	; (23fe1dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe1be:	f001 fa15 	bl	23ff5ec <_ZnwjRKSt9nothrow_t>
 23fe1c2:	4605      	mov	r5, r0
 23fe1c4:	2800      	cmp	r0, #0
 23fe1c6:	d0e6      	beq.n	23fe196 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fe1c8:	4632      	mov	r2, r6
 23fe1ca:	4621      	mov	r1, r4
 23fe1cc:	ab01      	add	r3, sp, #4
 23fe1ce:	f7ff ff9f 	bl	23fe110 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe1d2:	e7e0      	b.n	23fe196 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fe1d4:	2400      	movs	r4, #0
 23fe1d6:	e7e2      	b.n	23fe19e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fe1d8:	023ffbd4 	.word	0x023ffbd4
 23fe1dc:	023ffe33 	.word	0x023ffe33
 23fe1e0:	023ffc6c 	.word	0x023ffc6c
 23fe1e4:	023ffbd8 	.word	0x023ffbd8

023fe1e8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fe1e8:	4b01      	ldr	r3, [pc, #4]	; (23fe1f0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fe1ea:	4a02      	ldr	r2, [pc, #8]	; (23fe1f4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fe1ec:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fe1ee:	4770      	bx	lr
 23fe1f0:	1007ae84 	.word	0x1007ae84
 23fe1f4:	023ffbe9 	.word	0x023ffbe9

023fe1f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe1fc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fe1fe:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe202:	4604      	mov	r4, r0
 23fe204:	460e      	mov	r6, r1
 23fe206:	4617      	mov	r7, r2
 23fe208:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fe20a:	f000 fb39 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fe20e:	4581      	cmp	r9, r0
 23fe210:	d04d      	beq.n	23fe2ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fe212:	792b      	ldrb	r3, [r5, #4]
 23fe214:	0719      	lsls	r1, r3, #28
 23fe216:	d504      	bpl.n	23fe222 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fe218:	4620      	mov	r0, r4
 23fe21a:	696a      	ldr	r2, [r5, #20]
 23fe21c:	4954      	ldr	r1, [pc, #336]	; (23fe370 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fe21e:	f7ff fae2 	bl	23fd7e6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fe222:	f1b8 0f00 	cmp.w	r8, #0
 23fe226:	d00d      	beq.n	23fe244 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fe228:	215b      	movs	r1, #91	; 0x5b
 23fe22a:	4620      	mov	r0, r4
 23fe22c:	f7ff fa56 	bl	23fd6dc <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fe230:	4641      	mov	r1, r8
 23fe232:	4620      	mov	r0, r4
 23fe234:	f7ff fa43 	bl	23fd6be <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fe238:	6823      	ldr	r3, [r4, #0]
 23fe23a:	2202      	movs	r2, #2
 23fe23c:	4620      	mov	r0, r4
 23fe23e:	68db      	ldr	r3, [r3, #12]
 23fe240:	494c      	ldr	r1, [pc, #304]	; (23fe374 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fe242:	4798      	blx	r3
    if (attr.has_file) {
 23fe244:	792b      	ldrb	r3, [r5, #4]
 23fe246:	07da      	lsls	r2, r3, #31
 23fe248:	d524      	bpl.n	23fe294 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fe24a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fe24e:	212f      	movs	r1, #47	; 0x2f
 23fe250:	4640      	mov	r0, r8
 23fe252:	f001 fa72 	bl	23ff73a <strrchr>
    if (s1) {
 23fe256:	b108      	cbz	r0, 23fe25c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fe258:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fe25c:	4641      	mov	r1, r8
 23fe25e:	4620      	mov	r0, r4
 23fe260:	f7ff fa2d 	bl	23fd6be <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fe264:	792b      	ldrb	r3, [r5, #4]
 23fe266:	079b      	lsls	r3, r3, #30
 23fe268:	d508      	bpl.n	23fe27c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fe26a:	213a      	movs	r1, #58	; 0x3a
 23fe26c:	4620      	mov	r0, r4
 23fe26e:	f7ff fa35 	bl	23fd6dc <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fe272:	4620      	mov	r0, r4
 23fe274:	68ea      	ldr	r2, [r5, #12]
 23fe276:	4940      	ldr	r1, [pc, #256]	; (23fe378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fe278:	f7ff fab5 	bl	23fd7e6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fe27c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fe27e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fe280:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fe284:	4620      	mov	r0, r4
            write(", ", 2);
 23fe286:	f04f 0202 	mov.w	r2, #2
 23fe28a:	68db      	ldr	r3, [r3, #12]
 23fe28c:	bf14      	ite	ne
 23fe28e:	493b      	ldrne	r1, [pc, #236]	; (23fe37c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fe290:	493b      	ldreq	r1, [pc, #236]	; (23fe380 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe292:	4798      	blx	r3
    if (attr.has_function) {
 23fe294:	792b      	ldrb	r3, [r5, #4]
 23fe296:	0758      	lsls	r0, r3, #29
 23fe298:	d51d      	bpl.n	23fe2d6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe29a:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe29c:	460b      	mov	r3, r1
 23fe29e:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fe2a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe2a4:	b160      	cbz	r0, 23fe2c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fe2a6:	2820      	cmp	r0, #32
 23fe2a8:	d108      	bne.n	23fe2bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fe2aa:	4619      	mov	r1, r3
 23fe2ac:	e7f7      	b.n	23fe29e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fe2ae:	4835      	ldr	r0, [pc, #212]	; (23fe384 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fe2b0:	f000 fc29 	bl	23feb06 <_ZN5spark12NetworkClass9listeningEv>
 23fe2b4:	2800      	cmp	r0, #0
 23fe2b6:	d0ac      	beq.n	23fe212 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fe2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fe2bc:	2828      	cmp	r0, #40	; 0x28
 23fe2be:	d1ee      	bne.n	23fe29e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fe2c0:	6823      	ldr	r3, [r4, #0]
 23fe2c2:	1a52      	subs	r2, r2, r1
 23fe2c4:	4620      	mov	r0, r4
 23fe2c6:	68db      	ldr	r3, [r3, #12]
 23fe2c8:	4798      	blx	r3
        write("(): ", 4);
 23fe2ca:	6823      	ldr	r3, [r4, #0]
 23fe2cc:	2204      	movs	r2, #4
 23fe2ce:	4620      	mov	r0, r4
 23fe2d0:	68db      	ldr	r3, [r3, #12]
 23fe2d2:	492d      	ldr	r1, [pc, #180]	; (23fe388 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fe2d4:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fe2d6:	2100      	movs	r1, #0
 23fe2d8:	4638      	mov	r0, r7
 23fe2da:	f7fe fe29 	bl	23fcf30 <log_level_name>
 23fe2de:	4601      	mov	r1, r0
    write(s);
 23fe2e0:	4620      	mov	r0, r4
 23fe2e2:	f7ff f9ec 	bl	23fd6be <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fe2e6:	6823      	ldr	r3, [r4, #0]
 23fe2e8:	2202      	movs	r2, #2
 23fe2ea:	4620      	mov	r0, r4
 23fe2ec:	68db      	ldr	r3, [r3, #12]
 23fe2ee:	4924      	ldr	r1, [pc, #144]	; (23fe380 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe2f0:	4798      	blx	r3
    if (msg) {
 23fe2f2:	b11e      	cbz	r6, 23fe2fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fe2f4:	4631      	mov	r1, r6
 23fe2f6:	4620      	mov	r0, r4
 23fe2f8:	f7ff f9e1 	bl	23fd6be <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fe2fc:	792b      	ldrb	r3, [r5, #4]
 23fe2fe:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fe302:	d02c      	beq.n	23fe35e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fe304:	6823      	ldr	r3, [r4, #0]
 23fe306:	4921      	ldr	r1, [pc, #132]	; (23fe38c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fe308:	68db      	ldr	r3, [r3, #12]
 23fe30a:	2202      	movs	r2, #2
 23fe30c:	4620      	mov	r0, r4
 23fe30e:	4798      	blx	r3
        if (attr.has_code) {
 23fe310:	792b      	ldrb	r3, [r5, #4]
 23fe312:	06d9      	lsls	r1, r3, #27
 23fe314:	d50a      	bpl.n	23fe32c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fe316:	6823      	ldr	r3, [r4, #0]
 23fe318:	2207      	movs	r2, #7
 23fe31a:	4620      	mov	r0, r4
 23fe31c:	491c      	ldr	r1, [pc, #112]	; (23fe390 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fe31e:	68db      	ldr	r3, [r3, #12]
 23fe320:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fe322:	4620      	mov	r0, r4
 23fe324:	69aa      	ldr	r2, [r5, #24]
 23fe326:	491b      	ldr	r1, [pc, #108]	; (23fe394 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fe328:	f7ff fa5d 	bl	23fd7e6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fe32c:	792b      	ldrb	r3, [r5, #4]
 23fe32e:	069a      	lsls	r2, r3, #26
 23fe330:	d511      	bpl.n	23fe356 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fe332:	06db      	lsls	r3, r3, #27
 23fe334:	d505      	bpl.n	23fe342 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fe336:	6823      	ldr	r3, [r4, #0]
 23fe338:	2202      	movs	r2, #2
 23fe33a:	4620      	mov	r0, r4
 23fe33c:	68db      	ldr	r3, [r3, #12]
 23fe33e:	490f      	ldr	r1, [pc, #60]	; (23fe37c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fe340:	4798      	blx	r3
            write("details = ", 10);
 23fe342:	6823      	ldr	r3, [r4, #0]
 23fe344:	4620      	mov	r0, r4
 23fe346:	4914      	ldr	r1, [pc, #80]	; (23fe398 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fe348:	220a      	movs	r2, #10
 23fe34a:	68db      	ldr	r3, [r3, #12]
 23fe34c:	4798      	blx	r3
            write(attr.details);
 23fe34e:	4620      	mov	r0, r4
 23fe350:	69e9      	ldr	r1, [r5, #28]
 23fe352:	f7ff f9b4 	bl	23fd6be <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fe356:	215d      	movs	r1, #93	; 0x5d
 23fe358:	4620      	mov	r0, r4
 23fe35a:	f7ff f9bf 	bl	23fd6dc <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fe35e:	6823      	ldr	r3, [r4, #0]
 23fe360:	4620      	mov	r0, r4
}
 23fe362:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fe366:	2202      	movs	r2, #2
 23fe368:	68db      	ldr	r3, [r3, #12]
 23fe36a:	490c      	ldr	r1, [pc, #48]	; (23fe39c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fe36c:	4718      	bx	r3
 23fe36e:	bf00      	nop
 23fe370:	023ffbed 	.word	0x023ffbed
 23fe374:	023ffbf4 	.word	0x023ffbf4
 23fe378:	023ff9b3 	.word	0x023ff9b3
 23fe37c:	023ffbf7 	.word	0x023ffbf7
 23fe380:	023ffbfc 	.word	0x023ffbfc
 23fe384:	1007aeec 	.word	0x1007aeec
 23fe388:	023ffbfa 	.word	0x023ffbfa
 23fe38c:	023ffbff 	.word	0x023ffbff
 23fe390:	023ffc02 	.word	0x023ffc02
 23fe394:	023ffc0a 	.word	0x023ffc0a
 23fe398:	023ffc0d 	.word	0x023ffc0d
 23fe39c:	023ffc18 	.word	0x023ffc18

023fe3a0 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe3a4:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fe3a6:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe3a8:	460d      	mov	r5, r1
 23fe3aa:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fe3ac:	f000 fa68 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fe3b0:	4287      	cmp	r7, r0
 23fe3b2:	d007      	beq.n	23fe3c4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fe3b4:	6a20      	ldr	r0, [r4, #32]
 23fe3b6:	4632      	mov	r2, r6
 23fe3b8:	6803      	ldr	r3, [r0, #0]
 23fe3ba:	4629      	mov	r1, r5
}
 23fe3bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fe3c0:	68db      	ldr	r3, [r3, #12]
 23fe3c2:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fe3c4:	4803      	ldr	r0, [pc, #12]	; (23fe3d4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fe3c6:	f000 fb9e 	bl	23feb06 <_ZN5spark12NetworkClass9listeningEv>
 23fe3ca:	2800      	cmp	r0, #0
 23fe3cc:	d0f2      	beq.n	23fe3b4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fe3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe3d2:	bf00      	nop
 23fe3d4:	1007aeec 	.word	0x1007aeec

023fe3d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe3d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe3dc:	b085      	sub	sp, #20
    return stream_;
 23fe3de:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fe3e2:	4605      	mov	r5, r0
 23fe3e4:	460f      	mov	r7, r1
 23fe3e6:	4690      	mov	r8, r2
 23fe3e8:	461e      	mov	r6, r3
 23fe3ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fe3ec:	f000 fa48 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fe3f0:	4581      	cmp	r9, r0
 23fe3f2:	d105      	bne.n	23fe400 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fe3f4:	4849      	ldr	r0, [pc, #292]	; (23fe51c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fe3f6:	f000 fb86 	bl	23feb06 <_ZN5spark12NetworkClass9listeningEv>
 23fe3fa:	2800      	cmp	r0, #0
 23fe3fc:	f040 808a 	bne.w	23fe514 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fe400:	f04f 0900 	mov.w	r9, #0
 23fe404:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fe406:	4a46      	ldr	r2, [pc, #280]	; (23fe520 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fe408:	a801      	add	r0, sp, #4
 23fe40a:	9201      	str	r2, [sp, #4]
 23fe40c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fe40e:	f88d 9008 	strb.w	r9, [sp, #8]
 23fe412:	f000 fd36 	bl	23fee82 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fe416:	4649      	mov	r1, r9
 23fe418:	4640      	mov	r0, r8
 23fe41a:	f7fe fd89 	bl	23fcf30 <log_level_name>
 23fe41e:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fe420:	4940      	ldr	r1, [pc, #256]	; (23fe524 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fe422:	2201      	movs	r2, #1
 23fe424:	a801      	add	r0, sp, #4
 23fe426:	f000 fdbb 	bl	23fefa0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe42a:	4641      	mov	r1, r8
 23fe42c:	f7ff f939 	bl	23fd6a2 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fe430:	b13f      	cbz	r7, 23fe442 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fe432:	493d      	ldr	r1, [pc, #244]	; (23fe528 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fe434:	2201      	movs	r2, #1
 23fe436:	a801      	add	r0, sp, #4
 23fe438:	f000 fdb2 	bl	23fefa0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe43c:	4639      	mov	r1, r7
 23fe43e:	f7ff f930 	bl	23fd6a2 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fe442:	b13e      	cbz	r6, 23fe454 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fe444:	4939      	ldr	r1, [pc, #228]	; (23fe52c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fe446:	2201      	movs	r2, #1
 23fe448:	a801      	add	r0, sp, #4
 23fe44a:	f000 fda9 	bl	23fefa0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe44e:	4631      	mov	r1, r6
 23fe450:	f7ff f927 	bl	23fd6a2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fe454:	7923      	ldrb	r3, [r4, #4]
 23fe456:	07df      	lsls	r7, r3, #31
 23fe458:	d50e      	bpl.n	23fe478 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fe45a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fe45c:	212f      	movs	r1, #47	; 0x2f
 23fe45e:	4630      	mov	r0, r6
 23fe460:	f001 f96b 	bl	23ff73a <strrchr>
    if (s1) {
 23fe464:	b100      	cbz	r0, 23fe468 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fe466:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fe468:	4931      	ldr	r1, [pc, #196]	; (23fe530 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fe46a:	2201      	movs	r2, #1
 23fe46c:	a801      	add	r0, sp, #4
 23fe46e:	f000 fd97 	bl	23fefa0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe472:	4631      	mov	r1, r6
 23fe474:	f7ff f915 	bl	23fd6a2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fe478:	7923      	ldrb	r3, [r4, #4]
 23fe47a:	079e      	lsls	r6, r3, #30
 23fe47c:	d507      	bpl.n	23fe48e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fe47e:	492d      	ldr	r1, [pc, #180]	; (23fe534 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fe480:	2202      	movs	r2, #2
 23fe482:	a801      	add	r0, sp, #4
 23fe484:	f000 fd8c 	bl	23fefa0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe488:	68e1      	ldr	r1, [r4, #12]
 23fe48a:	f000 fd07 	bl	23fee9c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fe48e:	7923      	ldrb	r3, [r4, #4]
 23fe490:	0758      	lsls	r0, r3, #29
 23fe492:	d514      	bpl.n	23fe4be <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe494:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe496:	4633      	mov	r3, r6
 23fe498:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fe49a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe49e:	b12a      	cbz	r2, 23fe4ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fe4a0:	2a20      	cmp	r2, #32
 23fe4a2:	d101      	bne.n	23fe4a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fe4a4:	461e      	mov	r6, r3
 23fe4a6:	e7f7      	b.n	23fe498 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fe4a8:	2a28      	cmp	r2, #40	; 0x28
 23fe4aa:	d1f5      	bne.n	23fe498 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fe4ac:	2202      	movs	r2, #2
 23fe4ae:	4922      	ldr	r1, [pc, #136]	; (23fe538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fe4b0:	a801      	add	r0, sp, #4
 23fe4b2:	f000 fd75 	bl	23fefa0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe4b6:	4631      	mov	r1, r6
 23fe4b8:	1bba      	subs	r2, r7, r6
 23fe4ba:	f000 fd81 	bl	23fefc0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fe4be:	7923      	ldrb	r3, [r4, #4]
 23fe4c0:	0719      	lsls	r1, r3, #28
 23fe4c2:	d507      	bpl.n	23fe4d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fe4c4:	491d      	ldr	r1, [pc, #116]	; (23fe53c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fe4c6:	2201      	movs	r2, #1
 23fe4c8:	a801      	add	r0, sp, #4
 23fe4ca:	f000 fd69 	bl	23fefa0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe4ce:	6961      	ldr	r1, [r4, #20]
 23fe4d0:	f000 fcf6 	bl	23feec0 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fe4d4:	7923      	ldrb	r3, [r4, #4]
 23fe4d6:	06da      	lsls	r2, r3, #27
 23fe4d8:	d508      	bpl.n	23fe4ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fe4da:	2204      	movs	r2, #4
 23fe4dc:	4918      	ldr	r1, [pc, #96]	; (23fe540 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fe4de:	eb0d 0002 	add.w	r0, sp, r2
 23fe4e2:	f000 fd5d 	bl	23fefa0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe4e6:	69a1      	ldr	r1, [r4, #24]
 23fe4e8:	f000 fcd8 	bl	23fee9c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fe4ec:	7923      	ldrb	r3, [r4, #4]
 23fe4ee:	069b      	lsls	r3, r3, #26
 23fe4f0:	d507      	bpl.n	23fe502 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fe4f2:	4914      	ldr	r1, [pc, #80]	; (23fe544 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fe4f4:	2206      	movs	r2, #6
 23fe4f6:	a801      	add	r0, sp, #4
 23fe4f8:	f000 fd52 	bl	23fefa0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe4fc:	69e1      	ldr	r1, [r4, #28]
 23fe4fe:	f7ff f8d0 	bl	23fd6a2 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fe502:	a801      	add	r0, sp, #4
 23fe504:	f000 fca7 	bl	23fee56 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fe508:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fe50a:	2202      	movs	r2, #2
 23fe50c:	6803      	ldr	r3, [r0, #0]
 23fe50e:	490e      	ldr	r1, [pc, #56]	; (23fe548 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fe510:	68db      	ldr	r3, [r3, #12]
 23fe512:	4798      	blx	r3
}
 23fe514:	b005      	add	sp, #20
 23fe516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fe51a:	bf00      	nop
 23fe51c:	1007aeec 	.word	0x1007aeec
 23fe520:	023ffc3c 	.word	0x023ffc3c
 23fe524:	023ffbca 	.word	0x023ffbca
 23fe528:	023ffc1b 	.word	0x023ffc1b
 23fe52c:	023ffec6 	.word	0x023ffec6
 23fe530:	023ffc1d 	.word	0x023ffc1d
 23fe534:	023ffc1f 	.word	0x023ffc1f
 23fe538:	023ffc22 	.word	0x023ffc22
 23fe53c:	023ffc25 	.word	0x023ffc25
 23fe540:	023ffc27 	.word	0x023ffc27
 23fe544:	023ffc2c 	.word	0x023ffc2c
 23fe548:	023ffc18 	.word	0x023ffc18

023fe54c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fe54c:	4b02      	ldr	r3, [pc, #8]	; (23fe558 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fe54e:	681a      	ldr	r2, [r3, #0]
 23fe550:	4b02      	ldr	r3, [pc, #8]	; (23fe55c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fe552:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fe554:	4770      	bx	lr
 23fe556:	bf00      	nop
 23fe558:	1007a464 	.word	0x1007a464
 23fe55c:	1007aeb0 	.word	0x1007aeb0

023fe560 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fe560:	2100      	movs	r1, #0
 23fe562:	f7fe bd0f 	b.w	23fcf84 <system_delay_ms>
	...

023fe568 <_GLOBAL__sub_I_RGB>:
 23fe568:	2200      	movs	r2, #0
 23fe56a:	4b01      	ldr	r3, [pc, #4]	; (23fe570 <_GLOBAL__sub_I_RGB+0x8>)
 23fe56c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fe56e:	4770      	bx	lr
 23fe570:	1007aeb4 	.word	0x1007aeb4

023fe574 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fe574:	4b01      	ldr	r3, [pc, #4]	; (23fe57c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fe576:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fe578:	4770      	bx	lr
 23fe57a:	bf00      	nop
 23fe57c:	1007a468 	.word	0x1007a468

023fe580 <serialEventRun>:
{
 23fe580:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fe582:	4b0f      	ldr	r3, [pc, #60]	; (23fe5c0 <serialEventRun+0x40>)
 23fe584:	b143      	cbz	r3, 23fe598 <serialEventRun+0x18>
 23fe586:	f000 f97b 	bl	23fe880 <_Z16_fetch_usbserialv>
 23fe58a:	6803      	ldr	r3, [r0, #0]
 23fe58c:	691b      	ldr	r3, [r3, #16]
 23fe58e:	4798      	blx	r3
 23fe590:	2800      	cmp	r0, #0
 23fe592:	dd01      	ble.n	23fe598 <serialEventRun+0x18>
        serialEvent();
 23fe594:	e000      	b.n	23fe598 <serialEventRun+0x18>
 23fe596:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fe598:	4b0a      	ldr	r3, [pc, #40]	; (23fe5c4 <serialEventRun+0x44>)
 23fe59a:	b143      	cbz	r3, 23fe5ae <serialEventRun+0x2e>
 23fe59c:	f000 fdb8 	bl	23ff110 <_Z22__fetch_global_Serial1v>
 23fe5a0:	6803      	ldr	r3, [r0, #0]
 23fe5a2:	691b      	ldr	r3, [r3, #16]
 23fe5a4:	4798      	blx	r3
 23fe5a6:	2800      	cmp	r0, #0
 23fe5a8:	dd01      	ble.n	23fe5ae <serialEventRun+0x2e>
        serialEvent1();
 23fe5aa:	e000      	b.n	23fe5ae <serialEventRun+0x2e>
 23fe5ac:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fe5ae:	4b06      	ldr	r3, [pc, #24]	; (23fe5c8 <serialEventRun+0x48>)
 23fe5b0:	b10b      	cbz	r3, 23fe5b6 <serialEventRun+0x36>
 23fe5b2:	f000 fdf3 	bl	23ff19c <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fe5b6:	4b05      	ldr	r3, [pc, #20]	; (23fe5cc <serialEventRun+0x4c>)
 23fe5b8:	b10b      	cbz	r3, 23fe5be <serialEventRun+0x3e>
 23fe5ba:	f000 fe25 	bl	23ff208 <_Z15serialEventRun3v>
}
 23fe5be:	bd08      	pop	{r3, pc}
	...

023fe5d0 <_post_loop>:
{
 23fe5d0:	b508      	push	{r3, lr}
	serialEventRun();
 23fe5d2:	f7ff ffd5 	bl	23fe580 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fe5d6:	f7fe fab3 	bl	23fcb40 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fe5da:	4b01      	ldr	r3, [pc, #4]	; (23fe5e0 <_post_loop+0x10>)
 23fe5dc:	6018      	str	r0, [r3, #0]
}
 23fe5de:	bd08      	pop	{r3, pc}
 23fe5e0:	1007af48 	.word	0x1007af48

023fe5e4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fe5e4:	4805      	ldr	r0, [pc, #20]	; (23fe5fc <_Z33system_initialize_user_backup_ramv+0x18>)
 23fe5e6:	4a06      	ldr	r2, [pc, #24]	; (23fe600 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fe5e8:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fe5ea:	1a12      	subs	r2, r2, r0
 23fe5ec:	4905      	ldr	r1, [pc, #20]	; (23fe604 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fe5ee:	f001 f813 	bl	23ff618 <memcpy>
    __backup_sram_signature = signature;
 23fe5f2:	4b05      	ldr	r3, [pc, #20]	; (23fe608 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fe5f4:	4a05      	ldr	r2, [pc, #20]	; (23fe60c <_Z33system_initialize_user_backup_ramv+0x28>)
 23fe5f6:	601a      	str	r2, [r3, #0]
}
 23fe5f8:	bd08      	pop	{r3, pc}
 23fe5fa:	bf00      	nop
 23fe5fc:	1007b400 	.word	0x1007b400
 23fe600:	1007b404 	.word	0x1007b404
 23fe604:	085ff0e0 	.word	0x085ff0e0
 23fe608:	1007b400 	.word	0x1007b400
 23fe60c:	9a271c1e 	.word	0x9a271c1e

023fe610 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe610:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fe612:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe614:	461a      	mov	r2, r3
 23fe616:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fe61a:	9300      	str	r3, [sp, #0]
 23fe61c:	f7fe fcdc 	bl	23fcfd8 <system_ctrl_set_result>
}
 23fe620:	b003      	add	sp, #12
 23fe622:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fe628 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fe628:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fe62a:	8843      	ldrh	r3, [r0, #2]
 23fe62c:	2b0a      	cmp	r3, #10
 23fe62e:	d008      	beq.n	23fe642 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fe630:	2b50      	cmp	r3, #80	; 0x50
 23fe632:	d10b      	bne.n	23fe64c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fe634:	4b09      	ldr	r3, [pc, #36]	; (23fe65c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fe636:	681b      	ldr	r3, [r3, #0]
 23fe638:	b14b      	cbz	r3, 23fe64e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fe63a:	b003      	add	sp, #12
 23fe63c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fe640:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fe642:	f7ff ffe5 	bl	23fe610 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fe646:	b003      	add	sp, #12
 23fe648:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe64c:	2300      	movs	r3, #0
 23fe64e:	461a      	mov	r2, r3
 23fe650:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fe654:	9300      	str	r3, [sp, #0]
 23fe656:	f7fe fcbf 	bl	23fcfd8 <system_ctrl_set_result>
}
 23fe65a:	e7f4      	b.n	23fe646 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fe65c:	1007aec8 	.word	0x1007aec8

023fe660 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fe660:	2100      	movs	r1, #0
{
 23fe662:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fe664:	4811      	ldr	r0, [pc, #68]	; (23fe6ac <module_user_init_hook+0x4c>)
 23fe666:	f7fe fdf9 	bl	23fd25c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fe66a:	4b11      	ldr	r3, [pc, #68]	; (23fe6b0 <module_user_init_hook+0x50>)
 23fe66c:	681a      	ldr	r2, [r3, #0]
 23fe66e:	4b11      	ldr	r3, [pc, #68]	; (23fe6b4 <module_user_init_hook+0x54>)
 23fe670:	429a      	cmp	r2, r3
 23fe672:	bf0c      	ite	eq
 23fe674:	2201      	moveq	r2, #1
 23fe676:	2200      	movne	r2, #0
 23fe678:	4b0f      	ldr	r3, [pc, #60]	; (23fe6b8 <module_user_init_hook+0x58>)
 23fe67a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fe67c:	d001      	beq.n	23fe682 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fe67e:	f7ff ffb1 	bl	23fe5e4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fe682:	f7fe fa41 	bl	23fcb08 <HAL_RNG_GetRandomNumber>
 23fe686:	4604      	mov	r4, r0
    srand(seed);
 23fe688:	f000 fff6 	bl	23ff678 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fe68c:	4b0b      	ldr	r3, [pc, #44]	; (23fe6bc <module_user_init_hook+0x5c>)
 23fe68e:	b113      	cbz	r3, 23fe696 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fe690:	4620      	mov	r0, r4
 23fe692:	e000      	b.n	23fe696 <module_user_init_hook+0x36>
 23fe694:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fe696:	2100      	movs	r1, #0
 23fe698:	4808      	ldr	r0, [pc, #32]	; (23fe6bc <module_user_init_hook+0x5c>)
 23fe69a:	f7fe fd6f 	bl	23fd17c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fe69e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fe6a2:	2100      	movs	r1, #0
 23fe6a4:	4806      	ldr	r0, [pc, #24]	; (23fe6c0 <module_user_init_hook+0x60>)
 23fe6a6:	f7fe bc89 	b.w	23fcfbc <system_ctrl_set_app_request_handler>
 23fe6aa:	bf00      	nop
 23fe6ac:	023fe575 	.word	0x023fe575
 23fe6b0:	1007b400 	.word	0x1007b400
 23fe6b4:	9a271c1e 	.word	0x9a271c1e
 23fe6b8:	1007aec4 	.word	0x1007aec4
 23fe6bc:	00000000 	.word	0x00000000
 23fe6c0:	023fe629 	.word	0x023fe629

023fe6c4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fe6c4:	4770      	bx	lr

023fe6c6 <_ZN9IPAddressD0Ev>:
 23fe6c6:	b510      	push	{r4, lr}
 23fe6c8:	4604      	mov	r4, r0
 23fe6ca:	2118      	movs	r1, #24
 23fe6cc:	f7fd f8e9 	bl	23fb8a2 <_ZdlPvj>
 23fe6d0:	4620      	mov	r0, r4
 23fe6d2:	bd10      	pop	{r4, pc}

023fe6d4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fe6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fe6d6:	7d03      	ldrb	r3, [r0, #20]
{
 23fe6d8:	460e      	mov	r6, r1
	if (address.v==6) {
 23fe6da:	2b06      	cmp	r3, #6
 23fe6dc:	f04f 0400 	mov.w	r4, #0
{
 23fe6e0:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe6e2:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fe6e6:	d012      	beq.n	23fe70e <_ZNK9IPAddress7printToER5Print+0x3a>
 23fe6e8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fe6ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fe6f0:	220a      	movs	r2, #10
 23fe6f2:	4630      	mov	r0, r6
 23fe6f4:	f7fe ff1f 	bl	23fd536 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fe6f8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fe6fa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fe6fc:	d019      	beq.n	23fe732 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fe6fe:	2c00      	cmp	r4, #0
 23fe700:	d0f4      	beq.n	23fe6ec <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fe702:	212e      	movs	r1, #46	; 0x2e
 23fe704:	4630      	mov	r0, r6
 23fe706:	f7fe fefd 	bl	23fd504 <_ZN5Print5printEc>
 23fe70a:	4404      	add	r4, r0
 23fe70c:	e7ee      	b.n	23fe6ec <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe70e:	232f      	movs	r3, #47	; 0x2f
 23fe710:	466a      	mov	r2, sp
 23fe712:	4639      	mov	r1, r7
 23fe714:	200a      	movs	r0, #10
		buf[0] = 0;
 23fe716:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe71a:	f7fe fa57 	bl	23fcbcc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fe71e:	4668      	mov	r0, sp
 23fe720:	f7fd f894 	bl	23fb84c <strlen>
 23fe724:	6833      	ldr	r3, [r6, #0]
 23fe726:	4602      	mov	r2, r0
 23fe728:	4669      	mov	r1, sp
 23fe72a:	4630      	mov	r0, r6
 23fe72c:	68db      	ldr	r3, [r3, #12]
 23fe72e:	4798      	blx	r3
 23fe730:	4604      	mov	r4, r0
    }
    return n;
}
 23fe732:	4620      	mov	r0, r4
 23fe734:	b00d      	add	sp, #52	; 0x34
 23fe736:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fe738 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fe738:	b510      	push	{r4, lr}
 23fe73a:	4604      	mov	r4, r0
 23fe73c:	4b04      	ldr	r3, [pc, #16]	; (23fe750 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fe73e:	2211      	movs	r2, #17
 23fe740:	2100      	movs	r1, #0
 23fe742:	f840 3b04 	str.w	r3, [r0], #4
 23fe746:	f000 ff8e 	bl	23ff666 <memset>
}
 23fe74a:	4620      	mov	r0, r4
 23fe74c:	bd10      	pop	{r4, pc}
 23fe74e:	bf00      	nop
 23fe750:	023ffcd0 	.word	0x023ffcd0

023fe754 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fe754:	4603      	mov	r3, r0
 23fe756:	4a07      	ldr	r2, [pc, #28]	; (23fe774 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fe758:	b510      	push	{r4, lr}
 23fe75a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fe75e:	f101 0210 	add.w	r2, r1, #16
 23fe762:	f851 4b04 	ldr.w	r4, [r1], #4
 23fe766:	4291      	cmp	r1, r2
 23fe768:	f843 4b04 	str.w	r4, [r3], #4
 23fe76c:	d1f9      	bne.n	23fe762 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fe76e:	780a      	ldrb	r2, [r1, #0]
 23fe770:	701a      	strb	r2, [r3, #0]
}
 23fe772:	bd10      	pop	{r4, pc}
 23fe774:	023ffcd0 	.word	0x023ffcd0

023fe778 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fe778:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fe77a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fe77e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fe782:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fe786:	2304      	movs	r3, #4
 23fe788:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fe78c:	6041      	str	r1, [r0, #4]
 23fe78e:	7503      	strb	r3, [r0, #20]
}
 23fe790:	bd10      	pop	{r4, pc}
	...

023fe794 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fe794:	b507      	push	{r0, r1, r2, lr}
 23fe796:	4b06      	ldr	r3, [pc, #24]	; (23fe7b0 <_ZN9IPAddressC1EPKh+0x1c>)
 23fe798:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fe79a:	78cb      	ldrb	r3, [r1, #3]
 23fe79c:	9300      	str	r3, [sp, #0]
 23fe79e:	788b      	ldrb	r3, [r1, #2]
 23fe7a0:	784a      	ldrb	r2, [r1, #1]
 23fe7a2:	7809      	ldrb	r1, [r1, #0]
 23fe7a4:	f7ff ffe8 	bl	23fe778 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fe7a8:	b003      	add	sp, #12
 23fe7aa:	f85d fb04 	ldr.w	pc, [sp], #4
 23fe7ae:	bf00      	nop
 23fe7b0:	023ffcd0 	.word	0x023ffcd0

023fe7b4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe7b4:	7441      	strb	r1, [r0, #17]
}
 23fe7b6:	4770      	bx	lr

023fe7b8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe7b8:	4770      	bx	lr

023fe7ba <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fe7ba:	4770      	bx	lr

023fe7bc <_ZN9USBSerial4readEv>:
{
 23fe7bc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fe7be:	2100      	movs	r1, #0
 23fe7c0:	7c00      	ldrb	r0, [r0, #16]
 23fe7c2:	f7fe fb61 	bl	23fce88 <HAL_USB_USART_Receive_Data>
}
 23fe7c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe7ca:	bd08      	pop	{r3, pc}

023fe7cc <_ZN9USBSerial4peekEv>:
{
 23fe7cc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fe7ce:	2101      	movs	r1, #1
 23fe7d0:	7c00      	ldrb	r0, [r0, #16]
 23fe7d2:	f7fe fb59 	bl	23fce88 <HAL_USB_USART_Receive_Data>
}
 23fe7d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe7da:	bd08      	pop	{r3, pc}

023fe7dc <_ZN9USBSerial17availableForWriteEv>:
{
 23fe7dc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fe7de:	7c00      	ldrb	r0, [r0, #16]
 23fe7e0:	f7fe fb44 	bl	23fce6c <HAL_USB_USART_Available_Data_For_Write>
}
 23fe7e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe7e8:	bd08      	pop	{r3, pc}

023fe7ea <_ZN9USBSerial9availableEv>:
{
 23fe7ea:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fe7ec:	7c00      	ldrb	r0, [r0, #16]
 23fe7ee:	f7fe fb2f 	bl	23fce50 <HAL_USB_USART_Available_Data>
}
 23fe7f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe7f6:	bd08      	pop	{r3, pc}

023fe7f8 <_ZN9USBSerial5writeEh>:
{
 23fe7f8:	b513      	push	{r0, r1, r4, lr}
 23fe7fa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe7fc:	7c00      	ldrb	r0, [r0, #16]
{
 23fe7fe:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe800:	f7fe fb34 	bl	23fce6c <HAL_USB_USART_Available_Data_For_Write>
 23fe804:	2800      	cmp	r0, #0
 23fe806:	9901      	ldr	r1, [sp, #4]
 23fe808:	dc01      	bgt.n	23fe80e <_ZN9USBSerial5writeEh+0x16>
 23fe80a:	7c60      	ldrb	r0, [r4, #17]
 23fe80c:	b120      	cbz	r0, 23fe818 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fe80e:	7c20      	ldrb	r0, [r4, #16]
 23fe810:	f7fe fb48 	bl	23fcea4 <HAL_USB_USART_Send_Data>
 23fe814:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fe818:	b002      	add	sp, #8
 23fe81a:	bd10      	pop	{r4, pc}

023fe81c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fe81c:	7c00      	ldrb	r0, [r0, #16]
 23fe81e:	f7fe bb4f 	b.w	23fcec0 <HAL_USB_USART_Flush_Data>

023fe822 <_ZN9USBSerialD0Ev>:
 23fe822:	b510      	push	{r4, lr}
 23fe824:	4604      	mov	r4, r0
 23fe826:	2114      	movs	r1, #20
 23fe828:	f7fd f83b 	bl	23fb8a2 <_ZdlPvj>
 23fe82c:	4620      	mov	r0, r4
 23fe82e:	bd10      	pop	{r4, pc}

023fe830 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe830:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fe832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe836:	4604      	mov	r4, r0
 23fe838:	4608      	mov	r0, r1
 23fe83a:	2100      	movs	r1, #0
 23fe83c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fe840:	4b04      	ldr	r3, [pc, #16]	; (23fe854 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fe842:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe844:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe846:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fe848:	4611      	mov	r1, r2
  _blocking = true;
 23fe84a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fe84c:	f7fe fad6 	bl	23fcdfc <HAL_USB_USART_Init>
}
 23fe850:	4620      	mov	r0, r4
 23fe852:	bd10      	pop	{r4, pc}
 23fe854:	023ffce4 	.word	0x023ffce4

023fe858 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fe858:	2200      	movs	r2, #0
 23fe85a:	7c00      	ldrb	r0, [r0, #16]
 23fe85c:	f7fe badc 	b.w	23fce18 <HAL_USB_USART_Begin>

023fe860 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fe860:	7c00      	ldrb	r0, [r0, #16]
 23fe862:	f7fe bae7 	b.w	23fce34 <HAL_USB_USART_End>

023fe866 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
 23fe866:	7c00      	ldrb	r0, [r0, #16]
 23fe868:	f7fe bb38 	b.w	23fcedc <HAL_USB_USART_Is_Enabled>

023fe86c <_ZN9USBSerialcvbEv>:
  return isEnabled();
 23fe86c:	f7ff bffb 	b.w	23fe866 <_ZN9USBSerial9isEnabledEv>

023fe870 <_Z19acquireSerialBufferv>:
{
 23fe870:	b510      	push	{r4, lr}
 23fe872:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fe874:	2214      	movs	r2, #20
 23fe876:	2100      	movs	r1, #0
 23fe878:	f000 fef5 	bl	23ff666 <memset>
}
 23fe87c:	4620      	mov	r0, r4
 23fe87e:	bd10      	pop	{r4, pc}

023fe880 <_Z16_fetch_usbserialv>:
{
 23fe880:	b510      	push	{r4, lr}
 23fe882:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fe884:	a803      	add	r0, sp, #12
 23fe886:	f7ff fff3 	bl	23fe870 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe88a:	4c0c      	ldr	r4, [pc, #48]	; (23fe8bc <_Z16_fetch_usbserialv+0x3c>)
 23fe88c:	e8d4 1f8f 	ldab	r1, [r4]
 23fe890:	f011 0101 	ands.w	r1, r1, #1
 23fe894:	d10f      	bne.n	23fe8b6 <_Z16_fetch_usbserialv+0x36>
 23fe896:	4620      	mov	r0, r4
 23fe898:	9101      	str	r1, [sp, #4]
 23fe89a:	f7fd f811 	bl	23fb8c0 <__cxa_guard_acquire>
 23fe89e:	9901      	ldr	r1, [sp, #4]
 23fe8a0:	b148      	cbz	r0, 23fe8b6 <_Z16_fetch_usbserialv+0x36>
 23fe8a2:	aa03      	add	r2, sp, #12
 23fe8a4:	4806      	ldr	r0, [pc, #24]	; (23fe8c0 <_Z16_fetch_usbserialv+0x40>)
 23fe8a6:	f7ff ffc3 	bl	23fe830 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fe8aa:	4620      	mov	r0, r4
 23fe8ac:	f7fd f80d 	bl	23fb8ca <__cxa_guard_release>
 23fe8b0:	4804      	ldr	r0, [pc, #16]	; (23fe8c4 <_Z16_fetch_usbserialv+0x44>)
 23fe8b2:	f000 fea2 	bl	23ff5fa <atexit>
	return _usbserial;
}
 23fe8b6:	4802      	ldr	r0, [pc, #8]	; (23fe8c0 <_Z16_fetch_usbserialv+0x40>)
 23fe8b8:	b008      	add	sp, #32
 23fe8ba:	bd10      	pop	{r4, pc}
 23fe8bc:	1007aecc 	.word	0x1007aecc
 23fe8c0:	1007aed0 	.word	0x1007aed0
 23fe8c4:	023fe7b9 	.word	0x023fe7b9

023fe8c8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fe8c8:	4770      	bx	lr

023fe8ca <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe8ca:	7441      	strb	r1, [r0, #17]
}
 23fe8cc:	4770      	bx	lr

023fe8ce <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fe8ce:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fe8d0:	7c00      	ldrb	r0, [r0, #16]
 23fe8d2:	f7fe f9eb 	bl	23fccac <hal_usart_available_data_for_write>
}
 23fe8d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe8da:	bd08      	pop	{r3, pc}

023fe8dc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fe8dc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fe8de:	7c00      	ldrb	r0, [r0, #16]
 23fe8e0:	f7fe f99e 	bl	23fcc20 <hal_usart_available>
}
 23fe8e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe8e8:	bd08      	pop	{r3, pc}

023fe8ea <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fe8ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fe8ec:	7c00      	ldrb	r0, [r0, #16]
 23fe8ee:	f7fe f9b3 	bl	23fcc58 <hal_usart_peek>
}
 23fe8f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe8f6:	bd08      	pop	{r3, pc}

023fe8f8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fe8f8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fe8fa:	7c00      	ldrb	r0, [r0, #16]
 23fe8fc:	f7fe f99e 	bl	23fcc3c <hal_usart_read>
}
 23fe900:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe904:	bd08      	pop	{r3, pc}

023fe906 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fe906:	7c00      	ldrb	r0, [r0, #16]
 23fe908:	f7fe b9b4 	b.w	23fcc74 <hal_usart_flush>

023fe90c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fe90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe90e:	7c45      	ldrb	r5, [r0, #17]
{
 23fe910:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe912:	b12d      	cbz	r5, 23fe920 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fe914:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fe916:	b003      	add	sp, #12
 23fe918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fe91c:	f7fe b972 	b.w	23fcc04 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe920:	7c00      	ldrb	r0, [r0, #16]
 23fe922:	9101      	str	r1, [sp, #4]
 23fe924:	f7fe f9c2 	bl	23fccac <hal_usart_available_data_for_write>
 23fe928:	2800      	cmp	r0, #0
 23fe92a:	9901      	ldr	r1, [sp, #4]
 23fe92c:	dcf2      	bgt.n	23fe914 <_ZN11USARTSerial5writeEh+0x8>
}
 23fe92e:	4628      	mov	r0, r5
 23fe930:	b003      	add	sp, #12
 23fe932:	bd30      	pop	{r4, r5, pc}

023fe934 <_ZN11USARTSerialD0Ev>:
 23fe934:	b510      	push	{r4, lr}
 23fe936:	4604      	mov	r4, r0
 23fe938:	2114      	movs	r1, #20
 23fe93a:	f7fc ffb2 	bl	23fb8a2 <_ZdlPvj>
 23fe93e:	4620      	mov	r0, r4
 23fe940:	bd10      	pop	{r4, pc}
	...

023fe944 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe944:	b510      	push	{r4, lr}
 23fe946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe94a:	4604      	mov	r4, r0
 23fe94c:	4608      	mov	r0, r1
 23fe94e:	4611      	mov	r1, r2
 23fe950:	2200      	movs	r2, #0
 23fe952:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe956:	4b04      	ldr	r3, [pc, #16]	; (23fe968 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fe958:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe95a:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe95c:	2301      	movs	r3, #1
 23fe95e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fe960:	f7fe f9c0 	bl	23fcce4 <hal_usart_init_ex>
}
 23fe964:	4620      	mov	r0, r4
 23fe966:	bd10      	pop	{r4, pc}
 23fe968:	023ffd14 	.word	0x023ffd14

023fe96c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fe96c:	2300      	movs	r3, #0
 23fe96e:	7c00      	ldrb	r0, [r0, #16]
 23fe970:	f7fe b9aa 	b.w	23fccc8 <hal_usart_begin_config>

023fe974 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fe974:	2200      	movs	r2, #0
 23fe976:	f7ff bff9 	b.w	23fe96c <_ZN11USARTSerial5beginEmm>

023fe97a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fe97a:	7c00      	ldrb	r0, [r0, #16]
 23fe97c:	f7fe b934 	b.w	23fcbe8 <hal_usart_end>

023fe980 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fe980:	7c00      	ldrb	r0, [r0, #16]
 23fe982:	f7fe b985 	b.w	23fcc90 <hal_usart_is_enabled>

023fe986 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fe986:	4770      	bx	lr

023fe988 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fe988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe98a:	4606      	mov	r6, r0
 23fe98c:	4615      	mov	r5, r2
 23fe98e:	460c      	mov	r4, r1
 23fe990:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fe992:	42bc      	cmp	r4, r7
 23fe994:	d006      	beq.n	23fe9a4 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fe996:	6833      	ldr	r3, [r6, #0]
 23fe998:	4630      	mov	r0, r6
 23fe99a:	689b      	ldr	r3, [r3, #8]
 23fe99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fe9a0:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fe9a2:	e7f6      	b.n	23fe992 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fe9a4:	4628      	mov	r0, r5
 23fe9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe9a8 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fe9a8:	2200      	movs	r2, #0
 23fe9aa:	7c00      	ldrb	r0, [r0, #16]
 23fe9ac:	f7fe b9a8 	b.w	23fcd00 <hal_i2c_write>

023fe9b0 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fe9b0:	2100      	movs	r1, #0
 23fe9b2:	7c00      	ldrb	r0, [r0, #16]
 23fe9b4:	f7fe b9b2 	b.w	23fcd1c <hal_i2c_available>

023fe9b8 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fe9b8:	2100      	movs	r1, #0
 23fe9ba:	7c00      	ldrb	r0, [r0, #16]
 23fe9bc:	f7fe b9bc 	b.w	23fcd38 <hal_i2c_read>

023fe9c0 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fe9c0:	2100      	movs	r1, #0
 23fe9c2:	7c00      	ldrb	r0, [r0, #16]
 23fe9c4:	f7fe b9c6 	b.w	23fcd54 <hal_i2c_peek>

023fe9c8 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fe9c8:	2100      	movs	r1, #0
 23fe9ca:	7c00      	ldrb	r0, [r0, #16]
 23fe9cc:	f7fe b9d0 	b.w	23fcd70 <hal_i2c_flush>

023fe9d0 <_ZN7TwoWireD0Ev>:
 23fe9d0:	b510      	push	{r4, lr}
 23fe9d2:	4604      	mov	r4, r0
 23fe9d4:	2114      	movs	r1, #20
 23fe9d6:	f7fc ff64 	bl	23fb8a2 <_ZdlPvj>
 23fe9da:	4620      	mov	r0, r4
 23fe9dc:	bd10      	pop	{r4, pc}
	...

023fe9e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fe9e0:	b538      	push	{r3, r4, r5, lr}
 23fe9e2:	4604      	mov	r4, r0
 23fe9e4:	4615      	mov	r5, r2
 23fe9e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe9ea:	2200      	movs	r2, #0
 23fe9ec:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe9f0:	4b09      	ldr	r3, [pc, #36]	; (23fea18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fe9f2:	4608      	mov	r0, r1
  _i2c = i2c;
 23fe9f4:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fe9f6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fe9f8:	4629      	mov	r1, r5
 23fe9fa:	f7fe f9d5 	bl	23fcda8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fe9fe:	30bf      	adds	r0, #191	; 0xbf
 23fea00:	d108      	bne.n	23fea14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fea02:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fea04:	07db      	lsls	r3, r3, #31
 23fea06:	d505      	bpl.n	23fea14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fea08:	6868      	ldr	r0, [r5, #4]
 23fea0a:	f7fe fbd3 	bl	23fd1b4 <free>
    free(conf.tx_buffer);
 23fea0e:	68e8      	ldr	r0, [r5, #12]
 23fea10:	f7fe fbd0 	bl	23fd1b4 <free>
}
 23fea14:	4620      	mov	r0, r4
 23fea16:	bd38      	pop	{r3, r4, r5, pc}
 23fea18:	023ffd44 	.word	0x023ffd44

023fea1c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fea1c:	2200      	movs	r2, #0
 23fea1e:	6840      	ldr	r0, [r0, #4]
 23fea20:	4611      	mov	r1, r2
 23fea22:	f7fe bb11 	b.w	23fd048 <network_ready>

023fea26 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fea26:	2200      	movs	r2, #0
 23fea28:	6840      	ldr	r0, [r0, #4]
 23fea2a:	4611      	mov	r1, r2
 23fea2c:	f7fe bb44 	b.w	23fd0b8 <network_listening>

023fea30 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fea30:	2200      	movs	r2, #0
 23fea32:	6840      	ldr	r0, [r0, #4]
 23fea34:	4611      	mov	r1, r2
 23fea36:	f7fe bb5b 	b.w	23fd0f0 <network_get_listen_timeout>

023fea3a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fea3a:	2200      	movs	r2, #0
 23fea3c:	6840      	ldr	r0, [r0, #4]
 23fea3e:	f7fe bb49 	b.w	23fd0d4 <network_set_listen_timeout>

023fea42 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fea42:	2200      	movs	r2, #0
 23fea44:	6840      	ldr	r0, [r0, #4]
 23fea46:	f081 0101 	eor.w	r1, r1, #1
 23fea4a:	f7fe bb27 	b.w	23fd09c <network_listen>

023fea4e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fea4e:	2300      	movs	r3, #0
 23fea50:	6840      	ldr	r0, [r0, #4]
 23fea52:	461a      	mov	r2, r3
 23fea54:	4619      	mov	r1, r3
 23fea56:	f7fe bb13 	b.w	23fd080 <network_off>

023fea5a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fea5a:	2300      	movs	r3, #0
 23fea5c:	6840      	ldr	r0, [r0, #4]
 23fea5e:	461a      	mov	r2, r3
 23fea60:	4619      	mov	r1, r3
 23fea62:	f7fe baff 	b.w	23fd064 <network_on>

023fea66 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fea66:	2200      	movs	r2, #0
 23fea68:	6840      	ldr	r0, [r0, #4]
 23fea6a:	4611      	mov	r1, r2
 23fea6c:	f7fe bad0 	b.w	23fd010 <network_connecting>

023fea70 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fea70:	2200      	movs	r2, #0
 23fea72:	2102      	movs	r1, #2
 23fea74:	6840      	ldr	r0, [r0, #4]
 23fea76:	f7fe bad9 	b.w	23fd02c <network_disconnect>

023fea7a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fea7a:	2300      	movs	r3, #0
 23fea7c:	6840      	ldr	r0, [r0, #4]
 23fea7e:	461a      	mov	r2, r3
 23fea80:	f7fe bab8 	b.w	23fcff4 <network_connect>

023fea84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fea84:	2204      	movs	r2, #4
 23fea86:	4b02      	ldr	r3, [pc, #8]	; (23fea90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fea88:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fea8a:	4a02      	ldr	r2, [pc, #8]	; (23fea94 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fea8c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fea8e:	4770      	bx	lr
 23fea90:	1007aee4 	.word	0x1007aee4
 23fea94:	023ffd6c 	.word	0x023ffd6c

023fea98 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fea98:	2300      	movs	r3, #0
 23fea9a:	6840      	ldr	r0, [r0, #4]
 23fea9c:	461a      	mov	r2, r3
 23fea9e:	f7fe baa9 	b.w	23fcff4 <network_connect>

023feaa2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23feaa2:	2200      	movs	r2, #0
 23feaa4:	2102      	movs	r1, #2
 23feaa6:	6840      	ldr	r0, [r0, #4]
 23feaa8:	f7fe bac0 	b.w	23fd02c <network_disconnect>

023feaac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23feaac:	2200      	movs	r2, #0
 23feaae:	6840      	ldr	r0, [r0, #4]
 23feab0:	4611      	mov	r1, r2
 23feab2:	f7fe baad 	b.w	23fd010 <network_connecting>

023feab6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23feab6:	2200      	movs	r2, #0
 23feab8:	6840      	ldr	r0, [r0, #4]
 23feaba:	4611      	mov	r1, r2
 23feabc:	f7fe bac4 	b.w	23fd048 <network_ready>

023feac0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23feac0:	2300      	movs	r3, #0
 23feac2:	6840      	ldr	r0, [r0, #4]
 23feac4:	461a      	mov	r2, r3
 23feac6:	4619      	mov	r1, r3
 23feac8:	f7fe bacc 	b.w	23fd064 <network_on>

023feacc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23feacc:	2300      	movs	r3, #0
 23feace:	6840      	ldr	r0, [r0, #4]
 23fead0:	461a      	mov	r2, r3
 23fead2:	4619      	mov	r1, r3
 23fead4:	f7fe bad4 	b.w	23fd080 <network_off>

023fead8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fead8:	2100      	movs	r1, #0
 23feada:	6840      	ldr	r0, [r0, #4]
 23feadc:	f7fe bb16 	b.w	23fd10c <network_is_on>

023feae0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23feae0:	2100      	movs	r1, #0
 23feae2:	6840      	ldr	r0, [r0, #4]
 23feae4:	f7fe bb20 	b.w	23fd128 <network_is_off>

023feae8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23feae8:	2200      	movs	r2, #0
 23feaea:	6840      	ldr	r0, [r0, #4]
 23feaec:	f081 0101 	eor.w	r1, r1, #1
 23feaf0:	f7fe bad4 	b.w	23fd09c <network_listen>

023feaf4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23feaf4:	2200      	movs	r2, #0
 23feaf6:	6840      	ldr	r0, [r0, #4]
 23feaf8:	f7fe baec 	b.w	23fd0d4 <network_set_listen_timeout>

023feafc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23feafc:	2200      	movs	r2, #0
 23feafe:	6840      	ldr	r0, [r0, #4]
 23feb00:	4611      	mov	r1, r2
 23feb02:	f7fe baf5 	b.w	23fd0f0 <network_get_listen_timeout>

023feb06 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23feb06:	2200      	movs	r2, #0
 23feb08:	6840      	ldr	r0, [r0, #4]
 23feb0a:	4611      	mov	r1, r2
 23feb0c:	f7fe bad4 	b.w	23fd0b8 <network_listening>

023feb10 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_preferred(*this, preferred, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23feb10:	2100      	movs	r1, #0
 23feb12:	6840      	ldr	r0, [r0, #4]
 23feb14:	f7fe bb24 	b.w	23fd160 <network_is_preferred>

023feb18 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23feb18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23feb1c:	b095      	sub	sp, #84	; 0x54
 23feb1e:	4614      	mov	r4, r2
 23feb20:	460d      	mov	r5, r1
 23feb22:	4607      	mov	r7, r0
    IPAddress addr;
 23feb24:	f7ff fe08 	bl	23fe738 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23feb28:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23feb2a:	221c      	movs	r2, #28
 23feb2c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23feb2e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23feb30:	f000 fd99 	bl	23ff666 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23feb34:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23feb36:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23feb38:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23feb3a:	2100      	movs	r1, #0
 23feb3c:	466b      	mov	r3, sp
 23feb3e:	aa0c      	add	r2, sp, #48	; 0x30
 23feb40:	f7fd ffaa 	bl	23fca98 <netdb_getaddrinfo>
    if (!r) {
 23feb44:	4604      	mov	r4, r0
 23feb46:	2800      	cmp	r0, #0
 23feb48:	d14b      	bne.n	23febe2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23feb4a:	4602      	mov	r2, r0
 23feb4c:	2101      	movs	r1, #1
 23feb4e:	6868      	ldr	r0, [r5, #4]
 23feb50:	f7fe fa7a 	bl	23fd048 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23feb54:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23feb56:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23feb58:	4622      	mov	r2, r4
 23feb5a:	6868      	ldr	r0, [r5, #4]
 23feb5c:	f7fe fa74 	bl	23fd048 <network_ready>
        bool ok = false;
 23feb60:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23feb62:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23feb64:	9e00      	ldr	r6, [sp, #0]
 23feb66:	2e00      	cmp	r6, #0
 23feb68:	d03b      	beq.n	23febe2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23feb6a:	2900      	cmp	r1, #0
 23feb6c:	d139      	bne.n	23febe2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23feb6e:	6873      	ldr	r3, [r6, #4]
 23feb70:	2b02      	cmp	r3, #2
 23feb72:	d003      	beq.n	23feb7c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23feb74:	2b0a      	cmp	r3, #10
 23feb76:	d011      	beq.n	23feb9c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23feb78:	69f6      	ldr	r6, [r6, #28]
 23feb7a:	e7f4      	b.n	23feb66 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23feb7c:	f1b8 0f00 	cmp.w	r8, #0
 23feb80:	d0fa      	beq.n	23feb78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23feb82:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23feb84:	a806      	add	r0, sp, #24
 23feb86:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23feb88:	1d3c      	adds	r4, r7, #4
 23feb8a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23feb8c:	f7ff fe02 	bl	23fe794 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23feb90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23feb92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23feb94:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23feb96:	4641      	mov	r1, r8
 23feb98:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23feb9a:	e7ed      	b.n	23feb78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23feb9c:	f1b9 0f00 	cmp.w	r9, #0
 23feba0:	d0ea      	beq.n	23feb78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23feba2:	2210      	movs	r2, #16
 23feba4:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23feba6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23feba8:	f000 fd5d 	bl	23ff666 <memset>
                    a.v = 6;
 23febac:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23febae:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23febb0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23febb4:	f104 0308 	add.w	r3, r4, #8
 23febb8:	3418      	adds	r4, #24
 23febba:	462a      	mov	r2, r5
 23febbc:	6818      	ldr	r0, [r3, #0]
 23febbe:	6859      	ldr	r1, [r3, #4]
 23febc0:	3308      	adds	r3, #8
 23febc2:	c203      	stmia	r2!, {r0, r1}
 23febc4:	42a3      	cmp	r3, r4
 23febc6:	4615      	mov	r5, r2
 23febc8:	d1f7      	bne.n	23febba <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23febca:	a901      	add	r1, sp, #4
 23febcc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23febce:	1d3c      	adds	r4, r7, #4
 23febd0:	ad07      	add	r5, sp, #28
 23febd2:	f7ff fdbf 	bl	23fe754 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23febd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23febd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23febda:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23febdc:	4649      	mov	r1, r9
 23febde:	7023      	strb	r3, [r4, #0]
                    break;
 23febe0:	e7ca      	b.n	23feb78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23febe2:	9800      	ldr	r0, [sp, #0]
 23febe4:	f7fd ff4a 	bl	23fca7c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23febe8:	4638      	mov	r0, r7
 23febea:	b015      	add	sp, #84	; 0x54
 23febec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023febf0 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23febf0:	3803      	subs	r0, #3
 23febf2:	2802      	cmp	r0, #2
 23febf4:	bf9a      	itte	ls
 23febf6:	4b02      	ldrls	r3, [pc, #8]	; (23fec00 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23febf8:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23febfc:	4801      	ldrhi	r0, [pc, #4]	; (23fec04 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23febfe:	4770      	bx	lr
 23fec00:	023ffda8 	.word	0x023ffda8
 23fec04:	1007aeec 	.word	0x1007aeec

023fec08 <_ZN5spark12NetworkClass9preferredEb>:
NetworkClass& NetworkClass::preferred(bool preferred) {
 23fec08:	b508      	push	{r3, lr}
    network_handle_t network = network_preferred(*this, preferred, nullptr);
 23fec0a:	2200      	movs	r2, #0
 23fec0c:	6840      	ldr	r0, [r0, #4]
 23fec0e:	f7fe fa99 	bl	23fd144 <network_preferred>
}
 23fec12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23fec16:	f7ff bfeb 	b.w	23febf0 <_ZN5spark12NetworkClass4fromEm>
	...

023fec1c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fec1c:	4b02      	ldr	r3, [pc, #8]	; (23fec28 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fec1e:	4a03      	ldr	r2, [pc, #12]	; (23fec2c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fec20:	601a      	str	r2, [r3, #0]
 23fec22:	2200      	movs	r2, #0
 23fec24:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fec26:	4770      	bx	lr
 23fec28:	1007aeec 	.word	0x1007aeec
 23fec2c:	023ffdbc 	.word	0x023ffdbc

023fec30 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fec30:	2201      	movs	r2, #1
 23fec32:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fec36:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fec3a:	4618      	mov	r0, r3
 23fec3c:	2901      	cmp	r1, #1
 23fec3e:	d108      	bne.n	23fec52 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fec40:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fec44:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fec48:	3a01      	subs	r2, #1
 23fec4a:	f103 0310 	add.w	r3, r3, #16
 23fec4e:	d1f2      	bne.n	23fec36 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fec50:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fec52:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fec54:	bf04      	itt	eq
 23fec56:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fec5a:	1852      	addeq	r2, r2, r1
 23fec5c:	e7f4      	b.n	23fec48 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fec5e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fec5e:	b40e      	push	{r1, r2, r3}
 23fec60:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fec62:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fec64:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fec66:	af00      	add	r7, sp, #0
 23fec68:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fec6c:	f855 2b04 	ldr.w	r2, [r5], #4
 23fec70:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fec72:	462b      	mov	r3, r5
 23fec74:	1878      	adds	r0, r7, r1
 23fec76:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fec78:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fec7a:	f7fe fab7 	bl	23fd1ec <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fec7e:	280f      	cmp	r0, #15
 23fec80:	687a      	ldr	r2, [r7, #4]
 23fec82:	d91a      	bls.n	23fecba <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fec84:	f100 0308 	add.w	r3, r0, #8
 23fec88:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fec8c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fec8e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fec92:	1c41      	adds	r1, r0, #1
 23fec94:	462b      	mov	r3, r5
 23fec96:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fec98:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fec9a:	f7fe faa7 	bl	23fd1ec <vsnprintf>
        if (n > 0) {
 23fec9e:	1e02      	subs	r2, r0, #0
 23feca0:	dd04      	ble.n	23fecac <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23feca2:	6823      	ldr	r3, [r4, #0]
 23feca4:	4669      	mov	r1, sp
 23feca6:	4620      	mov	r0, r4
 23feca8:	689b      	ldr	r3, [r3, #8]
 23fecaa:	4798      	blx	r3
 23fecac:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fecae:	3720      	adds	r7, #32
 23fecb0:	46bd      	mov	sp, r7
 23fecb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fecb6:	b003      	add	sp, #12
 23fecb8:	4770      	bx	lr
    } else if (n > 0) {
 23fecba:	2800      	cmp	r0, #0
 23fecbc:	d0f7      	beq.n	23fecae <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fecbe:	6823      	ldr	r3, [r4, #0]
 23fecc0:	4602      	mov	r2, r0
 23fecc2:	689b      	ldr	r3, [r3, #8]
 23fecc4:	4620      	mov	r0, r4
 23fecc6:	f107 0110 	add.w	r1, r7, #16
 23fecca:	4798      	blx	r3
}
 23feccc:	e7ef      	b.n	23fecae <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fecce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fecce:	b538      	push	{r3, r4, r5, lr}
 23fecd0:	680b      	ldr	r3, [r1, #0]
 23fecd2:	4604      	mov	r4, r0
 23fecd4:	6003      	str	r3, [r0, #0]
 23fecd6:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fecd8:	6843      	ldr	r3, [r0, #4]
 23fecda:	429d      	cmp	r5, r3
 23fecdc:	d008      	beq.n	23fecf0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fecde:	b115      	cbz	r5, 23fece6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fece0:	686b      	ldr	r3, [r5, #4]
 23fece2:	3301      	adds	r3, #1
 23fece4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fece6:	6860      	ldr	r0, [r4, #4]
 23fece8:	b108      	cbz	r0, 23fecee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fecea:	f7fe fbad 	bl	23fd448 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fecee:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fecf0:	bd38      	pop	{r3, r4, r5, pc}

023fecf2 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 23fecf2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fecf4:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fecf6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fecfa:	2201      	movs	r2, #1
 23fecfc:	689b      	ldr	r3, [r3, #8]
 23fecfe:	f10d 0107 	add.w	r1, sp, #7
 23fed02:	4798      	blx	r3
}
 23fed04:	b003      	add	sp, #12
 23fed06:	f85d fb04 	ldr.w	pc, [sp], #4

023fed0a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fed0a:	460b      	mov	r3, r1
 23fed0c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fed0e:	2200      	movs	r2, #0
 23fed10:	b510      	push	{r4, lr}
 23fed12:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fed14:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fed18:	6083      	str	r3, [r0, #8]
    if (t) {
 23fed1a:	b90b      	cbnz	r3, 23fed20 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fed1c:	4620      	mov	r0, r4
 23fed1e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fed20:	f7ff ffd5 	bl	23fecce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fed24:	e7fa      	b.n	23fed1c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fed26 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fed26:	6883      	ldr	r3, [r0, #8]
 23fed28:	b1eb      	cbz	r3, 23fed66 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fed2a:	781a      	ldrb	r2, [r3, #0]
 23fed2c:	2a03      	cmp	r2, #3
 23fed2e:	d81a      	bhi.n	23fed66 <_ZNK5spark9JSONValue4typeEv+0x40>
 23fed30:	e8df f002 	tbb	[pc, r2]
 23fed34:	1b021704 	.word	0x1b021704
 23fed38:	2005      	movs	r0, #5
 23fed3a:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fed3c:	6802      	ldr	r2, [r0, #0]
 23fed3e:	685b      	ldr	r3, [r3, #4]
 23fed40:	6852      	ldr	r2, [r2, #4]
 23fed42:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fed44:	282d      	cmp	r0, #45	; 0x2d
 23fed46:	d012      	beq.n	23fed6e <_ZNK5spark9JSONValue4typeEv+0x48>
 23fed48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fed4c:	2b09      	cmp	r3, #9
 23fed4e:	d90e      	bls.n	23fed6e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fed50:	2874      	cmp	r0, #116	; 0x74
 23fed52:	d00e      	beq.n	23fed72 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fed54:	2866      	cmp	r0, #102	; 0x66
 23fed56:	d00c      	beq.n	23fed72 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fed58:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fed5c:	4258      	negs	r0, r3
 23fed5e:	4158      	adcs	r0, r3
 23fed60:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fed62:	2006      	movs	r0, #6
 23fed64:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fed66:	2000      	movs	r0, #0
 23fed68:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fed6a:	2004      	movs	r0, #4
 23fed6c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fed6e:	2003      	movs	r0, #3
 23fed70:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fed72:	2002      	movs	r0, #2
}
 23fed74:	4770      	bx	lr

023fed76 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fed76:	b510      	push	{r4, lr}
 23fed78:	4604      	mov	r4, r0
    switch (type()) {
 23fed7a:	f7ff ffd4 	bl	23fed26 <_ZNK5spark9JSONValue4typeEv>
 23fed7e:	2802      	cmp	r0, #2
 23fed80:	d00e      	beq.n	23feda0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fed82:	1ec3      	subs	r3, r0, #3
 23fed84:	b2db      	uxtb	r3, r3
 23fed86:	2b01      	cmp	r3, #1
 23fed88:	d814      	bhi.n	23fedb4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fed8a:	6822      	ldr	r2, [r4, #0]
 23fed8c:	68a3      	ldr	r3, [r4, #8]
 23fed8e:	6850      	ldr	r0, [r2, #4]
 23fed90:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fed92:	220a      	movs	r2, #10
}
 23fed94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fed98:	2100      	movs	r1, #0
 23fed9a:	4418      	add	r0, r3
 23fed9c:	f000 bd64 	b.w	23ff868 <strtol>
        const char* const s = d_->json + t_->start;
 23feda0:	6822      	ldr	r2, [r4, #0]
 23feda2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23feda4:	6852      	ldr	r2, [r2, #4]
 23feda6:	685b      	ldr	r3, [r3, #4]
 23feda8:	5cd0      	ldrb	r0, [r2, r3]
 23fedaa:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fedae:	4258      	negs	r0, r3
 23fedb0:	4158      	adcs	r0, r3
}
 23fedb2:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fedb4:	2000      	movs	r0, #0
 23fedb6:	e7fc      	b.n	23fedb2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fedb8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fedb8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fedba:	2300      	movs	r3, #0
 23fedbc:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fedbe:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fedc2:	480e      	ldr	r0, [pc, #56]	; (23fedfc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fedc4:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fedc8:	b1a9      	cbz	r1, 23fedf6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fedca:	780b      	ldrb	r3, [r1, #0]
 23fedcc:	2b03      	cmp	r3, #3
 23fedce:	d006      	beq.n	23fedde <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fedd0:	b98b      	cbnz	r3, 23fedf6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fedd2:	6813      	ldr	r3, [r2, #0]
 23fedd4:	6858      	ldr	r0, [r3, #4]
 23fedd6:	684b      	ldr	r3, [r1, #4]
 23fedd8:	5cc3      	ldrb	r3, [r0, r3]
 23fedda:	2b6e      	cmp	r3, #110	; 0x6e
 23feddc:	d007      	beq.n	23fedee <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fedde:	6813      	ldr	r3, [r2, #0]
 23fede0:	684d      	ldr	r5, [r1, #4]
 23fede2:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fede4:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fede6:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fede8:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fedea:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fedec:	60e3      	str	r3, [r4, #12]
 23fedee:	4611      	mov	r1, r2
 23fedf0:	4620      	mov	r0, r4
 23fedf2:	f7ff ff6c 	bl	23fecce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fedf6:	4620      	mov	r0, r4
 23fedf8:	bd38      	pop	{r3, r4, r5, pc}
 23fedfa:	bf00      	nop
 23fedfc:	023ffc1a 	.word	0x023ffc1a

023fee00 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fee00:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fee02:	2500      	movs	r5, #0
 23fee04:	460b      	mov	r3, r1
 23fee06:	4604      	mov	r4, r0
 23fee08:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fee0a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fee0e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fee12:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fee16:	b14b      	cbz	r3, 23fee2c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fee18:	781a      	ldrb	r2, [r3, #0]
 23fee1a:	2a01      	cmp	r2, #1
 23fee1c:	d106      	bne.n	23fee2c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fee1e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fee22:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fee24:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fee26:	6143      	str	r3, [r0, #20]
 23fee28:	f7ff ff51 	bl	23fecce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fee2c:	4620      	mov	r0, r4
 23fee2e:	bd38      	pop	{r3, r4, r5, pc}

023fee30 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fee30:	b510      	push	{r4, lr}
    if (!n_) {
 23fee32:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fee34:	4604      	mov	r4, r0
    if (!n_) {
 23fee36:	b163      	cbz	r3, 23fee52 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fee38:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fee3a:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fee3c:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fee3e:	3010      	adds	r0, #16
 23fee40:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fee42:	6120      	str	r0, [r4, #16]
    --n_;
 23fee44:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fee46:	b113      	cbz	r3, 23fee4e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fee48:	f7ff fef2 	bl	23fec30 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fee4c:	60a0      	str	r0, [r4, #8]
    return true;
 23fee4e:	2001      	movs	r0, #1
 23fee50:	e000      	b.n	23fee54 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fee52:	4618      	mov	r0, r3
}
 23fee54:	bd10      	pop	{r4, pc}

023fee56 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fee56:	b510      	push	{r4, lr}
    write('}');
 23fee58:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fee5a:	4604      	mov	r4, r0
    write('}');
 23fee5c:	f7ff ff49 	bl	23fecf2 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fee60:	2301      	movs	r3, #1
}
 23fee62:	4620      	mov	r0, r4
    state_ = NEXT;
 23fee64:	7123      	strb	r3, [r4, #4]
}
 23fee66:	bd10      	pop	{r4, pc}

023fee68 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fee68:	b508      	push	{r3, lr}
    switch (state_) {
 23fee6a:	7903      	ldrb	r3, [r0, #4]
 23fee6c:	2b01      	cmp	r3, #1
 23fee6e:	d002      	beq.n	23fee76 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fee70:	2b02      	cmp	r3, #2
 23fee72:	d004      	beq.n	23fee7e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fee74:	bd08      	pop	{r3, pc}
        write(',');
 23fee76:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fee78:	f7ff ff3b 	bl	23fecf2 <_ZN5spark10JSONWriter5writeEc>
}
 23fee7c:	e7fa      	b.n	23fee74 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fee7e:	213a      	movs	r1, #58	; 0x3a
 23fee80:	e7fa      	b.n	23fee78 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fee82 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fee82:	b510      	push	{r4, lr}
 23fee84:	4604      	mov	r4, r0
    writeSeparator();
 23fee86:	f7ff ffef 	bl	23fee68 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fee8a:	4620      	mov	r0, r4
 23fee8c:	217b      	movs	r1, #123	; 0x7b
 23fee8e:	f7ff ff30 	bl	23fecf2 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fee92:	2300      	movs	r3, #0
}
 23fee94:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fee96:	7123      	strb	r3, [r4, #4]
}
 23fee98:	bd10      	pop	{r4, pc}
	...

023fee9c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fee9c:	b513      	push	{r0, r1, r4, lr}
 23fee9e:	4604      	mov	r4, r0
 23feea0:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23feea2:	f7ff ffe1 	bl	23fee68 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23feea6:	6823      	ldr	r3, [r4, #0]
 23feea8:	4620      	mov	r0, r4
 23feeaa:	68db      	ldr	r3, [r3, #12]
 23feeac:	9a01      	ldr	r2, [sp, #4]
 23feeae:	4903      	ldr	r1, [pc, #12]	; (23feebc <_ZN5spark10JSONWriter5valueEi+0x20>)
 23feeb0:	4798      	blx	r3
    state_ = NEXT;
 23feeb2:	2301      	movs	r3, #1
}
 23feeb4:	4620      	mov	r0, r4
    state_ = NEXT;
 23feeb6:	7123      	strb	r3, [r4, #4]
}
 23feeb8:	b002      	add	sp, #8
 23feeba:	bd10      	pop	{r4, pc}
 23feebc:	023ff9b3 	.word	0x023ff9b3

023feec0 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23feec0:	b513      	push	{r0, r1, r4, lr}
 23feec2:	4604      	mov	r4, r0
 23feec4:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23feec6:	f7ff ffcf 	bl	23fee68 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23feeca:	6823      	ldr	r3, [r4, #0]
 23feecc:	4620      	mov	r0, r4
 23feece:	68db      	ldr	r3, [r3, #12]
 23feed0:	9a01      	ldr	r2, [sp, #4]
 23feed2:	4903      	ldr	r1, [pc, #12]	; (23feee0 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23feed4:	4798      	blx	r3
    state_ = NEXT;
 23feed6:	2301      	movs	r3, #1
}
 23feed8:	4620      	mov	r0, r4
    state_ = NEXT;
 23feeda:	7123      	strb	r3, [r4, #4]
}
 23feedc:	b002      	add	sp, #8
 23feede:	bd10      	pop	{r4, pc}
 23feee0:	023ffdf8 	.word	0x023ffdf8

023feee4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23feee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23feee8:	460d      	mov	r5, r1
 23feeea:	4690      	mov	r8, r2
    write('"');
 23feeec:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23feeee:	4604      	mov	r4, r0
 23feef0:	462f      	mov	r7, r5
    write('"');
 23feef2:	f7ff fefe 	bl	23fecf2 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23feef6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fef9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23feefa:	44a8      	add	r8, r5
    while (s != end) {
 23feefc:	4547      	cmp	r7, r8
 23feefe:	46ba      	mov	sl, r7
 23fef00:	d03d      	beq.n	23fef7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fef02:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fef06:	2e22      	cmp	r6, #34	; 0x22
 23fef08:	d006      	beq.n	23fef18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fef0a:	2e5c      	cmp	r6, #92	; 0x5c
 23fef0c:	d004      	beq.n	23fef18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fef0e:	4630      	mov	r0, r6
 23fef10:	f000 fb7a 	bl	23ff608 <isprint>
 23fef14:	2800      	cmp	r0, #0
 23fef16:	d1f1      	bne.n	23feefc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fef18:	6823      	ldr	r3, [r4, #0]
 23fef1a:	4629      	mov	r1, r5
 23fef1c:	4620      	mov	r0, r4
 23fef1e:	689b      	ldr	r3, [r3, #8]
 23fef20:	ebaa 0205 	sub.w	r2, sl, r5
 23fef24:	4798      	blx	r3
            write('\\');
 23fef26:	215c      	movs	r1, #92	; 0x5c
 23fef28:	4620      	mov	r0, r4
 23fef2a:	f7ff fee2 	bl	23fecf2 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fef2e:	2e0d      	cmp	r6, #13
 23fef30:	d80a      	bhi.n	23fef48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fef32:	2e07      	cmp	r6, #7
 23fef34:	d91c      	bls.n	23fef70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fef36:	f1a6 0308 	sub.w	r3, r6, #8
 23fef3a:	2b05      	cmp	r3, #5
 23fef3c:	d818      	bhi.n	23fef70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fef3e:	e8df f003 	tbb	[pc, r3]
 23fef42:	0f0d      	.short	0x0f0d
 23fef44:	15131711 	.word	0x15131711
 23fef48:	2e22      	cmp	r6, #34	; 0x22
 23fef4a:	d001      	beq.n	23fef50 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fef4c:	2e5c      	cmp	r6, #92	; 0x5c
 23fef4e:	d10f      	bne.n	23fef70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fef50:	4631      	mov	r1, r6
                write('b');
 23fef52:	4620      	mov	r0, r4
 23fef54:	f7ff fecd 	bl	23fecf2 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fef58:	463d      	mov	r5, r7
    while (s != end) {
 23fef5a:	e7cf      	b.n	23feefc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fef5c:	2162      	movs	r1, #98	; 0x62
 23fef5e:	e7f8      	b.n	23fef52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fef60:	2174      	movs	r1, #116	; 0x74
 23fef62:	e7f6      	b.n	23fef52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fef64:	216e      	movs	r1, #110	; 0x6e
 23fef66:	e7f4      	b.n	23fef52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fef68:	2166      	movs	r1, #102	; 0x66
 23fef6a:	e7f2      	b.n	23fef52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fef6c:	2172      	movs	r1, #114	; 0x72
 23fef6e:	e7f0      	b.n	23fef52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fef70:	6823      	ldr	r3, [r4, #0]
 23fef72:	4632      	mov	r2, r6
 23fef74:	4649      	mov	r1, r9
 23fef76:	4620      	mov	r0, r4
 23fef78:	68db      	ldr	r3, [r3, #12]
 23fef7a:	4798      	blx	r3
                break;
 23fef7c:	e7ec      	b.n	23fef58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fef7e:	42bd      	cmp	r5, r7
 23fef80:	d005      	beq.n	23fef8e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fef82:	6823      	ldr	r3, [r4, #0]
 23fef84:	4629      	mov	r1, r5
 23fef86:	4620      	mov	r0, r4
 23fef88:	689b      	ldr	r3, [r3, #8]
 23fef8a:	1b7a      	subs	r2, r7, r5
 23fef8c:	4798      	blx	r3
    }
    write('"');
 23fef8e:	2122      	movs	r1, #34	; 0x22
 23fef90:	4620      	mov	r0, r4
 23fef92:	f7ff feae 	bl	23fecf2 <_ZN5spark10JSONWriter5writeEc>
}
 23fef96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fef9a:	bf00      	nop
 23fef9c:	023ffdfb 	.word	0x023ffdfb

023fefa0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fefa0:	b513      	push	{r0, r1, r4, lr}
 23fefa2:	4604      	mov	r4, r0
 23fefa4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fefa8:	f7ff ff5e 	bl	23fee68 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fefac:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fefb0:	4620      	mov	r0, r4
 23fefb2:	f7ff ff97 	bl	23feee4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fefb6:	2302      	movs	r3, #2
}
 23fefb8:	4620      	mov	r0, r4
    state_ = VALUE;
 23fefba:	7123      	strb	r3, [r4, #4]
}
 23fefbc:	b002      	add	sp, #8
 23fefbe:	bd10      	pop	{r4, pc}

023fefc0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fefc0:	b513      	push	{r0, r1, r4, lr}
 23fefc2:	4604      	mov	r4, r0
 23fefc4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fefc8:	f7ff ff4e 	bl	23fee68 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fefcc:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fefd0:	4620      	mov	r0, r4
 23fefd2:	f7ff ff87 	bl	23feee4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fefd6:	2301      	movs	r3, #1
}
 23fefd8:	4620      	mov	r0, r4
    state_ = NEXT;
 23fefda:	7123      	strb	r3, [r4, #4]
}
 23fefdc:	b002      	add	sp, #8
 23fefde:	bd10      	pop	{r4, pc}

023fefe0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fefe0:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fefe2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fefe4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fefe6:	d902      	bls.n	23fefee <pinAvailable+0xe>
    return false;
 23fefe8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fefea:	b003      	add	sp, #12
 23fefec:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fefee:	f1a0 030f 	sub.w	r3, r0, #15
 23feff2:	2b02      	cmp	r3, #2
 23feff4:	d90b      	bls.n	23ff00e <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23feff6:	2801      	cmp	r0, #1
 23feff8:	d821      	bhi.n	23ff03e <pinAvailable+0x5e>
 23feffa:	f000 f935 	bl	23ff268 <_Z19__fetch_global_Wirev>
 23feffe:	2100      	movs	r1, #0
 23ff000:	7c00      	ldrb	r0, [r0, #16]
 23ff002:	f7fd fec3 	bl	23fcd8c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff006:	f080 0001 	eor.w	r0, r0, #1
 23ff00a:	b2c0      	uxtb	r0, r0
 23ff00c:	e7ed      	b.n	23fefea <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff00e:	4d11      	ldr	r5, [pc, #68]	; (23ff054 <pinAvailable+0x74>)
 23ff010:	e8d5 1f8f 	ldab	r1, [r5]
 23ff014:	f011 0101 	ands.w	r1, r1, #1
 23ff018:	d10b      	bne.n	23ff032 <pinAvailable+0x52>
 23ff01a:	4628      	mov	r0, r5
 23ff01c:	9101      	str	r1, [sp, #4]
 23ff01e:	f7fc fc4f 	bl	23fb8c0 <__cxa_guard_acquire>
 23ff022:	9901      	ldr	r1, [sp, #4]
 23ff024:	b128      	cbz	r0, 23ff032 <pinAvailable+0x52>
 23ff026:	480c      	ldr	r0, [pc, #48]	; (23ff058 <pinAvailable+0x78>)
 23ff028:	f7fe f964 	bl	23fd2f4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff02c:	4628      	mov	r0, r5
 23ff02e:	f7fc fc4c 	bl	23fb8ca <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff032:	4b09      	ldr	r3, [pc, #36]	; (23ff058 <pinAvailable+0x78>)
 23ff034:	7818      	ldrb	r0, [r3, #0]
 23ff036:	f7fd fed3 	bl	23fcde0 <hal_spi_is_enabled>
 23ff03a:	2800      	cmp	r0, #0
 23ff03c:	d1d4      	bne.n	23fefe8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff03e:	3c08      	subs	r4, #8
 23ff040:	2c01      	cmp	r4, #1
 23ff042:	d805      	bhi.n	23ff050 <pinAvailable+0x70>
 23ff044:	f000 f864 	bl	23ff110 <_Z22__fetch_global_Serial1v>
 23ff048:	7c00      	ldrb	r0, [r0, #16]
 23ff04a:	f7fd fe21 	bl	23fcc90 <hal_usart_is_enabled>
 23ff04e:	e7da      	b.n	23ff006 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff050:	2001      	movs	r0, #1
 23ff052:	e7ca      	b.n	23fefea <pinAvailable+0xa>
 23ff054:	1007aef4 	.word	0x1007aef4
 23ff058:	1007aef8 	.word	0x1007aef8

023ff05c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff05c:	281b      	cmp	r0, #27
{
 23ff05e:	b538      	push	{r3, r4, r5, lr}
 23ff060:	4604      	mov	r4, r0
 23ff062:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff064:	d80a      	bhi.n	23ff07c <pinMode+0x20>
 23ff066:	29ff      	cmp	r1, #255	; 0xff
 23ff068:	d008      	beq.n	23ff07c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff06a:	f7ff ffb9 	bl	23fefe0 <pinAvailable>
 23ff06e:	b128      	cbz	r0, 23ff07c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff070:	4629      	mov	r1, r5
 23ff072:	4620      	mov	r0, r4
}
 23ff074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff078:	f7fd bd1c 	b.w	23fcab4 <hal_gpio_mode>
}
 23ff07c:	bd38      	pop	{r3, r4, r5, pc}

023ff07e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff07e:	b538      	push	{r3, r4, r5, lr}
 23ff080:	4604      	mov	r4, r0
 23ff082:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff084:	f7fd fd24 	bl	23fcad0 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff088:	28ff      	cmp	r0, #255	; 0xff
 23ff08a:	d010      	beq.n	23ff0ae <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff08c:	2806      	cmp	r0, #6
 23ff08e:	d804      	bhi.n	23ff09a <digitalWrite+0x1c>
 23ff090:	234d      	movs	r3, #77	; 0x4d
 23ff092:	fa23 f000 	lsr.w	r0, r3, r0
 23ff096:	07c3      	lsls	r3, r0, #31
 23ff098:	d409      	bmi.n	23ff0ae <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff09a:	4620      	mov	r0, r4
 23ff09c:	f7ff ffa0 	bl	23fefe0 <pinAvailable>
 23ff0a0:	b128      	cbz	r0, 23ff0ae <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff0a2:	4629      	mov	r1, r5
 23ff0a4:	4620      	mov	r0, r4
}
 23ff0a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff0aa:	f7fd bd1f 	b.w	23fcaec <hal_gpio_write>
}
 23ff0ae:	bd38      	pop	{r3, r4, r5, pc}

023ff0b0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff0b0:	4770      	bx	lr
	...

023ff0b4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff0b4:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff0b6:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff0b8:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff0ba:	462a      	mov	r2, r5
 23ff0bc:	2100      	movs	r1, #0
 23ff0be:	f000 fad2 	bl	23ff666 <memset>
 23ff0c2:	8025      	strh	r5, [r4, #0]
 23ff0c4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff0c6:	4907      	ldr	r1, [pc, #28]	; (23ff0e4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff0c8:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff0ca:	8125      	strh	r5, [r4, #8]
 23ff0cc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff0ce:	f000 fa8f 	bl	23ff5f0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff0d2:	4904      	ldr	r1, [pc, #16]	; (23ff0e4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff0d4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff0d6:	4628      	mov	r0, r5
 23ff0d8:	f000 fa8a 	bl	23ff5f0 <_ZnajRKSt9nothrow_t>
    };
 23ff0dc:	60e0      	str	r0, [r4, #12]
}
 23ff0de:	4620      	mov	r0, r4
 23ff0e0:	bd38      	pop	{r3, r4, r5, pc}
 23ff0e2:	bf00      	nop
 23ff0e4:	023ffe33 	.word	0x023ffe33

023ff0e8 <__tcf_2>:
 23ff0e8:	4770      	bx	lr

023ff0ea <__tcf_1>:
 23ff0ea:	4770      	bx	lr

023ff0ec <_Z20acquireSerial1Bufferv>:
{
 23ff0ec:	b510      	push	{r4, lr}
 23ff0ee:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff0f0:	f7ff ffe0 	bl	23ff0b4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff0f4:	4620      	mov	r0, r4
 23ff0f6:	bd10      	pop	{r4, pc}

023ff0f8 <_Z20acquireSerial2Bufferv>:
 23ff0f8:	b510      	push	{r4, lr}
 23ff0fa:	4604      	mov	r4, r0
 23ff0fc:	f7ff ffda 	bl	23ff0b4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff100:	4620      	mov	r0, r4
 23ff102:	bd10      	pop	{r4, pc}

023ff104 <_Z20acquireSerial3Bufferv>:
 23ff104:	b510      	push	{r4, lr}
 23ff106:	4604      	mov	r4, r0
 23ff108:	f7ff ffd4 	bl	23ff0b4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff10c:	4620      	mov	r0, r4
 23ff10e:	bd10      	pop	{r4, pc}

023ff110 <_Z22__fetch_global_Serial1v>:
{
 23ff110:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff112:	4d0e      	ldr	r5, [pc, #56]	; (23ff14c <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff114:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff116:	e8d5 1f8f 	ldab	r1, [r5]
 23ff11a:	f011 0401 	ands.w	r4, r1, #1
 23ff11e:	d111      	bne.n	23ff144 <_Z22__fetch_global_Serial1v+0x34>
 23ff120:	4628      	mov	r0, r5
 23ff122:	f7fc fbcd 	bl	23fb8c0 <__cxa_guard_acquire>
 23ff126:	b168      	cbz	r0, 23ff144 <_Z22__fetch_global_Serial1v+0x34>
 23ff128:	a801      	add	r0, sp, #4
 23ff12a:	f7ff ffdf 	bl	23ff0ec <_Z20acquireSerial1Bufferv>
 23ff12e:	4621      	mov	r1, r4
 23ff130:	aa01      	add	r2, sp, #4
 23ff132:	4807      	ldr	r0, [pc, #28]	; (23ff150 <_Z22__fetch_global_Serial1v+0x40>)
 23ff134:	f7ff fc06 	bl	23fe944 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff138:	4628      	mov	r0, r5
 23ff13a:	f7fc fbc6 	bl	23fb8ca <__cxa_guard_release>
 23ff13e:	4805      	ldr	r0, [pc, #20]	; (23ff154 <_Z22__fetch_global_Serial1v+0x44>)
 23ff140:	f000 fa5b 	bl	23ff5fa <atexit>
    return serial1;
}
 23ff144:	4802      	ldr	r0, [pc, #8]	; (23ff150 <_Z22__fetch_global_Serial1v+0x40>)
 23ff146:	b007      	add	sp, #28
 23ff148:	bd30      	pop	{r4, r5, pc}
 23ff14a:	bf00      	nop
 23ff14c:	1007af00 	.word	0x1007af00
 23ff150:	1007af0c 	.word	0x1007af0c
 23ff154:	023ff0b1 	.word	0x023ff0b1

023ff158 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff158:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff15a:	4c0d      	ldr	r4, [pc, #52]	; (23ff190 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff15c:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff15e:	e8d4 3f8f 	ldab	r3, [r4]
 23ff162:	07db      	lsls	r3, r3, #31
 23ff164:	d411      	bmi.n	23ff18a <_Z22__fetch_global_Serial2v+0x32>
 23ff166:	4620      	mov	r0, r4
 23ff168:	f7fc fbaa 	bl	23fb8c0 <__cxa_guard_acquire>
 23ff16c:	b168      	cbz	r0, 23ff18a <_Z22__fetch_global_Serial2v+0x32>
 23ff16e:	a801      	add	r0, sp, #4
 23ff170:	f7ff ffc2 	bl	23ff0f8 <_Z20acquireSerial2Bufferv>
 23ff174:	2101      	movs	r1, #1
 23ff176:	aa01      	add	r2, sp, #4
 23ff178:	4806      	ldr	r0, [pc, #24]	; (23ff194 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff17a:	f7ff fbe3 	bl	23fe944 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff17e:	4620      	mov	r0, r4
 23ff180:	f7fc fba3 	bl	23fb8ca <__cxa_guard_release>
 23ff184:	4804      	ldr	r0, [pc, #16]	; (23ff198 <_Z22__fetch_global_Serial2v+0x40>)
 23ff186:	f000 fa38 	bl	23ff5fa <atexit>
	return serial2;
}
 23ff18a:	4802      	ldr	r0, [pc, #8]	; (23ff194 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff18c:	b006      	add	sp, #24
 23ff18e:	bd10      	pop	{r4, pc}
 23ff190:	1007af04 	.word	0x1007af04
 23ff194:	1007af20 	.word	0x1007af20
 23ff198:	023ff0eb 	.word	0x023ff0eb

023ff19c <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff19c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff19e:	f7ff ffdb 	bl	23ff158 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff1a2:	4b07      	ldr	r3, [pc, #28]	; (23ff1c0 <_Z15serialEventRun2v+0x24>)
 23ff1a4:	4604      	mov	r4, r0
 23ff1a6:	b153      	cbz	r3, 23ff1be <_Z15serialEventRun2v+0x22>
 23ff1a8:	f7ff fbea 	bl	23fe980 <_ZN11USARTSerial9isEnabledEv>
 23ff1ac:	b138      	cbz	r0, 23ff1be <_Z15serialEventRun2v+0x22>
 23ff1ae:	6823      	ldr	r3, [r4, #0]
 23ff1b0:	4620      	mov	r0, r4
 23ff1b2:	691b      	ldr	r3, [r3, #16]
 23ff1b4:	4798      	blx	r3
 23ff1b6:	2800      	cmp	r0, #0
 23ff1b8:	dd01      	ble.n	23ff1be <_Z15serialEventRun2v+0x22>
        handler();
 23ff1ba:	e000      	b.n	23ff1be <_Z15serialEventRun2v+0x22>
 23ff1bc:	bf00      	nop
}
 23ff1be:	bd10      	pop	{r4, pc}
 23ff1c0:	00000000 	.word	0x00000000

023ff1c4 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff1c4:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff1c6:	4c0d      	ldr	r4, [pc, #52]	; (23ff1fc <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff1c8:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff1ca:	e8d4 3f8f 	ldab	r3, [r4]
 23ff1ce:	07db      	lsls	r3, r3, #31
 23ff1d0:	d411      	bmi.n	23ff1f6 <_Z22__fetch_global_Serial3v+0x32>
 23ff1d2:	4620      	mov	r0, r4
 23ff1d4:	f7fc fb74 	bl	23fb8c0 <__cxa_guard_acquire>
 23ff1d8:	b168      	cbz	r0, 23ff1f6 <_Z22__fetch_global_Serial3v+0x32>
 23ff1da:	a801      	add	r0, sp, #4
 23ff1dc:	f7ff ff92 	bl	23ff104 <_Z20acquireSerial3Bufferv>
 23ff1e0:	2102      	movs	r1, #2
 23ff1e2:	aa01      	add	r2, sp, #4
 23ff1e4:	4806      	ldr	r0, [pc, #24]	; (23ff200 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff1e6:	f7ff fbad 	bl	23fe944 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff1ea:	4620      	mov	r0, r4
 23ff1ec:	f7fc fb6d 	bl	23fb8ca <__cxa_guard_release>
 23ff1f0:	4804      	ldr	r0, [pc, #16]	; (23ff204 <_Z22__fetch_global_Serial3v+0x40>)
 23ff1f2:	f000 fa02 	bl	23ff5fa <atexit>
	return serial3;
}
 23ff1f6:	4802      	ldr	r0, [pc, #8]	; (23ff200 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff1f8:	b006      	add	sp, #24
 23ff1fa:	bd10      	pop	{r4, pc}
 23ff1fc:	1007af08 	.word	0x1007af08
 23ff200:	1007af34 	.word	0x1007af34
 23ff204:	023ff0e9 	.word	0x023ff0e9

023ff208 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff208:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff20a:	f7ff ffdb 	bl	23ff1c4 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff20e:	4b07      	ldr	r3, [pc, #28]	; (23ff22c <_Z15serialEventRun3v+0x24>)
 23ff210:	4604      	mov	r4, r0
 23ff212:	b153      	cbz	r3, 23ff22a <_Z15serialEventRun3v+0x22>
 23ff214:	f7ff fbb4 	bl	23fe980 <_ZN11USARTSerial9isEnabledEv>
 23ff218:	b138      	cbz	r0, 23ff22a <_Z15serialEventRun3v+0x22>
 23ff21a:	6823      	ldr	r3, [r4, #0]
 23ff21c:	4620      	mov	r0, r4
 23ff21e:	691b      	ldr	r3, [r3, #16]
 23ff220:	4798      	blx	r3
 23ff222:	2800      	cmp	r0, #0
 23ff224:	dd01      	ble.n	23ff22a <_Z15serialEventRun3v+0x22>
        handler();
 23ff226:	e000      	b.n	23ff22a <_Z15serialEventRun3v+0x22>
 23ff228:	bf00      	nop
}
 23ff22a:	bd10      	pop	{r4, pc}
 23ff22c:	00000000 	.word	0x00000000

023ff230 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff230:	4770      	bx	lr
	...

023ff234 <_Z17acquireWireBufferv>:
{
 23ff234:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff236:	4b0a      	ldr	r3, [pc, #40]	; (23ff260 <_Z17acquireWireBufferv+0x2c>)
{
 23ff238:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff23a:	6003      	str	r3, [r0, #0]
 23ff23c:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff23e:	4909      	ldr	r1, [pc, #36]	; (23ff264 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff240:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff242:	2020      	movs	r0, #32
 23ff244:	f000 f9d4 	bl	23ff5f0 <_ZnajRKSt9nothrow_t>
	};
 23ff248:	2520      	movs	r5, #32
 23ff24a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff24c:	4905      	ldr	r1, [pc, #20]	; (23ff264 <_Z17acquireWireBufferv+0x30>)
 23ff24e:	4628      	mov	r0, r5
	};
 23ff250:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff252:	f000 f9cd 	bl	23ff5f0 <_ZnajRKSt9nothrow_t>
	};
 23ff256:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff25a:	4620      	mov	r0, r4
 23ff25c:	bd38      	pop	{r3, r4, r5, pc}
 23ff25e:	bf00      	nop
 23ff260:	00010018 	.word	0x00010018
 23ff264:	023ffe33 	.word	0x023ffe33

023ff268 <_Z19__fetch_global_Wirev>:
{
 23ff268:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff26a:	4d0e      	ldr	r5, [pc, #56]	; (23ff2a4 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff26c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff26e:	e8d5 1f8f 	ldab	r1, [r5]
 23ff272:	f011 0401 	ands.w	r4, r1, #1
 23ff276:	d111      	bne.n	23ff29c <_Z19__fetch_global_Wirev+0x34>
 23ff278:	4628      	mov	r0, r5
 23ff27a:	f7fc fb21 	bl	23fb8c0 <__cxa_guard_acquire>
 23ff27e:	b168      	cbz	r0, 23ff29c <_Z19__fetch_global_Wirev+0x34>
 23ff280:	4668      	mov	r0, sp
 23ff282:	f7ff ffd7 	bl	23ff234 <_Z17acquireWireBufferv>
 23ff286:	466a      	mov	r2, sp
 23ff288:	4621      	mov	r1, r4
 23ff28a:	4807      	ldr	r0, [pc, #28]	; (23ff2a8 <_Z19__fetch_global_Wirev+0x40>)
 23ff28c:	f7ff fba8 	bl	23fe9e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff290:	4628      	mov	r0, r5
 23ff292:	f7fc fb1a 	bl	23fb8ca <__cxa_guard_release>
 23ff296:	4805      	ldr	r0, [pc, #20]	; (23ff2ac <_Z19__fetch_global_Wirev+0x44>)
 23ff298:	f000 f9af 	bl	23ff5fa <atexit>
	return wire;
}
 23ff29c:	4802      	ldr	r0, [pc, #8]	; (23ff2a8 <_Z19__fetch_global_Wirev+0x40>)
 23ff29e:	b007      	add	sp, #28
 23ff2a0:	bd30      	pop	{r4, r5, pc}
 23ff2a2:	bf00      	nop
 23ff2a4:	1007af4c 	.word	0x1007af4c
 23ff2a8:	1007af50 	.word	0x1007af50
 23ff2ac:	023ff231 	.word	0x023ff231

023ff2b0 <PLL_Div>:
  */
void PLL_Div(u32 div)
{
	u32 Tmp;

	Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PERI_CLK_CTRL3);
 23ff2b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23ff2b4:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
	Tmp &= ~(BIT_MASK_HSYS_I2S_CLKDIV << BIT_SHIFT_HSYS_I2S_CLKDIV);
 23ff2b8:	f023 63fe 	bic.w	r3, r3, #133169152	; 0x7f00000
	Tmp |= ((u32)div) << BIT_SHIFT_HSYS_I2S_CLKDIV;
 23ff2bc:	ea43 5000 	orr.w	r0, r3, r0, lsl #20
	HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PERI_CLK_CTRL3, Tmp);
 23ff2c0:	f8c2 0218 	str.w	r0, [r2, #536]	; 0x218
}
 23ff2c4:	4770      	bx	lr
	...

023ff2c8 <PLL_I2S_Set>:
void PLL_I2S_Set(u32 new_state)
{
	u32 Tmp;


	if (ENABLE == new_state){
 23ff2c8:	2801      	cmp	r0, #1
{
 23ff2ca:	b570      	push	{r4, r5, r6, lr}
 23ff2cc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (ENABLE == new_state){
 23ff2d0:	d14a      	bne.n	23ff368 <PLL_I2S_Set+0xa0>
		//avoid repeated pll enable operation
		if((HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_TEST) & BIT_PLL_I2S_RDY)){
 23ff2d2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 23ff2d6:	009a      	lsls	r2, r3, #2
 23ff2d8:	d445      	bmi.n	23ff366 <PLL_I2S_Set+0x9e>
			return ;
		}
		//enable 98.304M PLL
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_FUNC_EN0);
 23ff2da:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 23ff2de:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
		Tmp |= (BIT_LP_PLL_BG_I_EN |BIT_LP_PLL_BG_EN);
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);

		DelayUs(2);
 23ff2e2:	2002      	movs	r0, #2
		Tmp |= BIT_SYS_AMACRO_EN;
 23ff2e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_FUNC_EN0, Tmp);
 23ff2e8:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
 23ff2ec:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280
		DelayUs(2);
 23ff2f0:	4e21      	ldr	r6, [pc, #132]	; (23ff378 <PLL_I2S_Set+0xb0>)
		Tmp |= (BIT_LP_PLL_BG_I_EN |BIT_LP_PLL_BG_EN);
 23ff2f2:	f043 0303 	orr.w	r3, r3, #3
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);
 23ff2f6:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280
		DelayUs(2);
 23ff2fa:	47b0      	blx	r6

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
 23ff2fc:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
		Tmp |= BIT_PLL_I2S_POWCUT_EN;
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);

		DelayUs(400);
 23ff300:	f44f 70c8 	mov.w	r0, #400	; 0x190
		Tmp |= BIT_LP_PLL_MBIAS_EN;
 23ff304:	f043 0304 	orr.w	r3, r3, #4
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);
 23ff308:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23ff30c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_POWCUT_EN;
 23ff310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23ff314:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		DelayUs(400);
 23ff318:	47b0      	blx	r6

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_XTAL_CTRL1);
 23ff31a:	f8d5 3264 	ldr.w	r3, [r5, #612]	; 0x264
		Tmp &= ~BIT_XTAL_AAC_GM_EN;
 23ff31e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_XTAL_CTRL1, Tmp);
 23ff322:	f8c5 3264 	str.w	r3, [r5, #612]	; 0x264

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23ff326:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= (BIT_PLL_I2S_DIV_EN | BIT_PLL_I2S_EN);
 23ff32a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23ff32e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PWR_ISO_CTRL);
 23ff332:	6823      	ldr	r3, [r4, #0]
		Tmp &= ~BIT_HSYS_ISO_AUXPLL_I2S;
 23ff334:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PWR_ISO_CTRL, Tmp);
 23ff338:	6023      	str	r3, [r4, #0]

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL1);
 23ff33a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
		Tmp |= BIT_PLL_I2S_POW_SDM_FCODE;
 23ff33e:	f043 0301 	orr.w	r3, r3, #1
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL1, Tmp);
 23ff342:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

		while ((HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_TEST) & BIT_PLL_I2S_RDY) != BIT_PLL_I2S_RDY) ;
 23ff346:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 23ff34a:	009b      	lsls	r3, r3, #2
 23ff34c:	d5fb      	bpl.n	23ff346 <PLL_I2S_Set+0x7e>

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23ff34e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_CLK_EN;
 23ff352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23ff356:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23ff35a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_DIV2_EN;
 23ff35e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
	}
	else{
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
		Tmp &= ~(BIT_PLL_I2S_CLK_EN|BIT_PLL_I2S_DIV2_EN|BIT_PLL_I2S_EN|BIT_PLL_I2S_DIV_EN|BIT_PLL_I2S_DIV_EN);
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23ff362:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
}
 23ff366:	bd70      	pop	{r4, r5, r6, pc}
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23ff368:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp &= ~(BIT_PLL_I2S_CLK_EN|BIT_PLL_I2S_DIV2_EN|BIT_PLL_I2S_EN|BIT_PLL_I2S_DIV_EN|BIT_PLL_I2S_DIV_EN);
 23ff36c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 23ff370:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 23ff374:	e7f5      	b.n	23ff362 <PLL_I2S_Set+0x9a>
 23ff376:	bf00      	nop
 23ff378:	1010a949 	.word	0x1010a949

023ff37c <AUDIO_SP_StructInit>:
  *         initialized.
  * @retval None
  */
void AUDIO_SP_StructInit(SP_InitTypeDef* SP_InitStruct)
{
	SP_InitStruct->SP_WordLen = SP_WL_16;
 23ff37c:	2300      	movs	r3, #0
	SP_InitStruct->SP_DataFormat = SP_DF_I2S;
 23ff37e:	e9c0 3300 	strd	r3, r3, [r0]
	SP_InitStruct->SP_MonoStereo = SP_CH_STEREO;
	SP_InitStruct->SP_SelRxCh = SP_RX_CH_LR;
 23ff382:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 23ff386:	4770      	bx	lr

023ff388 <AUDIO_SP_TxStart>:
  * @retval None
  */
void AUDIO_SP_TxStart(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23ff388:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE) {
 23ff38a:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23ff38c:	bf0b      	itete	eq
 23ff38e:	f423 3380 	biceq.w	r3, r3, #65536	; 0x10000
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
	} else {
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_TX_DISABLE;
 23ff392:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23ff396:	6043      	streq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_TX_DISABLE;
 23ff398:	6043      	strne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
 23ff39a:	bf0b      	itete	eq
 23ff39c:	6843      	ldreq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_TX;
 23ff39e:	6843      	ldrne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
 23ff3a0:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_TX;
 23ff3a4:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
 23ff3a8:	6043      	str	r3, [r0, #4]
	}
}
 23ff3aa:	4770      	bx	lr

023ff3ac <AUDIO_SP_RxStart>:
  * @retval None
  */
void AUDIO_SP_RxStart(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23ff3ac:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE) {
 23ff3ae:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23ff3b0:	bf0b      	itete	eq
 23ff3b2:	f023 7380 	biceq.w	r3, r3, #16777216	; 0x1000000
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
	} else {
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_RX_DISABLE;
 23ff3b6:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23ff3ba:	6043      	streq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_RX_DISABLE;
 23ff3bc:	6043      	strne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
 23ff3be:	bf0b      	itete	eq
 23ff3c0:	6843      	ldreq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_RX;
 23ff3c2:	6843      	ldrne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
 23ff3c4:	f043 7300 	orreq.w	r3, r3, #33554432	; 0x2000000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_RX;
 23ff3c8:	f023 7300 	bicne.w	r3, r3, #33554432	; 0x2000000
 23ff3cc:	6043      	str	r3, [r0, #4]
	}
}
 23ff3ce:	4770      	bx	lr

023ff3d0 <AUDIO_SP_Init>:
{
 23ff3d0:	b538      	push	{r3, r4, r5, lr}
	assert_param(IS_SP_WORD_LEN(SP_InitStruct->SP_WordLen));
 23ff3d2:	680b      	ldr	r3, [r1, #0]
{
 23ff3d4:	4605      	mov	r5, r0
 23ff3d6:	460c      	mov	r4, r1
	assert_param(IS_SP_WORD_LEN(SP_InitStruct->SP_WordLen));
 23ff3d8:	b133      	cbz	r3, 23ff3e8 <AUDIO_SP_Init+0x18>
 23ff3da:	3b02      	subs	r3, #2
 23ff3dc:	2b01      	cmp	r3, #1
 23ff3de:	d903      	bls.n	23ff3e8 <AUDIO_SP_Init+0x18>
 23ff3e0:	213a      	movs	r1, #58	; 0x3a
 23ff3e2:	481f      	ldr	r0, [pc, #124]	; (23ff460 <AUDIO_SP_Init+0x90>)
 23ff3e4:	f000 fabc 	bl	23ff960 <__io_assert_failed_veneer>
	assert_param(IS_SP_DATA_FMT(SP_InitStruct->SP_DataFormat));
 23ff3e8:	6863      	ldr	r3, [r4, #4]
 23ff3ea:	2b03      	cmp	r3, #3
 23ff3ec:	d906      	bls.n	23ff3fc <AUDIO_SP_Init+0x2c>
 23ff3ee:	3b06      	subs	r3, #6
 23ff3f0:	2b01      	cmp	r3, #1
 23ff3f2:	d903      	bls.n	23ff3fc <AUDIO_SP_Init+0x2c>
 23ff3f4:	213b      	movs	r1, #59	; 0x3b
 23ff3f6:	481a      	ldr	r0, [pc, #104]	; (23ff460 <AUDIO_SP_Init+0x90>)
 23ff3f8:	f000 fab2 	bl	23ff960 <__io_assert_failed_veneer>
	assert_param(IS_SP_CHN_NUM(SP_InitStruct->SP_MonoStereo));
 23ff3fc:	68a3      	ldr	r3, [r4, #8]
 23ff3fe:	2b01      	cmp	r3, #1
 23ff400:	d903      	bls.n	23ff40a <AUDIO_SP_Init+0x3a>
 23ff402:	213c      	movs	r1, #60	; 0x3c
 23ff404:	4816      	ldr	r0, [pc, #88]	; (23ff460 <AUDIO_SP_Init+0x90>)
 23ff406:	f000 faab 	bl	23ff960 <__io_assert_failed_veneer>
	assert_param(IS_SP_SEL_RX_CH(SP_InitStruct->SP_SelRxCh));
 23ff40a:	68e3      	ldr	r3, [r4, #12]
 23ff40c:	2b03      	cmp	r3, #3
 23ff40e:	d903      	bls.n	23ff418 <AUDIO_SP_Init+0x48>
 23ff410:	213d      	movs	r1, #61	; 0x3d
 23ff412:	4813      	ldr	r0, [pc, #76]	; (23ff460 <AUDIO_SP_Init+0x90>)
 23ff414:	f000 faa4 	bl	23ff960 <__io_assert_failed_veneer>
	SPORTx->SP_CTRLR0 |= SP_CTRLR0_RST;
 23ff418:	686b      	ldr	r3, [r5, #4]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23ff41a:	2100      	movs	r1, #0
	SPORTx->SP_CTRLR0 |= SP_CTRLR0_RST;
 23ff41c:	f043 0301 	orr.w	r3, r3, #1
 23ff420:	606b      	str	r3, [r5, #4]
	SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RST;
 23ff422:	686b      	ldr	r3, [r5, #4]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23ff424:	4628      	mov	r0, r5
	SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RST;
 23ff426:	f023 0301 	bic.w	r3, r3, #1
 23ff42a:	606b      	str	r3, [r5, #4]
	SPORTx->SP_CLK_DIV = 0x271 | (0x10 << 16) | SP_CLK_MI_NI_UPDATE;
 23ff42c:	4b0d      	ldr	r3, [pc, #52]	; (23ff464 <AUDIO_SP_Init+0x94>)
 23ff42e:	61eb      	str	r3, [r5, #28]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23ff430:	4b0d      	ldr	r3, [pc, #52]	; (23ff468 <AUDIO_SP_Init+0x98>)
 23ff432:	4798      	blx	r3
	AUDIO_SP_RxStart(SPORTx, DISABLE);
 23ff434:	4b0d      	ldr	r3, [pc, #52]	; (23ff46c <AUDIO_SP_Init+0x9c>)
 23ff436:	4798      	blx	r3
		(SP_InitStruct->SP_DataFormat << 8) |
 23ff438:	e9d4 1300 	ldrd	r1, r3, [r4]
	Tmp = SPORTx->SP_CTRLR0;
 23ff43c:	686a      	ldr	r2, [r5, #4]
		(SP_InitStruct->SP_DataFormat << 8) |
 23ff43e:	021b      	lsls	r3, r3, #8
	Tmp &= ~(SP_CTRLR0_DATA_LEN_SEL |SP_CTRLR0_DATA_FORMAT_SEL | SP_CTRLR0_EN_I2S_MONO | SP_CTRLR0_SEL_I2S_RX_CH);
 23ff440:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 23ff444:	f422 526c 	bic.w	r2, r2, #15104	; 0x3b00
	Tmp |= ((SP_InitStruct->SP_WordLen << 12) |
 23ff448:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 23ff44c:	4313      	orrs	r3, r2
		(SP_InitStruct->SP_MonoStereo << 11) |
 23ff44e:	68a2      	ldr	r2, [r4, #8]
 23ff450:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
		(SP_InitStruct->SP_SelRxCh << 28));
 23ff454:	68e2      	ldr	r2, [r4, #12]
	Tmp |= ((SP_InitStruct->SP_WordLen << 12) |
 23ff456:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
	SPORTx->SP_CTRLR0 = Tmp;
 23ff45a:	606b      	str	r3, [r5, #4]
}
 23ff45c:	bd38      	pop	{r3, r4, r5, pc}
 23ff45e:	bf00      	nop
 23ff460:	023ffe25 	.word	0x023ffe25
 23ff464:	80100271 	.word	0x80100271
 23ff468:	023ff389 	.word	0x023ff389
 23ff46c:	023ff3ad 	.word	0x023ff3ad

023ff470 <AUDIO_SP_RdmaCmd>:
  * @retval None
  */
void AUDIO_SP_RdmaCmd(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23ff470:	6883      	ldr	r3, [r0, #8]
	if (NewState == ENABLE) {
 23ff472:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23ff474:	bf0b      	itete	eq
 23ff476:	f443 2300 	orreq.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
	} else {
		SPORTx->SP_CTRLR1 &= ~ SP_CTRLR1_RDMA_REQ;
 23ff47a:	f423 2300 	bicne.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23ff47e:	6083      	streq	r3, [r0, #8]
		SPORTx->SP_CTRLR1 &= ~ SP_CTRLR1_RDMA_REQ;
 23ff480:	6083      	strne	r3, [r0, #8]
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
 23ff482:	bf0b      	itete	eq
 23ff484:	68c3      	ldreq	r3, [r0, #12]
		SPORTx->SP_DSP_INT_CR |= SP_RX_DMA_SINGLE_NO_REQ;
 23ff486:	68c3      	ldrne	r3, [r0, #12]
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
 23ff488:	f423 2300 	biceq.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_DSP_INT_CR |= SP_RX_DMA_SINGLE_NO_REQ;
 23ff48c:	f443 2300 	orrne.w	r3, r3, #524288	; 0x80000
 23ff490:	60c3      	str	r3, [r0, #12]
	}
}
 23ff492:	4770      	bx	lr

023ff494 <AUDIO_SP_RXGDMA_Init>:
	void *CallbackData,
	IRQ_FUN CallbackFunc,
	u8 *pRxData,
	u32 Length
	)
{
 23ff494:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23ff498:	461f      	mov	r7, r3
 23ff49a:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
	u8 GdmaChnl;
	AUDIO_SPORT_TypeDef *SPORTx = AUDIO_DEV_TABLE[Index].SPORTx;
 23ff49e:	230c      	movs	r3, #12
 23ff4a0:	4358      	muls	r0, r3
 23ff4a2:	4b4b      	ldr	r3, [pc, #300]	; (23ff5d0 <AUDIO_SP_RXGDMA_Init+0x13c>)
	u32 WordLen = AUDIO_SP_GetWordLen(SPORTx);

	assert_param(GDMA_InitStruct != NULL);
 23ff4a4:	460c      	mov	r4, r1
	AUDIO_SPORT_TypeDef *SPORTx = AUDIO_DEV_TABLE[Index].SPORTx;
 23ff4a6:	f853 8000 	ldr.w	r8, [r3, r0]
	u32 len = ((SPORTx->SP_CTRLR0) & SP_CTRLR0_DATA_LEN_SEL) >> 12;
 23ff4aa:	f8d8 9004 	ldr.w	r9, [r8, #4]
	assert_param(GDMA_InitStruct != NULL);
 23ff4ae:	b931      	cbnz	r1, 23ff4be <AUDIO_SP_RXGDMA_Init+0x2a>
 23ff4b0:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 23ff4b4:	4847      	ldr	r0, [pc, #284]	; (23ff5d4 <AUDIO_SP_RXGDMA_Init+0x140>)
 23ff4b6:	9201      	str	r2, [sp, #4]
 23ff4b8:	f000 fa52 	bl	23ff960 <__io_assert_failed_veneer>
 23ff4bc:	9a01      	ldr	r2, [sp, #4]
	/*obtain a DMA channel and register DMA interrupt handler*/
	GdmaChnl = GDMA_ChnlAlloc(0, CallbackFunc, (u32)CallbackData, 12);
 23ff4be:	4639      	mov	r1, r7
 23ff4c0:	230c      	movs	r3, #12
 23ff4c2:	4f45      	ldr	r7, [pc, #276]	; (23ff5d8 <AUDIO_SP_RXGDMA_Init+0x144>)
 23ff4c4:	2000      	movs	r0, #0
 23ff4c6:	47b8      	blx	r7
	if (GdmaChnl == 0xFF) {
 23ff4c8:	28ff      	cmp	r0, #255	; 0xff
	GdmaChnl = GDMA_ChnlAlloc(0, CallbackFunc, (u32)CallbackData, 12);
 23ff4ca:	4607      	mov	r7, r0
	if (GdmaChnl == 0xFF) {
 23ff4cc:	d07e      	beq.n	23ff5cc <AUDIO_SP_RXGDMA_Init+0x138>
		// No Available DMA channel
		return _FALSE;
	}

	_memset((void *)GDMA_InitStruct, 0, sizeof(GDMA_InitTypeDef));
 23ff4ce:	2254      	movs	r2, #84	; 0x54
 23ff4d0:	2100      	movs	r1, #0
 23ff4d2:	4b42      	ldr	r3, [pc, #264]	; (23ff5dc <AUDIO_SP_RXGDMA_Init+0x148>)
 23ff4d4:	4620      	mov	r0, r4
 23ff4d6:	4798      	blx	r3
	/*set GDMA initial structure member value*/
	GDMA_InitStruct->MuliBlockCunt = 0;
	GDMA_InitStruct->GDMA_ReloadSrc = 0;
	GDMA_InitStruct->MaxMuliBlock = 1;
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
	GDMA_InitStruct->GDMA_SrcHandshakeInterface = AUDIO_DEV_TABLE[Index].Rx_HandshakeInterface;
 23ff4d8:	210b      	movs	r1, #11
 23ff4da:	6421      	str	r1, [r4, #64]	; 0x40
	GDMA_InitStruct->GDMA_SrcAddr = (u32)&AUDIO_DEV_TABLE[Index].SPORTx->SP_RX_DR;
 23ff4dc:	f108 0110 	add.w	r1, r8, #16
	GDMA_InitStruct->MuliBlockCunt = 0;
 23ff4e0:	2200      	movs	r2, #0
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
 23ff4e2:	2302      	movs	r3, #2
	GDMA_InitStruct->MaxMuliBlock = 1;
 23ff4e4:	2001      	movs	r0, #1
	GDMA_InitStruct->GDMA_SrcAddr = (u32)&AUDIO_DEV_TABLE[Index].SPORTx->SP_RX_DR;
 23ff4e6:	6221      	str	r1, [r4, #32]
	GDMA_InitStruct->GDMA_Index = 0;
	GDMA_InitStruct->GDMA_ChNum = GdmaChnl;
	GDMA_InitStruct->GDMA_IsrType = (BlockType|TransferType|ErrType);	
 23ff4e8:	2113      	movs	r1, #19
	u32 len = ((SPORTx->SP_CTRLR0) & SP_CTRLR0_DATA_LEN_SEL) >> 12;
 23ff4ea:	f3c9 3901 	ubfx	r9, r9, #12, #2
	GDMA_InitStruct->GDMA_DstInc = IncType;
	GDMA_InitStruct->GDMA_SrcInc = NoChange;

	/*  Cofigure GDMA transfer */
	if (WordLen == SP_WL_8)  {
 23ff4ee:	f1b9 0f03 	cmp.w	r9, #3
	GDMA_InitStruct->GDMA_SrcInc = NoChange;
 23ff4f2:	e9c4 2304 	strd	r2, r3, [r4, #16]
	GDMA_InitStruct->MuliBlockCunt = 0;
 23ff4f6:	64a2      	str	r2, [r4, #72]	; 0x48
	GDMA_InitStruct->GDMA_ReloadSrc = 0;
 23ff4f8:	6322      	str	r2, [r4, #48]	; 0x30
	GDMA_InitStruct->MaxMuliBlock = 1;
 23ff4fa:	64e0      	str	r0, [r4, #76]	; 0x4c
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
 23ff4fc:	6063      	str	r3, [r4, #4]
	GDMA_InitStruct->GDMA_Index = 0;
 23ff4fe:	7022      	strb	r2, [r4, #0]
	GDMA_InitStruct->GDMA_ChNum = GdmaChnl;
 23ff500:	7067      	strb	r7, [r4, #1]
	GDMA_InitStruct->GDMA_IsrType = (BlockType|TransferType|ErrType);	
 23ff502:	62e1      	str	r1, [r4, #44]	; 0x2c
	if (WordLen == SP_WL_8)  {
 23ff504:	d144      	bne.n	23ff590 <AUDIO_SP_RXGDMA_Init+0xfc>
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthOneByte;
		GDMA_InitStruct->GDMA_SrcMsize = MsizeFour;
		
		GDMA_InitStruct->GDMA_DstMsize = MsizeOne;
 23ff506:	e9c4 2006 	strd	r2, r0, [r4, #24]
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthOneByte;
 23ff50a:	60e2      	str	r2, [r4, #12]
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
 23ff50c:	60a3      	str	r3, [r4, #8]
		GDMA_InitStruct->GDMA_BlockSize = Length;
 23ff50e:	8526      	strh	r6, [r4, #40]	; 0x28
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
		GDMA_InitStruct->GDMA_BlockSize = Length >> 2;
	}
	
	/*check GDMA block size*/
	assert_param(GDMA_InitStruct->GDMA_BlockSize <= 4096);
 23ff510:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 23ff512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 23ff516:	d904      	bls.n	23ff522 <AUDIO_SP_RXGDMA_Init+0x8e>
 23ff518:	f240 1177 	movw	r1, #375	; 0x177
 23ff51c:	482d      	ldr	r0, [pc, #180]	; (23ff5d4 <AUDIO_SP_RXGDMA_Init+0x140>)
 23ff51e:	f000 fa1f 	bl	23ff960 <__io_assert_failed_veneer>

	/*configure GDMA destination address */
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
	
	/*  Enable GDMA for RX */
	GDMA_Init(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, GDMA_InitStruct);
 23ff522:	4622      	mov	r2, r4
 23ff524:	4b2e      	ldr	r3, [pc, #184]	; (23ff5e0 <AUDIO_SP_RXGDMA_Init+0x14c>)
 23ff526:	7861      	ldrb	r1, [r4, #1]
 23ff528:	7820      	ldrb	r0, [r4, #0]
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
 23ff52a:	6265      	str	r5, [r4, #36]	; 0x24
	GDMA_Init(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, GDMA_InitStruct);
 23ff52c:	4798      	blx	r3
  * @brief  Check DCache Enabled or not.
  */
__STATIC_INLINE
u32 DCache_IsEnabled(void)
{
	return ((SCB->CCR & (u32)SCB_CCR_DC_Msk)?1:0);
 23ff52e:	4a2d      	ldr	r2, [pc, #180]	; (23ff5e4 <AUDIO_SP_RXGDMA_Init+0x150>)
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
 23ff530:	462f      	mov	r7, r5
 23ff532:	6953      	ldr	r3, [r2, #20]
__STATIC_INLINE
void DCache_CleanInvalidate(u32 Address, u32 Bytes)
{
	u32 addr = Address, len = Bytes;

	if (DCache_IsEnabled() == 0)
 23ff534:	03db      	lsls	r3, r3, #15
 23ff536:	d522      	bpl.n	23ff57e <AUDIO_SP_RXGDMA_Init+0xea>
		return;

	if ((Address == 0xFFFFFFFF) && (Bytes == 0xFFFFFFFF)) {
 23ff538:	1c68      	adds	r0, r5, #1
 23ff53a:	d130      	bne.n	23ff59e <AUDIO_SP_RXGDMA_Init+0x10a>
 23ff53c:	1c71      	adds	r1, r6, #1
 23ff53e:	d130      	bne.n	23ff5a2 <AUDIO_SP_RXGDMA_Init+0x10e>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 23ff540:	2300      	movs	r3, #0
 23ff542:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 23ff546:	f3bf 8f4f 	dsb	sy
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23ff54a:	f643 75e0 	movw	r5, #16352	; 0x3fe0
    ccsidr = SCB->CCSIDR;
 23ff54e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 23ff552:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 23ff556:	f3c3 334e 	ubfx	r3, r3, #13, #15
 23ff55a:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 23ff55c:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23ff55e:	ea03 0705 	and.w	r7, r3, r5
 23ff562:	ea47 76c1 	orr.w	r6, r7, r1, lsl #31
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 23ff566:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23ff568:	f8c2 6274 	str.w	r6, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 23ff56c:	d2f9      	bcs.n	23ff562 <AUDIO_SP_RXGDMA_Init+0xce>
    } while(sets-- != 0U);
 23ff56e:	3b20      	subs	r3, #32
 23ff570:	f113 0f20 	cmn.w	r3, #32
 23ff574:	d1f2      	bne.n	23ff55c <AUDIO_SP_RXGDMA_Init+0xc8>
 23ff576:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 23ff57a:	f3bf 8f6f 	isb	sy
	DCache_CleanInvalidate((u32)pRxData, Length);
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23ff57e:	7820      	ldrb	r0, [r4, #0]
 23ff580:	2201      	movs	r2, #1
 23ff582:	7861      	ldrb	r1, [r4, #1]
 23ff584:	4b18      	ldr	r3, [pc, #96]	; (23ff5e8 <AUDIO_SP_RXGDMA_Init+0x154>)
 23ff586:	4798      	blx	r3

	return _TRUE;
 23ff588:	2001      	movs	r0, #1
}
 23ff58a:	b003      	add	sp, #12
 23ff58c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		GDMA_InitStruct->GDMA_DstMsize = MsizeEight;
 23ff590:	e9c4 3306 	strd	r3, r3, [r4, #24]
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthFourBytes;
 23ff594:	60e3      	str	r3, [r4, #12]
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
 23ff596:	60a3      	str	r3, [r4, #8]
		GDMA_InitStruct->GDMA_BlockSize = Length >> 2;
 23ff598:	08b3      	lsrs	r3, r6, #2
 23ff59a:	8523      	strh	r3, [r4, #40]	; 0x28
 23ff59c:	e7b8      	b.n	23ff510 <AUDIO_SP_RXGDMA_Init+0x7c>
		SCB_CleanInvalidateDCache();
	} else {
		if ((addr & 0x1F) != 0) {
 23ff59e:	06eb      	lsls	r3, r5, #27
 23ff5a0:	d007      	beq.n	23ff5b2 <AUDIO_SP_RXGDMA_Init+0x11e>
			addr = (Address >> 5) << 5;   //32-byte aligned
 23ff5a2:	f025 071f 	bic.w	r7, r5, #31
			len = ((((Address + Bytes -1) >> 5) + 1) << 5) - addr; //next 32-byte aligned
 23ff5a6:	4435      	add	r5, r6
 23ff5a8:	3d01      	subs	r5, #1
 23ff5aa:	f025 051f 	bic.w	r5, r5, #31
 23ff5ae:	3520      	adds	r5, #32
 23ff5b0:	1bee      	subs	r6, r5, r7
		}

		SCB_CleanInvalidateDCache_by_Addr((u32*)addr, len);
 23ff5b2:	4635      	mov	r5, r6
  __ASM volatile ("dsb 0xF":::"memory");
 23ff5b4:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCIMVAC = op_addr;
 23ff5b8:	4a0a      	ldr	r2, [pc, #40]	; (23ff5e4 <AUDIO_SP_RXGDMA_Init+0x150>)
 23ff5ba:	4437      	add	r7, r6
    while (op_size > 0) {
 23ff5bc:	2d00      	cmp	r5, #0
 23ff5be:	eba7 0305 	sub.w	r3, r7, r5
 23ff5c2:	ddd8      	ble.n	23ff576 <AUDIO_SP_RXGDMA_Init+0xe2>
      SCB->DCCIMVAC = op_addr;
 23ff5c4:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 23ff5c8:	3d20      	subs	r5, #32
 23ff5ca:	e7f7      	b.n	23ff5bc <AUDIO_SP_RXGDMA_Init+0x128>
		return _FALSE;
 23ff5cc:	2000      	movs	r0, #0
 23ff5ce:	e7dc      	b.n	23ff58a <AUDIO_SP_RXGDMA_Init+0xf6>
 23ff5d0:	023ffe04 	.word	0x023ffe04
 23ff5d4:	023ffe10 	.word	0x023ffe10
 23ff5d8:	1010c43d 	.word	0x1010c43d
 23ff5dc:	10110ea1 	.word	0x10110ea1
 23ff5e0:	1010bff9 	.word	0x1010bff9
 23ff5e4:	e000ed00 	.word	0xe000ed00
 23ff5e8:	1010bf91 	.word	0x1010bf91

023ff5ec <_ZnwjRKSt9nothrow_t>:
 23ff5ec:	f7fc b953 	b.w	23fb896 <_Znwj>

023ff5f0 <_ZnajRKSt9nothrow_t>:
 23ff5f0:	f7fc b953 	b.w	23fb89a <_Znaj>

023ff5f4 <_ZSt25__throw_bad_function_callv>:
 23ff5f4:	b508      	push	{r3, lr}
 23ff5f6:	f7fd fe07 	bl	23fd208 <abort>

023ff5fa <atexit>:
 23ff5fa:	2300      	movs	r3, #0
 23ff5fc:	4601      	mov	r1, r0
 23ff5fe:	461a      	mov	r2, r3
 23ff600:	4618      	mov	r0, r3
 23ff602:	f000 b93b 	b.w	23ff87c <__register_exitproc>
	...

023ff608 <isprint>:
 23ff608:	4b02      	ldr	r3, [pc, #8]	; (23ff614 <isprint+0xc>)
 23ff60a:	4418      	add	r0, r3
 23ff60c:	7840      	ldrb	r0, [r0, #1]
 23ff60e:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff612:	4770      	bx	lr
 23ff614:	023ffec8 	.word	0x023ffec8

023ff618 <memcpy>:
 23ff618:	440a      	add	r2, r1
 23ff61a:	1e43      	subs	r3, r0, #1
 23ff61c:	4291      	cmp	r1, r2
 23ff61e:	d100      	bne.n	23ff622 <memcpy+0xa>
 23ff620:	4770      	bx	lr
 23ff622:	b510      	push	{r4, lr}
 23ff624:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff628:	4291      	cmp	r1, r2
 23ff62a:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff62e:	d1f9      	bne.n	23ff624 <memcpy+0xc>
 23ff630:	bd10      	pop	{r4, pc}

023ff632 <memmove>:
 23ff632:	4288      	cmp	r0, r1
 23ff634:	b510      	push	{r4, lr}
 23ff636:	eb01 0402 	add.w	r4, r1, r2
 23ff63a:	d902      	bls.n	23ff642 <memmove+0x10>
 23ff63c:	4284      	cmp	r4, r0
 23ff63e:	4623      	mov	r3, r4
 23ff640:	d807      	bhi.n	23ff652 <memmove+0x20>
 23ff642:	1e43      	subs	r3, r0, #1
 23ff644:	42a1      	cmp	r1, r4
 23ff646:	d008      	beq.n	23ff65a <memmove+0x28>
 23ff648:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff64c:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff650:	e7f8      	b.n	23ff644 <memmove+0x12>
 23ff652:	4402      	add	r2, r0
 23ff654:	4601      	mov	r1, r0
 23ff656:	428a      	cmp	r2, r1
 23ff658:	d100      	bne.n	23ff65c <memmove+0x2a>
 23ff65a:	bd10      	pop	{r4, pc}
 23ff65c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff660:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff664:	e7f7      	b.n	23ff656 <memmove+0x24>

023ff666 <memset>:
 23ff666:	4402      	add	r2, r0
 23ff668:	4603      	mov	r3, r0
 23ff66a:	4293      	cmp	r3, r2
 23ff66c:	d100      	bne.n	23ff670 <memset+0xa>
 23ff66e:	4770      	bx	lr
 23ff670:	f803 1b01 	strb.w	r1, [r3], #1
 23ff674:	e7f9      	b.n	23ff66a <memset+0x4>
	...

023ff678 <srand>:
 23ff678:	b538      	push	{r3, r4, r5, lr}
 23ff67a:	4b10      	ldr	r3, [pc, #64]	; (23ff6bc <srand+0x44>)
 23ff67c:	4604      	mov	r4, r0
 23ff67e:	681d      	ldr	r5, [r3, #0]
 23ff680:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff682:	b9b3      	cbnz	r3, 23ff6b2 <srand+0x3a>
 23ff684:	2018      	movs	r0, #24
 23ff686:	f7fd fd87 	bl	23fd198 <malloc>
 23ff68a:	4602      	mov	r2, r0
 23ff68c:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff68e:	b920      	cbnz	r0, 23ff69a <srand+0x22>
 23ff690:	4b0b      	ldr	r3, [pc, #44]	; (23ff6c0 <srand+0x48>)
 23ff692:	2142      	movs	r1, #66	; 0x42
 23ff694:	480b      	ldr	r0, [pc, #44]	; (23ff6c4 <srand+0x4c>)
 23ff696:	f7fd fdd3 	bl	23fd240 <__assert_func>
 23ff69a:	490b      	ldr	r1, [pc, #44]	; (23ff6c8 <srand+0x50>)
 23ff69c:	4b0b      	ldr	r3, [pc, #44]	; (23ff6cc <srand+0x54>)
 23ff69e:	e9c0 1300 	strd	r1, r3, [r0]
 23ff6a2:	4b0b      	ldr	r3, [pc, #44]	; (23ff6d0 <srand+0x58>)
 23ff6a4:	2100      	movs	r1, #0
 23ff6a6:	6083      	str	r3, [r0, #8]
 23ff6a8:	230b      	movs	r3, #11
 23ff6aa:	8183      	strh	r3, [r0, #12]
 23ff6ac:	2001      	movs	r0, #1
 23ff6ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff6b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff6b4:	2200      	movs	r2, #0
 23ff6b6:	611c      	str	r4, [r3, #16]
 23ff6b8:	615a      	str	r2, [r3, #20]
 23ff6ba:	bd38      	pop	{r3, r4, r5, pc}
 23ff6bc:	1007a468 	.word	0x1007a468
 23ff6c0:	023ffe34 	.word	0x023ffe34
 23ff6c4:	023ffe4b 	.word	0x023ffe4b
 23ff6c8:	abcd330e 	.word	0xabcd330e
 23ff6cc:	e66d1234 	.word	0xe66d1234
 23ff6d0:	0005deec 	.word	0x0005deec

023ff6d4 <strchr>:
 23ff6d4:	b2c9      	uxtb	r1, r1
 23ff6d6:	4603      	mov	r3, r0
 23ff6d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff6dc:	b11a      	cbz	r2, 23ff6e6 <strchr+0x12>
 23ff6de:	428a      	cmp	r2, r1
 23ff6e0:	d1f9      	bne.n	23ff6d6 <strchr+0x2>
 23ff6e2:	4618      	mov	r0, r3
 23ff6e4:	4770      	bx	lr
 23ff6e6:	2900      	cmp	r1, #0
 23ff6e8:	bf18      	it	ne
 23ff6ea:	2300      	movne	r3, #0
 23ff6ec:	e7f9      	b.n	23ff6e2 <strchr+0xe>

023ff6ee <strchrnul>:
 23ff6ee:	b510      	push	{r4, lr}
 23ff6f0:	4604      	mov	r4, r0
 23ff6f2:	f7ff ffef 	bl	23ff6d4 <strchr>
 23ff6f6:	b918      	cbnz	r0, 23ff700 <strchrnul+0x12>
 23ff6f8:	4620      	mov	r0, r4
 23ff6fa:	f7fc f8a7 	bl	23fb84c <strlen>
 23ff6fe:	4420      	add	r0, r4
 23ff700:	bd10      	pop	{r4, pc}

023ff702 <strcpy>:
 23ff702:	4603      	mov	r3, r0
 23ff704:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff708:	f803 2b01 	strb.w	r2, [r3], #1
 23ff70c:	2a00      	cmp	r2, #0
 23ff70e:	d1f9      	bne.n	23ff704 <strcpy+0x2>
 23ff710:	4770      	bx	lr

023ff712 <strncmp>:
 23ff712:	b510      	push	{r4, lr}
 23ff714:	b17a      	cbz	r2, 23ff736 <strncmp+0x24>
 23ff716:	4603      	mov	r3, r0
 23ff718:	3901      	subs	r1, #1
 23ff71a:	1884      	adds	r4, r0, r2
 23ff71c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff720:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff724:	4290      	cmp	r0, r2
 23ff726:	d101      	bne.n	23ff72c <strncmp+0x1a>
 23ff728:	42a3      	cmp	r3, r4
 23ff72a:	d101      	bne.n	23ff730 <strncmp+0x1e>
 23ff72c:	1a80      	subs	r0, r0, r2
 23ff72e:	bd10      	pop	{r4, pc}
 23ff730:	2800      	cmp	r0, #0
 23ff732:	d1f3      	bne.n	23ff71c <strncmp+0xa>
 23ff734:	e7fa      	b.n	23ff72c <strncmp+0x1a>
 23ff736:	4610      	mov	r0, r2
 23ff738:	e7f9      	b.n	23ff72e <strncmp+0x1c>

023ff73a <strrchr>:
 23ff73a:	b538      	push	{r3, r4, r5, lr}
 23ff73c:	4603      	mov	r3, r0
 23ff73e:	460c      	mov	r4, r1
 23ff740:	b969      	cbnz	r1, 23ff75e <strrchr+0x24>
 23ff742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff746:	f7ff bfc5 	b.w	23ff6d4 <strchr>
 23ff74a:	1c43      	adds	r3, r0, #1
 23ff74c:	4605      	mov	r5, r0
 23ff74e:	4621      	mov	r1, r4
 23ff750:	4618      	mov	r0, r3
 23ff752:	f7ff ffbf 	bl	23ff6d4 <strchr>
 23ff756:	2800      	cmp	r0, #0
 23ff758:	d1f7      	bne.n	23ff74a <strrchr+0x10>
 23ff75a:	4628      	mov	r0, r5
 23ff75c:	bd38      	pop	{r3, r4, r5, pc}
 23ff75e:	2500      	movs	r5, #0
 23ff760:	e7f5      	b.n	23ff74e <strrchr+0x14>
	...

023ff764 <_strtol_l.constprop.0>:
 23ff764:	2b01      	cmp	r3, #1
 23ff766:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff76a:	d001      	beq.n	23ff770 <_strtol_l.constprop.0+0xc>
 23ff76c:	2b24      	cmp	r3, #36	; 0x24
 23ff76e:	d906      	bls.n	23ff77e <_strtol_l.constprop.0+0x1a>
 23ff770:	f7fd fd58 	bl	23fd224 <__errno>
 23ff774:	2316      	movs	r3, #22
 23ff776:	6003      	str	r3, [r0, #0]
 23ff778:	2000      	movs	r0, #0
 23ff77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff77e:	460d      	mov	r5, r1
 23ff780:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff864 <_strtol_l.constprop.0+0x100>
 23ff784:	462e      	mov	r6, r5
 23ff786:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff78a:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff78e:	f017 0708 	ands.w	r7, r7, #8
 23ff792:	d1f7      	bne.n	23ff784 <_strtol_l.constprop.0+0x20>
 23ff794:	2c2d      	cmp	r4, #45	; 0x2d
 23ff796:	d132      	bne.n	23ff7fe <_strtol_l.constprop.0+0x9a>
 23ff798:	782c      	ldrb	r4, [r5, #0]
 23ff79a:	2701      	movs	r7, #1
 23ff79c:	1cb5      	adds	r5, r6, #2
 23ff79e:	2b00      	cmp	r3, #0
 23ff7a0:	d05b      	beq.n	23ff85a <_strtol_l.constprop.0+0xf6>
 23ff7a2:	2b10      	cmp	r3, #16
 23ff7a4:	d109      	bne.n	23ff7ba <_strtol_l.constprop.0+0x56>
 23ff7a6:	2c30      	cmp	r4, #48	; 0x30
 23ff7a8:	d107      	bne.n	23ff7ba <_strtol_l.constprop.0+0x56>
 23ff7aa:	782c      	ldrb	r4, [r5, #0]
 23ff7ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff7b0:	2c58      	cmp	r4, #88	; 0x58
 23ff7b2:	d14d      	bne.n	23ff850 <_strtol_l.constprop.0+0xec>
 23ff7b4:	786c      	ldrb	r4, [r5, #1]
 23ff7b6:	2310      	movs	r3, #16
 23ff7b8:	3502      	adds	r5, #2
 23ff7ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff7be:	f04f 0c00 	mov.w	ip, #0
 23ff7c2:	f108 38ff 	add.w	r8, r8, #4294967295
 23ff7c6:	4666      	mov	r6, ip
 23ff7c8:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff7cc:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff7d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff7d4:	f1be 0f09 	cmp.w	lr, #9
 23ff7d8:	d816      	bhi.n	23ff808 <_strtol_l.constprop.0+0xa4>
 23ff7da:	4674      	mov	r4, lr
 23ff7dc:	42a3      	cmp	r3, r4
 23ff7de:	dd24      	ble.n	23ff82a <_strtol_l.constprop.0+0xc6>
 23ff7e0:	f1bc 0f00 	cmp.w	ip, #0
 23ff7e4:	db1e      	blt.n	23ff824 <_strtol_l.constprop.0+0xc0>
 23ff7e6:	45b1      	cmp	r9, r6
 23ff7e8:	d31c      	bcc.n	23ff824 <_strtol_l.constprop.0+0xc0>
 23ff7ea:	d101      	bne.n	23ff7f0 <_strtol_l.constprop.0+0x8c>
 23ff7ec:	45a2      	cmp	sl, r4
 23ff7ee:	db19      	blt.n	23ff824 <_strtol_l.constprop.0+0xc0>
 23ff7f0:	fb06 4603 	mla	r6, r6, r3, r4
 23ff7f4:	f04f 0c01 	mov.w	ip, #1
 23ff7f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff7fc:	e7e8      	b.n	23ff7d0 <_strtol_l.constprop.0+0x6c>
 23ff7fe:	2c2b      	cmp	r4, #43	; 0x2b
 23ff800:	bf04      	itt	eq
 23ff802:	782c      	ldrbeq	r4, [r5, #0]
 23ff804:	1cb5      	addeq	r5, r6, #2
 23ff806:	e7ca      	b.n	23ff79e <_strtol_l.constprop.0+0x3a>
 23ff808:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff80c:	f1be 0f19 	cmp.w	lr, #25
 23ff810:	d801      	bhi.n	23ff816 <_strtol_l.constprop.0+0xb2>
 23ff812:	3c37      	subs	r4, #55	; 0x37
 23ff814:	e7e2      	b.n	23ff7dc <_strtol_l.constprop.0+0x78>
 23ff816:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff81a:	f1be 0f19 	cmp.w	lr, #25
 23ff81e:	d804      	bhi.n	23ff82a <_strtol_l.constprop.0+0xc6>
 23ff820:	3c57      	subs	r4, #87	; 0x57
 23ff822:	e7db      	b.n	23ff7dc <_strtol_l.constprop.0+0x78>
 23ff824:	f04f 3cff 	mov.w	ip, #4294967295
 23ff828:	e7e6      	b.n	23ff7f8 <_strtol_l.constprop.0+0x94>
 23ff82a:	f1bc 0f00 	cmp.w	ip, #0
 23ff82e:	da05      	bge.n	23ff83c <_strtol_l.constprop.0+0xd8>
 23ff830:	2322      	movs	r3, #34	; 0x22
 23ff832:	4646      	mov	r6, r8
 23ff834:	6003      	str	r3, [r0, #0]
 23ff836:	b942      	cbnz	r2, 23ff84a <_strtol_l.constprop.0+0xe6>
 23ff838:	4630      	mov	r0, r6
 23ff83a:	e79e      	b.n	23ff77a <_strtol_l.constprop.0+0x16>
 23ff83c:	b107      	cbz	r7, 23ff840 <_strtol_l.constprop.0+0xdc>
 23ff83e:	4276      	negs	r6, r6
 23ff840:	2a00      	cmp	r2, #0
 23ff842:	d0f9      	beq.n	23ff838 <_strtol_l.constprop.0+0xd4>
 23ff844:	f1bc 0f00 	cmp.w	ip, #0
 23ff848:	d000      	beq.n	23ff84c <_strtol_l.constprop.0+0xe8>
 23ff84a:	1e69      	subs	r1, r5, #1
 23ff84c:	6011      	str	r1, [r2, #0]
 23ff84e:	e7f3      	b.n	23ff838 <_strtol_l.constprop.0+0xd4>
 23ff850:	2430      	movs	r4, #48	; 0x30
 23ff852:	2b00      	cmp	r3, #0
 23ff854:	d1b1      	bne.n	23ff7ba <_strtol_l.constprop.0+0x56>
 23ff856:	2308      	movs	r3, #8
 23ff858:	e7af      	b.n	23ff7ba <_strtol_l.constprop.0+0x56>
 23ff85a:	2c30      	cmp	r4, #48	; 0x30
 23ff85c:	d0a5      	beq.n	23ff7aa <_strtol_l.constprop.0+0x46>
 23ff85e:	230a      	movs	r3, #10
 23ff860:	e7ab      	b.n	23ff7ba <_strtol_l.constprop.0+0x56>
 23ff862:	bf00      	nop
 23ff864:	023ffec9 	.word	0x023ffec9

023ff868 <strtol>:
 23ff868:	4613      	mov	r3, r2
 23ff86a:	460a      	mov	r2, r1
 23ff86c:	4601      	mov	r1, r0
 23ff86e:	4802      	ldr	r0, [pc, #8]	; (23ff878 <strtol+0x10>)
 23ff870:	6800      	ldr	r0, [r0, #0]
 23ff872:	f7ff bf77 	b.w	23ff764 <_strtol_l.constprop.0>
 23ff876:	bf00      	nop
 23ff878:	1007a468 	.word	0x1007a468

023ff87c <__register_exitproc>:
 23ff87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff880:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff940 <__register_exitproc+0xc4>
 23ff884:	4606      	mov	r6, r0
 23ff886:	461f      	mov	r7, r3
 23ff888:	460d      	mov	r5, r1
 23ff88a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff88e:	4691      	mov	r9, r2
 23ff890:	f000 f858 	bl	23ff944 <__retarget_lock_acquire_recursive>
 23ff894:	4b26      	ldr	r3, [pc, #152]	; (23ff930 <__register_exitproc+0xb4>)
 23ff896:	681c      	ldr	r4, [r3, #0]
 23ff898:	b934      	cbnz	r4, 23ff8a8 <__register_exitproc+0x2c>
 23ff89a:	4c26      	ldr	r4, [pc, #152]	; (23ff934 <__register_exitproc+0xb8>)
 23ff89c:	601c      	str	r4, [r3, #0]
 23ff89e:	4b26      	ldr	r3, [pc, #152]	; (23ff938 <__register_exitproc+0xbc>)
 23ff8a0:	b113      	cbz	r3, 23ff8a8 <__register_exitproc+0x2c>
 23ff8a2:	681b      	ldr	r3, [r3, #0]
 23ff8a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff8a8:	6863      	ldr	r3, [r4, #4]
 23ff8aa:	2b1f      	cmp	r3, #31
 23ff8ac:	dd07      	ble.n	23ff8be <__register_exitproc+0x42>
 23ff8ae:	f8d8 0000 	ldr.w	r0, [r8]
 23ff8b2:	f000 f849 	bl	23ff948 <__retarget_lock_release_recursive>
 23ff8b6:	f04f 30ff 	mov.w	r0, #4294967295
 23ff8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff8be:	b35e      	cbz	r6, 23ff918 <__register_exitproc+0x9c>
 23ff8c0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff8c4:	b988      	cbnz	r0, 23ff8ea <__register_exitproc+0x6e>
 23ff8c6:	4b1d      	ldr	r3, [pc, #116]	; (23ff93c <__register_exitproc+0xc0>)
 23ff8c8:	b923      	cbnz	r3, 23ff8d4 <__register_exitproc+0x58>
 23ff8ca:	f8d8 0000 	ldr.w	r0, [r8]
 23ff8ce:	f000 f83a 	bl	23ff946 <__retarget_lock_release>
 23ff8d2:	e7f0      	b.n	23ff8b6 <__register_exitproc+0x3a>
 23ff8d4:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff8d8:	f7fd fc5e 	bl	23fd198 <malloc>
 23ff8dc:	2800      	cmp	r0, #0
 23ff8de:	d0f4      	beq.n	23ff8ca <__register_exitproc+0x4e>
 23ff8e0:	2300      	movs	r3, #0
 23ff8e2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff8e6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff8ea:	6863      	ldr	r3, [r4, #4]
 23ff8ec:	2201      	movs	r2, #1
 23ff8ee:	2e02      	cmp	r6, #2
 23ff8f0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff8f4:	fa02 f203 	lsl.w	r2, r2, r3
 23ff8f8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff8fc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff900:	ea43 0302 	orr.w	r3, r3, r2
 23ff904:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff908:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff90c:	bf02      	ittt	eq
 23ff90e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff912:	4313      	orreq	r3, r2
 23ff914:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff918:	6863      	ldr	r3, [r4, #4]
 23ff91a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff91e:	1c5a      	adds	r2, r3, #1
 23ff920:	3302      	adds	r3, #2
 23ff922:	6062      	str	r2, [r4, #4]
 23ff924:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff928:	f000 f80e 	bl	23ff948 <__retarget_lock_release_recursive>
 23ff92c:	2000      	movs	r0, #0
 23ff92e:	e7c4      	b.n	23ff8ba <__register_exitproc+0x3e>
 23ff930:	1007aff0 	.word	0x1007aff0
 23ff934:	1007af64 	.word	0x1007af64
 23ff938:	00000000 	.word	0x00000000
 23ff93c:	023fd199 	.word	0x023fd199
 23ff940:	1007a4cc 	.word	0x1007a4cc

023ff944 <__retarget_lock_acquire_recursive>:
 23ff944:	4770      	bx	lr

023ff946 <__retarget_lock_release>:
 23ff946:	4770      	bx	lr

023ff948 <__retarget_lock_release_recursive>:
 23ff948:	4770      	bx	lr
 23ff94a:	0000      	movs	r0, r0
 23ff94c:	0000      	movs	r0, r0
	...

023ff950 <__DelayMs_veneer>:
 23ff950:	b401      	push	{r0}
 23ff952:	4802      	ldr	r0, [pc, #8]	; (23ff95c <__DelayMs_veneer+0xc>)
 23ff954:	4684      	mov	ip, r0
 23ff956:	bc01      	pop	{r0}
 23ff958:	4760      	bx	ip
 23ff95a:	bf00      	nop
 23ff95c:	1010a995 	.word	0x1010a995

023ff960 <__io_assert_failed_veneer>:
 23ff960:	b401      	push	{r0}
 23ff962:	4802      	ldr	r0, [pc, #8]	; (23ff96c <__io_assert_failed_veneer+0xc>)
 23ff964:	4684      	mov	ip, r0
 23ff966:	bc01      	pop	{r0}
 23ff968:	4760      	bx	ip
 23ff96a:	bf00      	nop
 23ff96c:	1010a871 	.word	0x1010a871

023ff970 <__DelayUs_veneer>:
 23ff970:	b401      	push	{r0}
 23ff972:	4802      	ldr	r0, [pc, #8]	; (23ff97c <__DelayUs_veneer+0xc>)
 23ff974:	4684      	mov	ip, r0
 23ff976:	bc01      	pop	{r0}
 23ff978:	4760      	bx	ip
 23ff97a:	bf00      	nop
 23ff97c:	1010a949 	.word	0x1010a949

023ff980 <dynalib_user>:
 23ff980:	023fb85d 023fb885 023fb889 00000000     ].?...?...?.....
 23ff990:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23ff9a0:	6c617574 656e4500 20796772 6576654c     tual.Energy Leve
 23ff9b0:	25203a6c 65520064 64726f63 20676e69     l: %d.Recording 
 23ff9c0:	706d6f63 6574656c 7453002e 69747261     complete..Starti
 23ff9d0:	5020676e 72676f72 2e2e6d61 4450002e     ng Program....PD
 23ff9e0:	6564204d 65646f63 6e692072 65207469     M decoder init e
 23ff9f0:	253d7272 44500064 6564204d 65646f63     rr=%d.PDM decode
 23ffa00:	74732072 20747261 3d727265 4d006425     r start err=%d.M
 23ffa10:	6f726369 6e6f6870 6e692065 61697469     icrophone initia
 23ffa20:	657a696c 75732064 73656363 6c756673     lized successful
 23ffa30:	002e796c                                ly..

023ffa34 <_ZTVN5spark10LogHandlerE>:
	...
 23ffa44:	023fb8a9 023fc011                       ..?...?.

023ffa4c <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ffa54:	023fc01d 023fc051 023fe1f9 023fe3a1     ..?.Q.?...?...?.

023ffa64 <_ZTV22Microphone_PDM_RTL872x>:
	...
 23ffa6c:	023fc49f 023fc4a9 023fc495 023fc4b7     ..?...?...?...?.
 23ffa7c:	023fc499 023fc4df 023fc4a1 023fc4ef     ..?...?...?...?.
 23ffa8c:	023fc501 023fc52f                       ..?./.?.

023ffa94 <_ZTV18Microphone_PDM_MCU>:
	...
 23ffa9c:	023fc5d5 023fc5e9 023fc495 023fc4b7     ..?...?...?...?.
 23ffaac:	023fc499 023fc4df 023fc4a1 023fc4ef     ..?...?...?...?.
 23ffabc:	023fc501 023fc52f                       ..?./.?.

023ffac4 <_ZTV14Microphone_PDM>:
	...
 23ffacc:	023fc5fd 023fc611 023fc495 023fc5bf     ..?...?...?...?.
 23ffadc:	023fc5a3 023fc5c3 023fc5c7 023fc5cb     ..?...?...?...?.
 23ffaec:	023fc5cf 023fc6cd                       ..?...?.

023ffaf4 <_ZTV29Microphone_PDM_BufferSampling>:
	...
 23ffafc:	023fc699 023fc6b9 023fc77d 023fc739     ..?...?.}.?.9.?.
 23ffb0c:	023fc5a9 023fc5a1 66667562 74207265     ..?...?.buffer t
 23ffb1c:	73206f6f 6c6c616d 6177202c 64252073     oo small, was %d
 23ffb2c:	65656e20 34342064 46495200 41570046      need 44.RIFF.WA
 23ffb3c:	66004556 0020746d 61746164 00000000     VE.fmt .data....

023ffb4c <_ZTV16MicWavHeaderBase>:
	...
 23ffb54:	023fc8b9 023fc8bb                       ..?...?.

023ffb5c <_ZTV33Microphone_PDM_BufferSampling_wav>:
	...
 23ffb64:	023fc8c9 023fc8dd 023fc77d 023fc739     ..?...?.}.?.9.?.
 23ffb74:	023fc5a9 023fca0d                       ..?...?.

023ffb7c <_ZTVN5spark13EthernetClassE>:
	...
 23ffb84:	023fd2d7 023fd2cd 023fd2c3 023fd2b9     ..?...?...?...?.
 23ffb94:	023fd2ad 023fd2a1 023fead9 023feae1     ..?...?...?...?.
 23ffba4:	023fd295 023fd28d 023fd283 023fd279     ..?...?...?.y.?.
 23ffbb4:	023fec09 023feb11 023feb19 64756162     ..?...?...?.baud
 23ffbc4:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
 23ffbd4:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
 23ffbe4:	72656c64 70706100 31302500 00207530     dler.app.%010u .
 23ffbf4:	2c00205d 29280020 2000203a 6f63005b     ] ., .(): . [.co
 23ffc04:	3d206564 69250020 74656400 736c6961     de = .%i.details
 23ffc14:	00203d20 6d000a0d 6c006600 6e66006e      = ....m.f.ln.fn
 23ffc24:	63007400 0065646f 61746564 00006c69     .t.code.detail..

023ffc34 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffc3c:	023fd5f1 023fd617 023fd5d5 023fec5f     ..?...?...?._.?.

023ffc4c <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffc54:	023fdaa5 023fdabd 023fe1f9 023fe3a1     ..?...?...?...?.

023ffc64 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffc6c:	023fdad1 023fdae5 023fe3d9 023fd5dd     ..?...?...?...?.

023ffc7c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffc84:	023fd5ef 023fd625 023fe15d 023fd5df     ..?.%.?.].?...?.

023ffc94 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffc9c:	023fd5ed 023fd633 023fda0d 023fd655     ..?.3.?...?.U.?.
 23ffcac:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
 23ffcbc:	007a2553 74637361 00656d69              S%z.asctime.

023ffcc8 <_ZTV9IPAddress>:
	...
 23ffcd0:	023fe6d5 023fe6c5 023fe6c7              ..?...?...?.

023ffcdc <_ZTV9USBSerial>:
	...
 23ffce4:	023fe7bb 023fe823 023fe7f9 023fd4b5     ..?.#.?...?...?.
 23ffcf4:	023fe7eb 023fe7bd 023fe7cd 023fe81d     ..?...?...?...?.
 23ffd04:	023fe7dd 023fe7b5                       ..?...?.

023ffd0c <_ZTV11USARTSerial>:
	...
 23ffd14:	023fe8c9 023fe935 023fe90d 023fd4b5     ..?.5.?...?...?.
 23ffd24:	023fe8dd 023fe8f9 023fe8eb 023fe907     ..?...?...?...?.
 23ffd34:	023fe8cb 023fe8cf                       ..?...?.

023ffd3c <_ZTV7TwoWire>:
	...
 23ffd44:	023fe987 023fe9d1 023fe9a9 023fe989     ..?...?...?...?.
 23ffd54:	023fe9b1 023fe9b9 023fe9c1 023fe9c9     ..?...?...?...?.

023ffd64 <_ZTVN5spark9WiFiClassE>:
	...
 23ffd6c:	023fea7b 023fea71 023fea67 023fea1d     {.?.q.?.g.?...?.
 23ffd7c:	023fea5b 023fea4f 023fead9 023feae1     [.?.O.?...?...?.
 23ffd8c:	023fea43 023fea3b 023fea31 023fea27     C.?.;.?.1.?.'.?.
 23ffd9c:	023fec09 023feb11 023feb19              ..?...?...?.

023ffda8 <CSWTCH.109>:
 23ffda8:	1007ae5c 1007aee4 1007aeec              \...........

023ffdb4 <_ZTVN5spark12NetworkClassE>:
	...
 23ffdbc:	023fea99 023feaa3 023feaad 023feab7     ..?...?...?...?.
 23ffdcc:	023feac1 023feacd 023fead9 023feae1     ..?...?...?...?.
 23ffddc:	023feae9 023feaf5 023feafd 023feb07     ..?...?...?...?.
 23ffdec:	023fec09 023feb11 023feb19 75007525     ..?...?...?.%u.u
 23ffdfc:	78343025 00000000                       %04x....

023ffe04 <AUDIO_DEV_TABLE>:
 23ffe04:	40010800 0000000a 0000000b              ...@........

023ffe10 <__FUNCTION__.0>:
 23ffe10:	49445541 50535f4f 4758525f 5f414d44     AUDIO_SP_RXGDMA_
 23ffe20:	74696e49                                 Init.

023ffe25 <__FUNCTION__.4>:
 23ffe25:	49445541 50535f4f 696e495f               AUDIO_SP_Init.

023ffe33 <_ZSt7nothrow>:
 23ffe33:	45455200 6d20544e 6f6c6c61 75732063     .REENT malloc su
 23ffe43:	65656363 00646564 746e6d2f 726f772f     cceeded./mnt/wor
 23ffe53:	6170736b 772f6563 736b726f 65636170     kspace/workspace
 23ffe63:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
 23ffe73:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
 23ffe83:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
 23ffe93:	34323131 3036315f 30383136 2f313436     1124_1606180641/
 23ffea3:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
 23ffeb3:	696c2f62 732f6362 696c6474 61722f62     b/libc/stdlib/ra
 23ffec3:	632e646e                                 nd.c.

023ffec8 <_ctype_>:
 23ffec8:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffed8:	20202020 20202020 20202020 20202020                     
 23ffee8:	10108820 10101010 10101010 10101010      ...............
 23ffef8:	04040410 04040404 10040404 10101010     ................
 23fff08:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff18:	01010101 01010101 01010101 10101010     ................
 23fff28:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff38:	02020202 02020202 02020202 10101010     ................
 23fff48:	00000020 00000000 00000000 00000000      ...............
	...

023fffc9 <link_const_data_end>:
 23fffc9:	00          	.byte	0x00
	...

023fffcc <link_constructors_location>:
 23fffcc:	023fc3e9 	.word	0x023fc3e9
 23fffd0:	023fd2e1 	.word	0x023fd2e1
 23fffd4:	023fd309 	.word	0x023fd309
 23fffd8:	023fd4a5 	.word	0x023fd4a5
 23fffdc:	023fe1e9 	.word	0x023fe1e9
 23fffe0:	023fe54d 	.word	0x023fe54d
 23fffe4:	023fe569 	.word	0x023fe569
 23fffe8:	023fea85 	.word	0x023fea85
 23fffec:	023fec1d 	.word	0x023fec1d
